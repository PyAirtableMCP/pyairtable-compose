apiVersion: flagger.app/v1beta1
kind: Canary
metadata:
  name: api-gateway
  namespace: pyairtable-prod
spec:
  # Deployment reference
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  
  # HPA reference (optional)
  autoscalerRef:
    apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    name: api-gateway
  
  # Service configuration
  service:
    name: api-gateway
    port: 8000
    targetPort: 8000
    portDiscovery: true
    headers:
      request:
        add:
          x-canary-by: "flagger"
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
  
  # Progressive delivery configuration
  analysis:
    # Schedule interval (default 60s)
    interval: 30s
    # Max number of failed metric checks before rollback
    threshold: 5
    # Max traffic percentage routed to canary
    maxWeight: 50
    # Canary increment step
    stepWeight: 10
    # Alternative: custom step weights
    # stepWeights: [5, 10, 20, 30, 50]
    
    # Promotion threshold (promote when success rate > 99%)
    stepWeightPromotion: 100
    
    # Readiness thresholds
    primaryReadyThreshold: 100  # Wait for primary to be ready
    canaryReadyThreshold: 100   # Wait for canary to be ready
    
    # Metrics for canary analysis
    metrics:
      # Request success rate
      - name: request-success-rate
        thresholdRange:
          min: 99
        interval: 1m
        templateRef:
          name: success-rate
          namespace: flagger-system
      
      # Request duration P99
      - name: request-duration
        thresholdRange:
          max: 500
        interval: 30s
        templateRef:
          name: latency
          namespace: flagger-system
      
      # Custom business metric
      - name: business-metric
        thresholdRange:
          min: 95
        interval: 1m
        templateRef:
          name: business-success-rate
          namespace: flagger-system
    
    # Webhooks for custom checks
    webhooks:
      # Pre-rollout hook
      - name: "conformance-test"
        type: pre-rollout
        url: http://flagger-loadtester.test/
        timeout: 30s
        metadata:
          type: bash
          cmd: "curl -sd 'test' http://api-gateway-canary:8000/health | grep ok"
      
      # Load test hook
      - name: "load-test"
        type: rollout
        url: http://flagger-loadtester.test/
        metadata:
          cmd: "hey -z 1m -q 10 -c 2 http://api-gateway-canary:8000/api/health"
      
      # Post-rollout hook for cleanup
      - name: "acceptance-test"
        type: post-rollout
        url: http://flagger-loadtester.test/
        timeout: 10s
        metadata:
          type: bash
          cmd: "curl -sd 'test' http://api-gateway:8000/health | grep ok"
    
    # Alert providers
    alerts:
      - name: "canary-slack"
        severity: info
        providerRef:
          name: slack
          namespace: flagger-system
      
      - name: "canary-discord"
        severity: warn
        providerRef:
          name: discord
          namespace: flagger-system

---
# MetricTemplate for success rate
apiVersion: flagger.app/v1beta1
kind: MetricTemplate
metadata:
  name: success-rate
  namespace: flagger-system
spec:
  provider:
    type: prometheus
    address: http://prometheus.monitoring:9090
  query: |
    sum(
        rate(
            istio_requests_total{
              destination_service_name=~"{{ args.service }}",
              destination_service_namespace="{{ args.namespace }}",
              response_code!~"5.*"
            }[{{ args.interval }}]
        )
    ) 
    / 
    sum(
        rate(
            istio_requests_total{
              destination_service_name=~"{{ args.service }}",
              destination_service_namespace="{{ args.namespace }}"
            }[{{ args.interval }}]
        )
    ) 
    * 100

---
# MetricTemplate for latency
apiVersion: flagger.app/v1beta1
kind: MetricTemplate
metadata:
  name: latency
  namespace: flagger-system
spec:
  provider:
    type: prometheus
    address: http://prometheus.monitoring:9090
  query: |
    histogram_quantile(0.99,
      sum(
        rate(
          istio_request_duration_milliseconds_bucket{
            destination_service_name=~"{{ args.service }}",
            destination_service_namespace="{{ args.namespace }}"
          }[{{ args.interval }}]
        )
      ) by (le)
    )

---
# MetricTemplate for custom business metrics
apiVersion: flagger.app/v1beta1
kind: MetricTemplate
metadata:
  name: business-success-rate
  namespace: flagger-system
spec:
  provider:
    type: prometheus
    address: http://prometheus.monitoring:9090
  query: |
    sum(
        rate(
            http_requests_total{
              service="{{ args.service }}",
              namespace="{{ args.namespace }}",
              status=~"2.*"
            }[{{ args.interval }}]
        )
    ) 
    / 
    sum(
        rate(
            http_requests_total{
              service="{{ args.service }}",
              namespace="{{ args.namespace }}"
            }[{{ args.interval }}]
        )
    ) 
    * 100

---
# AlertProvider for Slack
apiVersion: flagger.app/v1beta1
kind: AlertProvider
metadata:
  name: slack
  namespace: flagger-system
spec:
  type: slack
  channel: "#deployments"
  username: flagger
  secretRef:
    name: slack-url

---
# AlertProvider for Discord
apiVersion: flagger.app/v1beta1
kind: AlertProvider
metadata:
  name: discord
  namespace: flagger-system
spec:
  type: discord
  channel: "deployments"
  username: flagger
  secretRef:
    name: discord-url