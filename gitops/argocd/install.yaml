apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: pyairtable-argocd
  namespace: argocd
spec:
  # High Availability Configuration
  ha:
    enabled: true
    
  # Server Configuration
  server:
    replicas: 2
    service:
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
      hosts:
        - argocd.pyairtable.com
      tls:
        - secretName: argocd-server-tls
          hosts:
            - argocd.pyairtable.com
    config:
      url: https://argocd.pyairtable.com
      application.instanceLabelKey: argocd.argoproj.io/instance
      # Enable OIDC authentication
      oidc.config: |
        name: GitHub
        issuer: https://token.actions.githubusercontent.com
        clientId: $oidc.github.clientId
        clientSecret: $oidc.github.clientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
        requestedIDTokenClaims: {"groups": {"essential": true}}
      # RBAC Configuration
      policy.default: role:readonly
      policy.csv: |
        p, role:admin, applications, *, */*, allow
        p, role:admin, clusters, *, *, allow
        p, role:admin, repositories, *, *, allow
        p, role:developer, applications, *, pyairtable-dev/*, allow
        p, role:developer, applications, *, pyairtable-staging/*, allow
        p, role:readonly, applications, get, */*, allow
        p, role:readonly, repositories, get, *, allow
        p, role:readonly, clusters, get, *, allow
        g, pyairtable:admins, role:admin
        g, pyairtable:developers, role:developer
        g, pyairtable:viewers, role:readonly
    
  # Controller Configuration
  controller:
    replicas: 2
    env:
      - name: ARGOCD_CONTROLLER_REPLICAS
        value: "2"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    
  # Repository Server Configuration
  repoServer:
    replicas: 2
    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: "300s"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    volumes:
      - name: custom-tools
        emptyDir: {}
    initContainers:
      - name: download-tools
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            # Install Helm
            wget https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
            tar -zxvf helm-v3.12.0-linux-amd64.tar.gz
            mv linux-amd64/helm /custom-tools/helm
            chmod +x /custom-tools/helm
            
            # Install Kustomize
            wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz
            tar -zxvf kustomize_v5.0.3_linux_amd64.tar.gz
            mv kustomize /custom-tools/kustomize
            chmod +x /custom-tools/kustomize
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    volumeMounts:
      - mountPath: /usr/local/bin/helm
        name: custom-tools
        subPath: helm
      - mountPath: /usr/local/bin/kustomize
        name: custom-tools
        subPath: kustomize
    
  # ApplicationSet Controller
  applicationSet:
    replicas: 2
    
  # Notifications Controller
  notifications:
    enabled: true
    configMap:
      create: true
    secret:
      create: true
    
  # Redis Configuration
  redis:
    enabled: true
    
  # Dex (OIDC) Configuration
  dex:
    openShiftOAuth: false
    
  # Resource Customizations
  resourceCustomizations: |
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
        
  # Resource Exclusions
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - "*"
      kinds:
      - TaskRun
      - PipelineRun
      
  # Sync Options
  syncOptions:
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    
---
# ArgoCD CLI Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-cli
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-cli
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-cli
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-cli
subjects:
- kind: ServiceAccount
  name: argocd-cli
  namespace: argocd