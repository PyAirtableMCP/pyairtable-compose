server:
  http_listen_port: 3200
  grpc_listen_port: 9095

distributor:
  receivers:                           # this configuration will listen on all ports and protocols that tempo is capable of
    jaeger:                            # the receives all come from the OpenTelemetry collector.  more configuration information can
      protocols:                       # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
        thrift_http:                   #
          endpoint: 0.0.0.0:14268
        grpc:                          # for a complete list of receivers see
          endpoint: 0.0.0.0:14250      # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver
        thrift_binary:
          endpoint: 0.0.0.0:6832
        thrift_compact:
          endpoint: 0.0.0.0:6831
    zipkin:
      endpoint: 0.0.0.0:9411
    otlp:
      protocols:
        http:
          endpoint: 0.0.0.0:4318
        grpc:
          endpoint: 0.0.0.0:4317
    opencensus:
      endpoint: 0.0.0.0:55678

ingester:
  max_block_duration: 5m               # cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally

compactor:
  compaction:
    block_retention: 1h                # overall Tempo trace retention. set for demo purposes

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /var/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true

storage:
  trace:
    backend: local                     # backend configuration to use
    wal:
      path: /var/tempo/wal             # where to store the the wal locally
    local:
      path: /var/tempo/blocks
    pool:
      max_workers: 100                 # worker pool determines the number of parallel requests to the object store backend
      queue_depth: 10000

usage_report:
  reporting_enabled: false

# Global tags to be applied to all spans
overrides:
  defaults:
    metrics_generator:
      processors: [service-graphs, span-metrics]