apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-orchestrator
  namespace: pyairtable-dev
  labels:
    app: llm-orchestrator
    component: ai
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: llm-orchestrator
  template:
    metadata:
      labels:
        app: llm-orchestrator
        component: ai
        environment: development
    spec:
      containers:
      - name: llm-orchestrator
        image: llm-orchestrator-py:latest
        imagePullPolicy: Never
        ports:
        - name: http
          containerPort: 8003
          protocol: TCP
        
        env:
        - name: PORT
          value: "8003"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: pyairtable-dev-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: pyairtable-dev-config
              key: LOG_LEVEL
        - name: ENABLE_DEBUG_ENDPOINTS
          valueFrom:
            configMapKeyRef:
              name: pyairtable-dev-config
              key: ENABLE_DEBUG_ENDPOINTS
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-dev-secrets
              key: API_KEY
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-dev-secrets
              key: GEMINI_API_KEY
        - name: THINKING_BUDGET
          valueFrom:
            secretKeyRef:
              name: pyairtable-dev-secrets
              key: THINKING_BUDGET
        - name: MCP_SERVER_HTTP_URL
          value: "http://mcp-server:8001"
        - name: USE_HTTP_MCP
          value: "true"
        - name: USE_REDIS_SESSIONS
          value: "false"  # Simplified for development
        
        # Higher resources for AI workloads
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "300m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: model-cache
          mountPath: /app/cache
        
        securityContext:
          runAsNonRoot: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: model-cache
        emptyDir:
          sizeLimit: 100Mi
      
      terminationGracePeriodSeconds: 15
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: llm-orchestrator
  namespace: pyairtable-dev
  labels:
    app: llm-orchestrator
    component: ai
    environment: development
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8003
    targetPort: 8003
    protocol: TCP
  selector:
    app: llm-orchestrator

---
apiVersion: v1
kind: Service
metadata:
  name: llm-orchestrator-external
  namespace: pyairtable-dev
  labels:
    app: llm-orchestrator
    component: ai-external
    environment: development
spec:
  type: NodePort
  ports:
  - name: http
    port: 8003
    targetPort: 8003
    nodePort: 30003
    protocol: TCP
  selector:
    app: llm-orchestrator