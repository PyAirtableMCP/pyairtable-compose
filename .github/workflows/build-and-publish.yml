name: Build and Publish Docker Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'python-services/**'
      - 'frontend-services/**'
      - '.github/workflows/build-and-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-services/**'
      - 'frontend-services/**'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to registry'
        required: true
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  # Registry username will be the GitHub actor (person who triggered the workflow)
  REGISTRY_USERNAME: ${{ github.actor }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      python-services: ${{ steps.changes.outputs.python-services }}
      frontend-services: ${{ steps.changes.outputs.frontend-services }}
      airtable-gateway: ${{ steps.changes.outputs.airtable-gateway }}
      mcp-server: ${{ steps.changes.outputs.mcp-server }}
      llm-orchestrator: ${{ steps.changes.outputs.llm-orchestrator }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python-services:
              - 'python-services/**'
            frontend-services:
              - 'frontend-services/**'
            airtable-gateway:
              - 'python-services/airtable-gateway/**'
            mcp-server:
              - 'python-services/mcp-server/**'
            llm-orchestrator:
              - 'python-services/llm-orchestrator/**'

  build-python-services:
    needs: changes
    if: ${{ needs.changes.outputs.python-services == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: airtable-gateway
            context: python-services/airtable-gateway
            dockerfile: Dockerfile
            image: airtable-gateway-py
          - name: mcp-server
            context: python-services/mcp-server
            dockerfile: Dockerfile
            image: mcp-server-py
          - name: llm-orchestrator
            context: python-services/llm-orchestrator
            dockerfile: Dockerfile
            image: llm-orchestrator-py
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check if service directory exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service.context }}" ] && [ -f "${{ matrix.service.context }}/${{ matrix.service.dockerfile }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service ${{ matrix.service.name }} directory or Dockerfile not found - skipping"
          fi

      - name: Build and push Docker image
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend-services:
    needs: changes
    if: ${{ needs.changes.outputs.frontend-services == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: tenant-dashboard
            context: frontend-services/tenant-dashboard
            dockerfile: Dockerfile
            image: tenant-dashboard
          - name: admin-dashboard
            context: frontend-services/admin-dashboard
            dockerfile: Dockerfile
            image: admin-dashboard
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check if service directory exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service.context }}" ] && [ -f "${{ matrix.service.context }}/${{ matrix.service.dockerfile }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service ${{ matrix.service.name }} directory or Dockerfile not found - skipping"
          fi

      - name: Build and push Docker image
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: [build-python-services, build-frontend-services]
    if: always() && (needs.build-python-services.result == 'success' || needs.build-frontend-services.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update-compose-files:
    needs: [build-python-services, build-frontend-services]
    if: github.ref == 'refs/heads/main' && (needs.build-python-services.result == 'success' || needs.build-frontend-services.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update docker-compose with new image tags
        run: |
          # Update main docker-compose.yml with the new image references
          # This would be customized based on your specific needs
          echo "Would update docker-compose files with new image tags here"
          # Example: sed commands to update image references
          
      - name: Create Pull Request
        if: github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ü§ñ Update docker-compose with new image tags"
          title: "Update Docker Compose with New Image Tags"
          body: |
            This PR updates docker-compose files with the latest built image tags.
            
            **Changes:**
            - Updated image references in docker-compose files
            - Images built from commit: ${{ github.sha }}
            
            **Auto-generated by:** Build and Publish workflow
          branch: update-compose-images
          base: main