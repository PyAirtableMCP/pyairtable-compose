name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Container Image Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        service: 
          - api-gateway
          - auth-service
          - user-service
          - workspace-service
          - airtable-gateway
          - ai-service
          - llm-orchestrator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build container image
        run: |
          docker build -t scan-target:latest \
            -f $(find . -name "Dockerfile" -path "*/${{ matrix.service }}/*" | head -1 | xargs dirname)/Dockerfile \
            $(find . -name "Dockerfile" -path "*/${{ matrix.service }}/*" | head -1 | xargs dirname)

      # Trivy vulnerability scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-target:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      # Snyk container scanning
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: scan-target:latest
          args: --severity-threshold=high --json-file-output=snyk-container-${{ matrix.service }}.json

      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        with:
          name: snyk-container-results
          path: snyk-container-*.json

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Terraform security scanning with tfsec
      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif
          category: 'tfsec'

      # Checkov scanning for IaC
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
          category: 'checkov'

      # Kubernetes security scanning
      - name: Run kubesec
        run: |
          docker run --rm -v $PWD:/workspace kubesec/kubesec:latest scan /workspace/k8s/**/*.yaml > kubesec-results.json

      - name: Upload kubesec results
        uses: actions/upload-artifact@v3
        with:
          name: kubesec-results
          path: kubesec-results.json

  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Python dependency scanning
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Scan Python dependencies with Safety
        run: |
          find . -name "requirements*.txt" | while read file; do
            echo "Scanning $file with Safety"
            safety check -r "$file" --json --output safety-results.json || true
          done

      # Go dependency scanning
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        run: |
          find . -name "go.mod" | while read file; do
            dir=$(dirname "$file")
            echo "Scanning Go code in $dir"
            cd "$dir"
            gosec -fmt sarif -out ../gosec-results.sarif ./... || true
            cd - > /dev/null
          done

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          category: 'gosec'

      # Node.js dependency scanning
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm-audit-ci
        run: npm install -g npm-audit-ci

      - name: Scan Node.js dependencies
        run: |
          find . -name "package.json" | while read file; do
            dir=$(dirname "$file")
            echo "Scanning Node.js dependencies in $dir"
            cd "$dir"
            npm audit --audit-level high --json > ../npm-audit-results.json || true
            cd - > /dev/null
          done

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-results.json
            npm-audit-results.json

  # OWASP ZAP Dynamic Security Testing
  dast-scan:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: []
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d --wait
          sleep 60

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: ZAP Full Scan (API Gateway)
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8000/api'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v3
        with:
          name: zap-results
          path: |
            report_html.html
            report_json.json

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # GitLeaks for secret detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # TruffleHog for additional secret detection
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Compliance and Policy Scanning
  compliance-scan:
    name: Compliance Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Open Policy Agent (OPA) compliance checks
      - name: Run OPA compliance checks
        run: |
          docker run --rm -v $PWD:/workspace openpolicyagent/opa:latest \
            test /workspace/policies/ -v

      # SLSA compliance check
      - name: SLSA Provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.7.0
        with:
          base64-subjects: ${{ needs.build.outputs.hashes }}

      - name: Upload compliance results
        uses: actions/upload-artifact@v3
        with:
          name: compliance-results
          path: |
            opa-results.json
            slsa-provenance.json

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-scan, infrastructure-scan, dependency-scan, secrets-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated security report
        run: |
          python3 -c "
          import json
          import os
          from datetime import datetime
          
          report = {
              'scan_date': datetime.now().isoformat(),
              'repository': '${{ github.repository }}',
              'ref': '${{ github.ref }}',
              'sha': '${{ github.sha }}',
              'vulnerabilities': {
                  'critical': 0,
                  'high': 0,
                  'medium': 0,
                  'low': 0
              },
              'scans_completed': [],
              'failed_scans': []
          }
          
          # Process scan results
          scan_dirs = ['snyk-container-results', 'dependency-scan-results', 'zap-results']
          for scan_dir in scan_dirs:
              if os.path.exists(scan_dir):
                  report['scans_completed'].append(scan_dir)
              else:
                  report['failed_scans'].append(scan_dir)
          
          with open('security-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          "

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

      - name: Create security issue if vulnerabilities found
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              if (report.vulnerabilities.critical > 0 || report.vulnerabilities.high > 5) {
                github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`,
                  body: `## Security Scan Results
                  
                  Critical vulnerabilities: ${report.vulnerabilities.critical}
                  High vulnerabilities: ${report.vulnerabilities.high}
                  Medium vulnerabilities: ${report.vulnerabilities.medium}
                  Low vulnerabilities: ${report.vulnerabilities.low}
                  
                  Scan date: ${report.scan_date}
                  Repository: ${report.repository}
                  Commit: ${report.sha}
                  
                  Please review the security scan artifacts for detailed information.`,
                  labels: ['security', 'urgent']
                });
              }
            } catch (error) {
              console.log('Could not read security report:', error);
            }
EOF < /dev/null