# User Service
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: pyairtable
spec:
  selector:
    app: user-service
  ports:
    - port: 8082
      targetPort: 8082
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: pyairtable/user-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
        env:
        - name: PORT
          value: "8082"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Notification Service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: pyairtable
spec:
  selector:
    app: notification-service
  ports:
    - port: 8083
      targetPort: 8083
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      containers:
      - name: notification-service
        image: pyairtable/notification-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8083
        env:
        - name: PORT
          value: "8083"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Audit Service
apiVersion: v1
kind: Service
metadata:
  name: audit-service
  namespace: pyairtable
spec:
  selector:
    app: audit-service
  ports:
    - port: 8084
      targetPort: 8084
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit-service
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: audit-service
  template:
    metadata:
      labels:
        app: audit-service
    spec:
      containers:
      - name: audit-service
        image: pyairtable/audit-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8084
        env:
        - name: PORT
          value: "8084"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8084
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Config Service
apiVersion: v1
kind: Service
metadata:
  name: config-service
  namespace: pyairtable
spec:
  selector:
    app: config-service
  ports:
    - port: 8085
      targetPort: 8085
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-service
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: config-service
  template:
    metadata:
      labels:
        app: config-service
    spec:
      containers:
      - name: config-service
        image: pyairtable/config-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8085
        env:
        - name: PORT
          value: "8085"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Metrics Service
apiVersion: v1
kind: Service
metadata:
  name: metrics-service
  namespace: pyairtable
spec:
  selector:
    app: metrics-service
  ports:
    - port: 8086
      targetPort: 8086
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-service
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: metrics-service
  template:
    metadata:
      labels:
        app: metrics-service
    spec:
      containers:
      - name: metrics-service
        image: pyairtable/metrics-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8086
        env:
        - name: PORT
          value: "8086"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8086
          initialDelaySeconds: 30
          periodSeconds: 10
---
# Scheduler Service
apiVersion: v1
kind: Service
metadata:
  name: scheduler-service
  namespace: pyairtable
spec:
  selector:
    app: scheduler-service
  ports:
    - port: 8087
      targetPort: 8087
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler-service
  namespace: pyairtable
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler-service
  template:
    metadata:
      labels:
        app: scheduler-service
    spec:
      containers:
      - name: scheduler-service
        image: pyairtable/scheduler-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8087
        env:
        - name: PORT
          value: "8087"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8087
          initialDelaySeconds: 30
          periodSeconds: 10