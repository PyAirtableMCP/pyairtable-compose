# Production-Optimized API Gateway with Enhanced Load Balancing and Circuit Breakers
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: pyairtable
  labels:
    app: api-gateway
    version: v1
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  selector:
    app: api-gateway
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: pyairtable
  labels:
    app: api-gateway
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: api-gateway
      version: v1
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
        # Circuit breaker configuration
        sidecar.istio.io/userVolumeMount: '[{"name":"circuit-breaker-config", "mountPath":"/etc/circuit-breaker", "readonly":true}]'
    spec:
      serviceAccountName: pyairtable-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do
            echo "Redis not ready, waiting..."
            sleep 2
          done
          echo "Waiting for Postgres..."
          until nc -z postgres-service 5432; do
            echo "Postgres not ready, waiting..."
            sleep 2
          done
          echo "Dependencies ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      containers:
      - name: api-gateway
        image: pyairtable/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)?sslmode=require"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: jwt-secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: api-key
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: postgres-db
        # Performance tuning
        - name: MAX_CONNECTIONS
          value: "1000"
        - name: KEEP_ALIVE_TIMEOUT
          value: "65"
        - name: REQUEST_TIMEOUT
          value: "30"
        - name: RATE_LIMIT_PER_MINUTE
          value: "1000"
        - name: CACHE_TTL
          value: "300"
        # Circuit breaker settings
        - name: CIRCUIT_BREAKER_ENABLED
          value: "true"
        - name: CIRCUIT_BREAKER_THRESHOLD
          value: "5"
        - name: CIRCUIT_BREAKER_TIMEOUT
          value: "60"
        # Load balancing
        - name: LOAD_BALANCE_STRATEGY
          value: "round_robin"
        - name: RETRY_ATTEMPTS
          value: "3"
        - name: RETRY_BACKOFF_MS
          value: "100"
        # Service URLs
        - name: AIRTABLE_GATEWAY_URL
          value: "http://airtable-gateway:8093"
        - name: LLM_ORCHESTRATOR_URL
          value: "http://llm-orchestrator:8091"
        - name: MCP_SERVER_URL
          value: "http://mcp-server:8092"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:8081"
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "4Gi"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 60
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: circuit-breaker-config
          mountPath: /etc/circuit-breaker
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      - name: circuit-breaker-config
        configMap:
          name: circuit-breaker-config
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: api-gateway
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: api-gateway
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: api-gateway
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - gateway

---
# HPA for API Gateway with Custom Metrics
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: pyairtable
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  # Custom metric for request rate
  - type: Object
    object:
      metric:
        name: requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
      describedObject:
        apiVersion: v1
        kind: Service
        name: api-gateway
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 4
        periodSeconds: 60
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Circuit Breaker Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: circuit-breaker-config
  namespace: pyairtable
data:
  circuit-breaker.yaml: |
    services:
      airtable-gateway:
        failure_threshold: 5
        recovery_timeout: 60s
        success_threshold: 3
        timeout: 10s
      llm-orchestrator:
        failure_threshold: 3
        recovery_timeout: 120s
        success_threshold: 2
        timeout: 30s
      mcp-server:
        failure_threshold: 5
        recovery_timeout: 60s
        success_threshold: 3
        timeout: 10s

---
# VPA for API Gateway (Optional - if VPA is installed)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: api-gateway-vpa
  namespace: pyairtable
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: api-gateway
      minAllowed:
        cpu: 200m
        memory: 256Mi
      maxAllowed:
        cpu: 2000m
        memory: 2Gi
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for API Gateway
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: pyairtable
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway

---
# Network Policy for API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-netpol
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow from all
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: airtable-gateway
    ports:
    - protocol: TCP
      port: 8093
  - to:
    - podSelector:
        matchLabels:
          app: llm-orchestrator
    ports:
    - protocol: TCP
      port: 8091
  - to:
    - podSelector:
        matchLabels:
          app: mcp-server
    ports:
    - protocol: TCP
      port: 8092
  - to:
    - podSelector:
        matchLabels:
          app: auth-service
    ports:
    - protocol: TCP
      port: 8081
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53