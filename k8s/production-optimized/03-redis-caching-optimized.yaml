# Production-Optimized Redis with Advanced Caching Strategies
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: pyairtable
data:
  redis.conf: |
    # Network and Security
    bind 0.0.0.0
    protected-mode yes
    port 6379
    timeout 300
    tcp-keepalive 300
    
    # Memory Management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence for session management
    save 900 1
    save 300 10
    save 60 10000
    
    # Performance Optimizations
    tcp-backlog 511
    databases 16
    
    # Logging
    loglevel notice
    
    # Client Output Buffer Limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Advanced Memory Settings
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Latency Monitor
    latency-monitor-threshold 100
    
    # Key Expiration
    hz 10
    
    # Threading (Redis 6.0+)
    # io-threads 4
    # io-threads-do-reads yes

---
# Redis Master Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: pyairtable
  labels:
    app: redis
    role: master
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: redis
    role: master
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
    - name: metrics
      port: 9121
      targetPort: 9121
      protocol: TCP
  type: ClusterIP

---
# Redis ReadOnly Service (for read replicas if needed)
apiVersion: v1
kind: Service
metadata:
  name: redis-readonly
  namespace: pyairtable
  labels:
    app: redis
    role: replica
spec:
  selector:
    app: redis
    role: replica
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  type: ClusterIP

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: pyairtable
  labels:
    app: redis
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pyairtable-sa
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: redis-config-init
        image: redis:7.4-alpine
        command:
        - sh
        - -c
        - |
          cp /tmp/redis/redis.conf /etc/redis/redis.conf
          chown 999:999 /etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /tmp/redis
        - name: redis-config-volume
          mountPath: /etc/redis
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
      containers:
      - name: redis
        image: redis:7.4-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config-volume
          mountPath: /etc/redis
        - name: tmp
          mountPath: /tmp
      # Redis Exporter for Prometheus
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.61.0
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-config-volume
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: redis
              topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      storageClassName: fast-ssd

---
# Redis Cache Configuration for Services
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cache-config
  namespace: pyairtable
data:
  cache-strategy.yaml: |
    # Cache configuration for different service types
    cache_strategies:
      # Session Management
      sessions:
        ttl: 3600  # 1 hour
        prefix: "session:"
        max_memory_percent: 30
        eviction_policy: "lru"
        
      # API Responses
      api_responses:
        ttl: 300   # 5 minutes
        prefix: "api:"
        max_memory_percent: 25
        eviction_policy: "lru"
        compression: true
        
      # Database Query Caching
      database_queries:
        ttl: 600   # 10 minutes
        prefix: "db:"
        max_memory_percent: 25
        eviction_policy: "lfu"
        
      # Airtable Data Caching
      airtable_data:
        ttl: 180   # 3 minutes
        prefix: "at:"
        max_memory_percent: 15
        eviction_policy: "lru"
        
      # LLM Response Caching
      llm_responses:
        ttl: 1800  # 30 minutes
        prefix: "llm:"
        max_memory_percent: 5
        eviction_policy: "lfu"
        
  redis-sentinel.conf: |
    # Redis Sentinel configuration for high availability
    port 26379
    sentinel announce-ip redis-sentinel
    sentinel announce-port 26379
    sentinel monitor mymaster redis-service 6379 2
    sentinel auth-pass mymaster $(REDIS_PASSWORD)
    sentinel down-after-milliseconds mymaster 30000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 180000
    sentinel deny-scripts-reconfig yes

---
# Redis Sentinel Deployment (for HA)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: pyairtable
  labels:
    app: redis-sentinel
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      serviceAccountName: pyairtable-sa
      containers:
      - name: redis-sentinel
        image: redis:7.4-alpine
        command:
        - redis-sentinel
        - /etc/redis/redis-sentinel.conf
        ports:
        - containerPort: 26379
          name: sentinel
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-cache-config
          items:
          - key: redis-sentinel.conf
            path: redis-sentinel.conf
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: redis-sentinel
            topologyKey: kubernetes.io/hostname

---
# Redis Sentinel Service
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: pyairtable
  labels:
    app: redis-sentinel
spec:
  selector:
    app: redis-sentinel
  ports:
    - port: 26379
      targetPort: 26379
      name: sentinel
  type: ClusterIP

---
# Storage Class for Fast SSD
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast-ssd
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  type: gp3
  iops: "3000"
  throughput: "125"

---
# Pod Disruption Budget for Redis
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: pyairtable
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
      role: master

---
# Service Monitor for Redis (Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-monitor
  namespace: pyairtable
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics