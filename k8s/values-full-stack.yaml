# Full PyAirtable stack - optimized for Minikube (3.8GB memory)
global:
  imageRegistry: ""  # Empty registry for local images
  imagePullPolicy: Never
  namespace: pyairtable

# Enable all services with resource-optimized settings
services:
  # Frontend - Next.js web interface (disabled until image is built)
  frontend:
    enabled: false
    image: pyairtable-frontend
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 400m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 256Mi

  # API Gateway - Main entry point
  apiGateway:
    enabled: true
    image: pyairtable-api-gateway
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

  # LLM Orchestrator - Gemini 2.5 Flash integration (disabled due to import errors)
  llmOrchestrator:
    enabled: false
    image: pyairtable-llm-orchestrator
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 500m
        memory: 640Mi
      requests:
        cpu: 250m
        memory: 320Mi

  # MCP Server - Protocol implementation
  mcpServer:
    enabled: true
    image: pyairtable-mcp-server
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

  # Airtable Gateway - Direct Airtable API integration (disabled due to import errors)
  airtableGateway:
    enabled: false
    image: pyairtable-airtable-gateway
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

  # Platform Services - Unified Auth & Analytics (disabled due to SQLAlchemy errors)
  platformServices:
    enabled: false
    image: pyairtable-platform-services
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

  # Automation Services - File processing and workflow automation (disabled due to pydantic errors)
  automationServices:
    enabled: false
    image: pyairtable-automation-services
    tag: dev
    replicas: 1
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

# Database services - keep existing optimized settings
databases:
  postgres:
    enabled: true
    persistence:
      enabled: true
      size: 1Gi
    resources:
      limits:
        cpu: 300m
        memory: 512Mi
      requests:
        cpu: 150m
        memory: 256Mi

  redis:
    enabled: true
    persistence:
      enabled: true
      size: 512Mi
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Persistent volumes
persistence:
  fileUploads:
    enabled: true
    size: 1Gi

# Application configuration
app:
  environment: development
  logLevel: INFO

# Health checks with lenient settings for slower startup
healthChecks:
  enabled: true
  initialDelaySeconds: 120  # Give services more time to start
  periodSeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10
  successThreshold: 1

# Disable autoscaling for development
autoscaling:
  enabled: false

# Disable ingress - use port forwarding instead
ingress:
  enabled: false

# Resource allocation summary:
# - Frontend: 512Mi limit, 256Mi request
# - API Gateway: 384Mi limit, 192Mi request  
# - LLM Orchestrator: 640Mi limit, 320Mi request
# - MCP Server: 384Mi limit, 192Mi request
# - Airtable Gateway: 384Mi limit, 192Mi request
# - Platform Services: 384Mi limit, 192Mi request
# - Automation Services: 384Mi limit, 192Mi request
# - PostgreSQL: 512Mi limit, 256Mi request
# - Redis: 256Mi limit, 128Mi request
# Total memory limits: ~3.6GB (within 3.8GB Minikube allocation)