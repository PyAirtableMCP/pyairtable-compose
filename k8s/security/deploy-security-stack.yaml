# Complete Security Stack Deployment for PyAirtable
# Production-ready deployment for 3vantage organization
# Includes mTLS, Vault, and RLS components

apiVersion: v1
kind: Namespace
metadata:
  name: pyairtable-system
  labels:
    security.3vantage.com/type: application
    istio-injection: enabled
---
apiVersion: v1
kind: Namespace
metadata:
  name: vault-system
  labels:
    security.3vantage.com/type: secrets-management
    istio-injection: disabled
---
# Security ConfigMap for global settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: pyairtable-system
data:
  security.yaml: |
    security:
      mtls:
        enabled: true
        require_client_cert: true
        ca_cert_path: "/etc/certs/ca.crt"
        cert_path: "/etc/certs/tls.crt"
        key_path: "/etc/certs/tls.key"
        min_tls_version: "1.2"
        max_tls_version: "1.3"
      
      vault:
        enabled: true
        address: "https://vault.vault-system.svc.cluster.local:8200"
        auth_method: "kubernetes"
        mount_path: "kubernetes"
        ca_cert_path: "/etc/certs/ca.crt"
        
      database:
        rls_enabled: true
        ssl_mode: "require"
        audit_enabled: true
        encryption_enabled: true
        
      audit:
        enabled: true
        log_level: "INFO"
        retention_days: 90
        siem_integration: true

---
# Network Policies for Security Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pyairtable-security-policy
  namespace: pyairtable-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: pyairtable-system
    ports:
    - protocol: TCP
      port: 443
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pyairtable-system
    ports:
    - protocol: TCP
      port: 443
  - to:
    - namespaceSelector:
        matchLabels:
          name: vault-system
    ports:
    - protocol: TCP
      port: 8200
  - ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vault-security-policy
  namespace: vault-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: pyairtable-system
    ports:
    - protocol: TCP
      port: 8200
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pyairtable-system
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL for Vault storage
  - ports:
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS

---
# Pod Security Standards
apiVersion: v1
kind: LimitRange
metadata:
  name: security-limits
  namespace: pyairtable-system
spec:
  limits:
  - default:
      memory: "512Mi"
      cpu: "500m"
    defaultRequest:
      memory: "256Mi"
      cpu: "250m"
    type: Container
  - max:
      memory: "2Gi"
      cpu: "2"
    min:
      memory: "128Mi"
      cpu: "100m"
    type: Container

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: security-quota
  namespace: pyairtable-system
spec:
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    persistentvolumeclaims: "10"
    secrets: "50"
    configmaps: "50"

---
# Service Accounts with Security Context
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway
  namespace: pyairtable-system
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "api-gateway"
    vault.hashicorp.com/agent-inject-secret-config: "pyairtable/data/jwt"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  namespace: pyairtable-system
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "auth-service"
    vault.hashicorp.com/agent-inject-secret-config: "pyairtable/data/jwt"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-services
  namespace: pyairtable-system
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "go-services"
    vault.hashicorp.com/agent-inject-secret-config: "pyairtable/data/database"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: python-services
  namespace: pyairtable-system
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "python-services"
    vault.hashicorp.com/agent-inject-secret-config: "pyairtable/data/external-apis"

---
# RBAC for Security Services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: pyairtable-system
  name: security-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-binding
  namespace: pyairtable-system
subjects:
- kind: ServiceAccount
  name: api-gateway
  namespace: pyairtable-system
- kind: ServiceAccount
  name: auth-service
  namespace: pyairtable-system
- kind: ServiceAccount
  name: go-services
  namespace: pyairtable-system
- kind: ServiceAccount
  name: python-services
  namespace: pyairtable-system
roleRef:
  kind: Role
  name: security-role
  apiGroup: rbac.authorization.k8s.io

---
# Pod Security Policy (if enabled in cluster)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: pyairtable-security-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true

---
# Security Monitoring ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: security-metrics
  namespace: pyairtable-system
  labels:
    app: security-monitoring
spec:
  selector:
    matchLabels:
      security.3vantage.com/monitoring: "true"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  - port: https
    interval: 30s
    path: /health
    scheme: https
    tlsConfig:
      ca:
        secret:
          name: pyairtable-ca-key-pair
          key: tls.crt
      cert:
        secret:
          name: monitoring-tls
          key: tls.crt
      keySecret:
        name: monitoring-tls
        key: tls.key

---
# Istio Security Policies
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: pyairtable-system
spec:
  mtls:
    mode: STRICT

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: pyairtable-authz
  namespace: pyairtable-system
spec:
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable-system/sa/api-gateway"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/*"]

---
# Security Audit CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-audit
  namespace: pyairtable-system
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: security-audit
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            fsGroup: 65532
          containers:
          - name: security-audit
            image: pyairtable/security-audit:latest
            imagePullPolicy: Always
            command:
            - /bin/sh
            - -c
            - |
              # Run security audits
              echo "Running daily security audit..."
              
              # Check certificate expiration
              for cert in /etc/certs/*.crt; do
                if [ -f "$cert" ]; then
                  echo "Checking certificate: $cert"
                  openssl x509 -in "$cert" -checkend 2592000  # 30 days
                fi
              done
              
              # Validate Vault health
              vault status || echo "Vault health check failed"
              
              # Check database connectivity
              pg_isready -h postgres.pyairtable-system.svc.cluster.local -p 5432
              
              # Generate security report
              echo "Security audit completed at $(date)"
            env:
            - name: VAULT_ADDR
              value: "https://vault.vault-system.svc.cluster.local:8200"
            - name: VAULT_CACERT
              value: "/etc/certs/ca.crt"
            volumeMounts:
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: certs
            secret:
              secretName: pyairtable-ca-key-pair
          restartPolicy: OnFailure

---
# Service Account for Security Audit
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-audit
  namespace: pyairtable-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: pyairtable-system
  name: security-audit-role
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-audit-binding
  namespace: pyairtable-system
subjects:
- kind: ServiceAccount
  name: security-audit
  namespace: pyairtable-system
roleRef:
  kind: Role
  name: security-audit-role
  apiGroup: rbac.authorization.k8s.io

---
# Certificate Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cert-rotation
  namespace: pyairtable-system
spec:
  schedule: "0 1 1 * *"  # Monthly on 1st at 1 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cert-manager
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            fsGroup: 65532
          containers:
          - name: cert-rotation
            image: cfssl/cfssl:1.6.4
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting certificate rotation..."
              
              # Check certificate expiration (30 days)
              for service in api-gateway auth-service user-service; do
                if ! openssl x509 -in "/etc/certs/${service}.crt" -checkend 2592000; then
                  echo "Certificate for ${service} expiring soon, rotating..."
                  
                  # Generate new certificate (implementation specific)
                  # This would integrate with your certificate generation process
                  
                  # Update Kubernetes secret
                  kubectl patch secret "${service}-tls" -p '{"data":{"tls.crt":"'$(base64 -w 0 "/tmp/${service}.crt")'","tls.key":"'$(base64 -w 0 "/tmp/${service}.key")'"}}' -n pyairtable-system
                  
                  echo "Certificate rotated for ${service}"
                fi
              done
              
              echo "Certificate rotation completed"
            volumeMounts:
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: certs
            secret:
              secretName: pyairtable-ca-key-pair
          restartPolicy: OnFailure

---
# Security Monitoring Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-monitor
  namespace: pyairtable-system
  labels:
    app: security-monitor
    security.3vantage.com/monitoring: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security-monitor
  template:
    metadata:
      labels:
        app: security-monitor
        security.3vantage.com/monitoring: "true"
    spec:
      serviceAccountName: security-audit
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        fsGroup: 65532
      containers:
      - name: security-monitor
        image: pyairtable/security-monitor:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        - containerPort: 9090
          name: metrics
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault-system.svc.cluster.local:8200"
        - name: VAULT_CACERT
          value: "/etc/certs/ca.crt"
        - name: DB_HOST
          value: "postgres.pyairtable-system.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "pyairtable"
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: certs
        secret:
          secretName: pyairtable-ca-key-pair
      - name: config
        configMap:
          name: security-config

---
apiVersion: v1
kind: Service
metadata:
  name: security-monitor
  namespace: pyairtable-system
  labels:
    app: security-monitor
    security.3vantage.com/monitoring: "true"
spec:
  selector:
    app: security-monitor
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443
  - name: metrics
    port: 9090
    targetPort: 9090