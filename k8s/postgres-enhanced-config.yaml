apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-enhanced-config
  namespace: pyairtable
data:
  postgresql.conf: |
    # PostgreSQL Enhanced Configuration for PyAirtable
    # Optimized for JSONB, TimescaleDB, and audit logging
    
    # Memory Configuration
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 16MB
    maintenance_work_mem = 64MB
    
    # Extensions Configuration
    shared_preload_libraries = 'timescaledb,pg_stat_statements,pgaudit'
    
    # TimescaleDB Configuration
    timescaledb.telemetry_level = off
    
    # Query Statistics Configuration
    pg_stat_statements.track = all
    pg_stat_statements.max = 10000
    pg_stat_statements.track_utility = on
    pg_stat_statements.save = on
    
    # Audit Configuration
    pgaudit.log = 'write,ddl,role'
    pgaudit.log_catalog = off
    pgaudit.log_parameter = on
    pgaudit.log_statement_once = on
    pgaudit.log_level = log
    
    # Auto Explain Configuration
    auto_explain.log_min_duration = 1000
    auto_explain.log_analyze = on
    auto_explain.log_buffers = on
    auto_explain.log_timing = on
    auto_explain.log_triggers = on
    auto_explain.log_verbose = off
    auto_explain.log_nested_statements = on
    
    # JSONB and Indexing Optimization
    gin_pending_list_limit = 4MB
    
    # Connection and Performance
    max_connections = 100
    log_connections = on
    log_disconnections = on
    log_duration = on
    log_min_duration_statement = 1000
    
    # Write Ahead Logging (WAL) for Backup and Recovery
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    
    # Checkpoint Configuration
    checkpoint_timeout = 10min
    checkpoint_completion_target = 0.7
    
    # Logging Configuration
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    
    # Error Reporting and Logging
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    
    # Vacuum and Analyze
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 20s
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    
    # Security
    ssl = off
    password_encryption = scram-sha-256
    
    # Locale and Formatting
    timezone = 'UTC'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            scram-sha-256
    host    all             all             10.0.0.0/8              scram-sha-256
    host    all             all             172.16.0.0/12           scram-sha-256
    host    all             all             192.168.0.0/16          scram-sha-256
    
    # IPv6 local connections:
    host    all             all             ::1/128                 scram-sha-256
    
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            scram-sha-256
    host    replication     all             ::1/128                 scram-sha-256

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: postgres-fast-ssd
provisioner: kubernetes.io/aws-ebs  # Change based on your cloud provider
parameters:
  type: gp3
  fsType: ext4
  encrypted: "true"
  iops: "3000"
  throughput: "125"
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: pyairtable
  labels:
    app: postgres-enhanced
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres-enhanced

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-enhanced
  namespace: pyairtable
  labels:
    app: postgres-enhanced
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgres-enhanced
  template:
    metadata:
      labels:
        app: postgres-enhanced
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: timescale/timescaledb:2.16.1-pg16  # Use TimescaleDB image
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-enhanced-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: postgres-fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: pyairtable
data:
  00-extensions.sql: |
    -- Install required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "pgaudit";
    CREATE EXTENSION IF NOT EXISTS "timescaledb" CASCADE;
  
  01-setup.sql: |
    -- Create application roles
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'application_user') THEN
            CREATE ROLE application_user;
        END IF;
        
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'admin_user') THEN
            CREATE ROLE admin_user;
        END IF;
    END
    $$;
    
    -- Grant necessary permissions
    GRANT USAGE ON SCHEMA public TO application_user;
    GRANT CREATE ON SCHEMA public TO application_user;
    
    GRANT ALL ON SCHEMA public TO admin_user;

---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-migration-job
  namespace: pyairtable
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migration
        image: postgres:16-alpine
        command:
        - /bin/bash
        - -c
        - |
          # Wait for PostgreSQL to be ready
          until pg_isready -h postgres-headless -p 5432 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Run migrations in order
          for migration in /migrations/*.sql; do
            echo "Running migration: $(basename $migration)"
            psql -h postgres-headless -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB -v ON_ERROR_STOP=1 -f "$migration"
          done
          
          echo "All migrations completed successfully"
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: migration-scripts
          mountPath: /migrations
          readOnly: true
      volumes:
      - name: migration-scripts
        configMap:
          name: postgres-migration-scripts