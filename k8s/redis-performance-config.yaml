apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-performance-config
  namespace: pyairtable
data:
  redis.conf: |
    # Redis Performance-Optimized Configuration
    
    # Network and Connection Settings
    bind 0.0.0.0
    port 6379
    protected-mode yes
    tcp-backlog 511
    tcp-keepalive 300
    timeout 0
    
    # Memory Management (optimized for performance)
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence Configuration (optimized for performance)
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF Configuration (disabled for max performance, enable if needed)
    appendonly no
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    
    # Slow Log Configuration
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Latency Monitoring
    latency-monitor-threshold 100
    
    # Client Management
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    client-query-buffer-limit 1gb
    
    # Advanced Configuration
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    
    # Active Rehashing
    activerehashing yes
    
    # Hz (background task frequency)
    hz 10
    
    # Dynamic HZ
    dynamic-hz yes
    
    # AOF rewrite incremental fsync
    aof-rewrite-incremental-fsync yes
    
    # RDB save incremental fsync
    rdb-save-incremental-fsync yes
    
    # LFU Configuration
    lfu-log-factor 10
    lfu-decay-time 1
    
    # Threaded I/O (Redis 6.0+)
    io-threads 4
    io-threads-do-reads yes
    
    # TLS Configuration (if needed)
    # tls-port 6380
    # tls-cert-file /tls/redis.crt
    # tls-key-file /tls/redis.key
    # tls-ca-cert-file /tls/ca.crt
    # tls-dh-params-file /tls/redis.dh
    # tls-protocols "TLSv1.2 TLSv1.3"
    # tls-ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256"
    # tls-ciphersuites "TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256"
    # tls-prefer-server-ciphers yes
    # tls-session-caching no
    # tls-session-cache-size 5000
    # tls-session-cache-timeout 60
    
    # Modules (uncomment if needed)
    # loadmodule /opt/redis-stack/lib/redisearch.so
    # loadmodule /opt/redis-stack/lib/redistimeseries.so
    # loadmodule /opt/redis-stack/lib/redisjson.so
    # loadmodule /opt/redis-stack/lib/redisbloom.so
    
    # Security
    requirepass ${REDIS_PASSWORD}
    
    # Disable dangerous commands in production
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command EVAL ""
    rename-command DEBUG ""
    rename-command CONFIG ""

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: pyairtable
spec:
  serviceName: redis-cluster
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "3Gi"
            cpu: "1500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --pass
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --pass
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
      # Redis Exporter for monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD_ENV
          value: "REDIS_PASSWORD"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-performance-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: pyairtable
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: metrics
    port: 9121
    targetPort: 9121
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis-primary
  namespace: pyairtable
spec:
  selector:
    app: redis
    statefulset.kubernetes.io/pod-name: redis-cluster-0
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-read
  namespace: pyairtable
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Redis Sentinel for High Availability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: pyairtable
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      containers:
      - name: sentinel
        image: redis:7-alpine
        ports:
        - containerPort: 26379
        command:
        - redis-sentinel
        - /etc/redis/sentinel.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis/sentinel.conf
          subPath: sentinel.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: pyairtable
data:
  sentinel.conf: |
    sentinel monitor redis-master redis-cluster-0.redis-cluster 6379 2
    sentinel auth-pass redis-master ${REDIS_PASSWORD}
    sentinel down-after-milliseconds redis-master 5000
    sentinel parallel-syncs redis-master 1
    sentinel failover-timeout redis-master 30000
    sentinel announce-ip ${HOSTNAME}
    sentinel announce-port 26379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: pyairtable
spec:
  selector:
    app: redis-sentinel
  ports:
  - port: 26379
    targetPort: 26379
  type: ClusterIP

---
# Redis Secret
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: pyairtable
type: Opaque
data:
  password: cGVyZm9ybWFuY2VfcmVkaXNfcGFzc3dvcmQ=  # base64 encoded

---
# HorizontalPodAutoscaler for Redis-based services
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-clients-hpa
  namespace: pyairtable
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cache-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: redis_connected_clients
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# NetworkPolicy for Redis security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: pyairtable-services
    - podSelector:
        matchLabels:
          app: redis-sentinel
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Redis Cluster Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: pyairtable
spec:
  template:
    spec:
      containers:
      - name: redis-init
        image: redis:7-alpine
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        command:
        - /bin/sh
        - -c
        - |
          # Wait for all Redis pods to be ready
          for i in 0 1 2; do
            until redis-cli -h redis-cluster-$i.redis-cluster -p 6379 -a $REDIS_PASSWORD ping; do
              echo "Waiting for redis-cluster-$i to be ready..."
              sleep 5
            done
          done
          
          # Initialize Redis cluster if not already configured
          redis-cli -h redis-cluster-0.redis-cluster -p 6379 -a $REDIS_PASSWORD \
            --cluster create \
            redis-cluster-0.redis-cluster:6379 \
            redis-cluster-1.redis-cluster:6379 \
            redis-cluster-2.redis-cluster:6379 \
            --cluster-replicas 0 \
            --cluster-yes || echo "Cluster already initialized"
          
          echo "Redis cluster initialization completed"
      restartPolicy: OnFailure

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: redis
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics