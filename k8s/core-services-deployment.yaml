# Airtable Gateway
---
apiVersion: v1
kind: Service
metadata:
  name: airtable-gateway
  namespace: pyairtable
spec:
  selector:
    app: airtable-gateway
  ports:
    - port: 8093
      targetPort: 8093
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airtable-gateway
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: airtable-gateway
  template:
    metadata:
      labels:
        app: airtable-gateway
    spec:
      containers:
      - name: airtable-gateway
        image: pyairtable/airtable-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8093
        env:
        - name: PORT
          value: "8093"
        - name: AIRTABLE_TOKEN
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: airtable-token
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8093
          initialDelaySeconds: 30
          periodSeconds: 10
---
# LLM Orchestrator
apiVersion: v1
kind: Service
metadata:
  name: llm-orchestrator
  namespace: pyairtable
spec:
  selector:
    app: llm-orchestrator
  ports:
    - port: 8091
      targetPort: 8091
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-orchestrator
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: llm-orchestrator
  template:
    metadata:
      labels:
        app: llm-orchestrator
    spec:
      containers:
      - name: llm-orchestrator
        image: pyairtable/llm-orchestrator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8091
        env:
        - name: PORT
          value: "8091"
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: gemini-api-key
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8091
          initialDelaySeconds: 30
          periodSeconds: 10
---
# MCP Server
apiVersion: v1
kind: Service
metadata:
  name: mcp-server
  namespace: pyairtable
spec:
  selector:
    app: mcp-server
  ports:
    - port: 8092
      targetPort: 8092
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
    spec:
      containers:
      - name: mcp-server
        image: pyairtable/mcp-server:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8092
        env:
        - name: PORT
          value: "8092"
        - name: AIRTABLE_TOKEN
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: airtable-token
        envFrom:
        - configMapRef:
            name: pyairtable-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8092
          initialDelaySeconds: 30
          periodSeconds: 10