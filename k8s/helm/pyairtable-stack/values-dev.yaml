# Development configuration for PyAirtable Stack
# Override values for local development

# Global configuration
global:
  namespace: pyairtable
  imageRegistry: ghcr.io/reg-kris
  imagePullPolicy: Always  # Always pull latest for dev
  storageClassName: standard

# Application configuration
app:
  environment: development
  logLevel: debug  # More verbose logging for dev
  
# Reduced resource requirements for local development
services:
  apiGateway:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  llmOrchestrator:
    enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 256Mi

  mcpServer:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  airtableGateway:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  platformServices:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  automationServices:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  frontend:
    enabled: true
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 150m
        memory: 192Mi

# Smaller storage for development
databases:
  postgres:
    enabled: true
    persistence:
      enabled: true
      size: 2Gi
      storageClass: standard
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

  redis:
    enabled: true
    persistence:
      enabled: true
      size: 500Mi
      storageClass: standard
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

# Smaller file upload storage
persistence:
  fileUploads:
    enabled: true
    size: 1Gi
    storageClass: standard

# Development secrets - CHANGE THESE IN PRODUCTION!
secrets:
  apiKey: "dev-api-key-123456"
  geminiApiKey: "your-gemini-api-key-here"  # Replace with actual key
  airtableToken: "your-airtable-token-here"  # Replace with actual token
  airtableBase: "your-airtable-base-here"    # Replace with actual base
  jwtSecret: "dev-jwt-secret-change-in-production"
  nextauthSecret: "dev-nextauth-secret-change-in-production"
  redisPassword: "dev-redis-password"
  
  # Database credentials
  postgresDb: pyairtable
  postgresUser: postgres
  postgresPassword: "dev-postgres-password"
  
  # Optional configuration
  thinkingBudget: "1000"
  corsOrigins: "*"
  maxFileSize: "10MB"
  allowedExtensions: "pdf,doc,docx,txt,csv,xlsx"

# Ingress for local development
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: pyairtable.local
      paths:
        - path: /
          pathType: Prefix
          service: frontend
          port: 3000
        - path: /api
          pathType: Prefix
          service: api-gateway
          port: 8000

# Enable health checks but with lower timeouts for dev
healthChecks:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 5  # More tolerant in dev

# Disable autoscaling in development
autoscaling:
  enabled: false