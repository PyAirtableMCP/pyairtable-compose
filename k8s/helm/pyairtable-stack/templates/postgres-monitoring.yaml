{{- if and .Values.databases.postgres.enabled .Values.databases.postgres.monitoring.enabled }}
# ServiceMonitor for Prometheus to scrape PostgreSQL metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres-monitoring
spec:
  selector:
    matchLabels:
      {{- include "pyairtable-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  endpoints:
  - port: metrics
    interval: {{ .Values.databases.postgres.monitoring.scrapeInterval | default "30s" }}
    path: /metrics
    scrapeTimeout: {{ .Values.databases.postgres.monitoring.scrapeTimeout | default "10s" }}
---
# PrometheusRule for PostgreSQL alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres-alerts
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres-monitoring
spec:
  groups:
  - name: postgres-storage
    interval: {{ .Values.databases.postgres.monitoring.evaluationInterval | default "30s" }}
    rules:
    - alert: PostgreSQLDiskSpaceCritical
      expr: |
        (
          pg_database_size_bytes{datname="{{ .Values.secrets.postgresDb }}"}
          /
          on(instance) kube_persistentvolume_capacity_bytes{persistentvolume=~".*postgres.*"}
        ) * 100 > {{ .Values.databases.postgres.monitoring.alerts.diskUsageThreshold | default 85 }}
      for: 5m
      labels:
        severity: critical
        service: postgres
        component: storage
      annotations:
        summary: "PostgreSQL disk space critically low"
        description: "PostgreSQL database {{ .Values.secrets.postgresDb }} is using {{ "{{ $value }}" }}% of available disk space."
        runbook_url: "https://runbooks.prometheus-operator.dev/runbooks/postgres/postgresqldiskspacecritical"

    - alert: PostgreSQLDiskSpaceWarning
      expr: |
        (
          pg_database_size_bytes{datname="{{ .Values.secrets.postgresDb }}"}
          /
          on(instance) kube_persistentvolume_capacity_bytes{persistentvolume=~".*postgres.*"}
        ) * 100 > {{ .Values.databases.postgres.monitoring.alerts.diskUsageWarningThreshold | default 70 }}
      for: 10m
      labels:
        severity: warning
        service: postgres
        component: storage
      annotations:
        summary: "PostgreSQL disk space running low"
        description: "PostgreSQL database {{ .Values.secrets.postgresDb }} is using {{ "{{ $value }}" }}% of available disk space."

    - alert: PostgreSQLVolumeIOErrorRate
      expr: |
        rate(postgres_stat_database_blk_read_time[5m]) > {{ .Values.databases.postgres.monitoring.alerts.ioErrorThreshold | default 0.1 }}
      for: 5m
      labels:
        severity: warning
        service: postgres
        component: storage
      annotations:
        summary: "High PostgreSQL volume I/O error rate"
        description: "PostgreSQL is experiencing high I/O error rates: {{ "{{ $value }}" }} errors/sec."

    - alert: PostgreSQLConnectionsHigh
      expr: |
        pg_stat_database_numbackends{datname="{{ .Values.secrets.postgresDb }}"} 
        / 
        pg_settings_max_connections * 100 > {{ .Values.databases.postgres.monitoring.alerts.connectionThreshold | default 80 }}
      for: 5m
      labels:
        severity: warning
        service: postgres
        component: connections
      annotations:
        summary: "PostgreSQL connection usage high"
        description: "PostgreSQL is using {{ "{{ $value }}" }}% of available connections."

    - alert: PostgreSQLReplicationLag
      expr: |
        pg_stat_replication_lag_seconds > {{ .Values.databases.postgres.monitoring.alerts.replicationLagThreshold | default 60 }}
      for: 5m
      labels:
        severity: warning
        service: postgres
        component: replication
      annotations:
        summary: "PostgreSQL replication lag high"
        description: "PostgreSQL replication lag is {{ "{{ $value }}" }} seconds."

    - alert: PostgreSQLBackupFailed
      expr: |
        time() - postgres_last_successful_backup_timestamp > {{ .Values.databases.postgres.monitoring.alerts.backupFailureThreshold | default 86400 }}
      for: 1m
      labels:
        severity: critical
        service: postgres
        component: backup
      annotations:
        summary: "PostgreSQL backup failed"
        description: "PostgreSQL backup has not succeeded for {{ "{{ $value | humanizeDuration }}" }}."

  - name: postgres-performance
    interval: {{ .Values.databases.postgres.monitoring.evaluationInterval | default "30s" }}
    rules:
    - alert: PostgreSQLSlowQueries
      expr: |
        rate(pg_stat_statements_mean_time_ms[5m]) > {{ .Values.databases.postgres.monitoring.alerts.slowQueryThreshold | default 1000 }}
      for: 10m
      labels:
        severity: warning
        service: postgres
        component: performance
      annotations:
        summary: "PostgreSQL slow queries detected"
        description: "PostgreSQL average query time is {{ "{{ $value }}" }}ms."

    - alert: PostgreSQLDeadlocks
      expr: |
        rate(pg_stat_database_deadlocks[5m]) > {{ .Values.databases.postgres.monitoring.alerts.deadlockThreshold | default 0.01 }}
      for: 5m
      labels:
        severity: warning
        service: postgres
        component: locks
      annotations:
        summary: "PostgreSQL deadlocks occurring"
        description: "PostgreSQL is experiencing {{ "{{ $value }}" }} deadlocks/sec."

  - name: postgres-availability
    interval: {{ .Values.databases.postgres.monitoring.evaluationInterval | default "30s" }}
    rules:
    - alert: PostgreSQLDown
      expr: |
        up{job="postgres"} == 0
      for: 1m
      labels:
        severity: critical
        service: postgres
        component: availability
      annotations:
        summary: "PostgreSQL is down"
        description: "PostgreSQL database is not responding to health checks."

    - alert: PostgreSQLPodNotReady
      expr: |
        kube_pod_status_ready{condition="true", pod=~".*postgres.*"} == 0
      for: 5m
      labels:
        severity: critical
        service: postgres
        component: kubernetes
      annotations:
        summary: "PostgreSQL pod not ready"
        description: "PostgreSQL pod {{ "{{ $labels.pod }}" }} is not in ready state."

    - alert: PostgreSQLPVCNearFull
      expr: |
        (
          kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*postgres.*"}
          /
          kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~".*postgres.*"}
        ) * 100 > {{ .Values.databases.postgres.monitoring.alerts.pvcUsageThreshold | default 85 }}
      for: 5m
      labels:
        severity: warning
        service: postgres
        component: storage
      annotations:
        summary: "PostgreSQL PVC nearly full"
        description: "PostgreSQL PVC {{ "{{ $labels.persistentvolumeclaim }}" }} is {{ "{{ $value }}" }}% full."
---
# Custom metrics collection job
{{- if .Values.databases.postgres.monitoring.customMetrics.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres-metrics
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres-monitoring
spec:
  schedule: {{ .Values.databases.postgres.monitoring.customMetrics.schedule | default "*/5 * * * *" | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "pyairtable-stack.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: postgres-monitoring
        spec:
          restartPolicy: OnFailure
          containers:
          - name: metrics-collector
            image: "{{ .Values.databases.postgres.image }}:{{ .Values.databases.postgres.tag }}"
            imagePullPolicy: {{ .Values.global.imagePullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              echo "Collecting custom PostgreSQL metrics..."
              
              # Database size metrics
              DB_SIZE=$(psql -h {{ .Values.databases.postgres.name }} \
                            -p {{ .Values.databases.postgres.port }} \
                            -U "$POSTGRES_USER" \
                            -d "$POSTGRES_DB" \
                            -t -c "SELECT pg_database_size('$POSTGRES_DB');")
              
              # Table count
              TABLE_COUNT=$(psql -h {{ .Values.databases.postgres.name }} \
                                -p {{ .Values.databases.postgres.port }} \
                                -U "$POSTGRES_USER" \
                                -d "$POSTGRES_DB" \
                                -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
              
              # Connection count
              CONN_COUNT=$(psql -h {{ .Values.databases.postgres.name }} \
                               -p {{ .Values.databases.postgres.port }} \
                               -U "$POSTGRES_USER" \
                               -d "$POSTGRES_DB" \
                               -t -c "SELECT count(*) FROM pg_stat_activity;")
              
              # Last backup timestamp (if backup metrics table exists)
              LAST_BACKUP=$(psql -h {{ .Values.databases.postgres.name }} \
                                -p {{ .Values.databases.postgres.port }} \
                                -U "$POSTGRES_USER" \
                                -d "$POSTGRES_DB" \
                                -t -c "SELECT COALESCE(MAX(EXTRACT(EPOCH FROM backup_time)), 0) FROM backup_log;" 2>/dev/null || echo "0")
              
              # Push metrics to pushgateway (if configured)
              {{- if .Values.databases.postgres.monitoring.pushgateway.enabled }}
              cat << EOF | curl -X POST --data-binary @- {{ .Values.databases.postgres.monitoring.pushgateway.url }}/metrics/job/postgres_custom/instance/{{ .Values.databases.postgres.name }}
              # HELP postgres_custom_database_size_bytes Database size in bytes
              # TYPE postgres_custom_database_size_bytes gauge
              postgres_custom_database_size_bytes $DB_SIZE
              
              # HELP postgres_custom_table_count Number of tables
              # TYPE postgres_custom_table_count gauge
              postgres_custom_table_count $TABLE_COUNT
              
              # HELP postgres_custom_connection_count Current connections
              # TYPE postgres_custom_connection_count gauge
              postgres_custom_connection_count $CONN_COUNT
              
              # HELP postgres_last_successful_backup_timestamp Last successful backup timestamp
              # TYPE postgres_last_successful_backup_timestamp gauge
              postgres_last_successful_backup_timestamp $LAST_BACKUP
              EOF
              {{- end }}
              
              echo "Custom metrics collection completed"
              echo "Database size: $DB_SIZE bytes"
              echo "Table count: $TABLE_COUNT"
              echo "Active connections: $CONN_COUNT"
              echo "Last backup: $LAST_BACKUP"
            env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_PASSWORD
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_PASSWORD
            resources:
              requests:
                cpu: 50m
                memory: 64Mi
              limits:
                cpu: 100m
                memory: 128Mi
{{- end }}
{{- end }}