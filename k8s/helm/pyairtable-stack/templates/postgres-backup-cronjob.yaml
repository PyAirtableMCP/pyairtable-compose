{{- if and .Values.databases.postgres.enabled .Values.databases.postgres.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres-backup
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres-backup
spec:
  schedule: {{ .Values.databases.postgres.backup.schedule | default "0 2 * * *" | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: {{ .Values.databases.postgres.backup.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.databases.postgres.backup.failedJobsHistoryLimit | default 1 }}
  startingDeadlineSeconds: {{ .Values.databases.postgres.backup.startingDeadlineSeconds | default 300 }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "pyairtable-stack.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: postgres-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: "{{ .Values.databases.postgres.image }}:{{ .Values.databases.postgres.tag }}"
            imagePullPolicy: {{ .Values.global.imagePullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              echo "Starting PostgreSQL backup at $(date)"
              
              # Wait for PostgreSQL to be ready
              until pg_isready -h {{ .Values.databases.postgres.name }} -p {{ .Values.databases.postgres.port }} -U $POSTGRES_USER; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 5
              done
              
              # Create backup directory
              BACKUP_DIR="/backups/postgres"
              mkdir -p "$BACKUP_DIR"
              
              # Generate backup filename
              TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
              BACKUP_FILE="${BACKUP_DIR}/postgres_backup_${TIMESTAMP}.sql"
              
              # Perform database backup
              pg_dump -h {{ .Values.databases.postgres.name }} \
                      -p {{ .Values.databases.postgres.port }} \
                      -U "$POSTGRES_USER" \
                      -d "$POSTGRES_DB" \
                      --verbose \
                      --no-password \
                      --format=custom \
                      --compress=9 \
                      --file="$BACKUP_FILE"
              
              # Verify backup integrity
              pg_restore --list "$BACKUP_FILE" > /dev/null
              
              echo "Backup completed successfully: $BACKUP_FILE"
              echo "Backup size: $(du -h $BACKUP_FILE | cut -f1)"
              
              # Clean up old backups (keep based on retention policy)
              RETENTION_DAYS={{ .Values.databases.postgres.backup.retentionDays | default 7 }}
              find "$BACKUP_DIR" -name "postgres_backup_*.sql" -mtime +$RETENTION_DAYS -delete
              
              echo "Backup cleanup completed - keeping last $RETENTION_DAYS days"
              
              {{- if .Values.databases.postgres.backup.uploadToCloud }}
              # Upload to cloud storage (if configured)
              echo "Uploading backup to cloud storage..."
              # Add cloud upload logic here based on your cloud provider
              {{- end }}
              
              echo "Backup job completed at $(date)"
            env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_PASSWORD
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pyairtable-stack.fullname" . }}-secrets
                  key: POSTGRES_PASSWORD
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            resources:
              {{- toYaml .Values.databases.postgres.backup.resources | nindent 14 }}
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: {{ include "pyairtable-stack.fullname" . }}-postgres-backup-pvc
---
# PVC for backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres-backup-pvc
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres-backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.databases.postgres.backup.storageSize | default "50Gi" }}
  {{- if .Values.databases.postgres.backup.storageClass }}
  storageClassName: {{ .Values.databases.postgres.backup.storageClass }}
  {{- end }}
{{- end }}