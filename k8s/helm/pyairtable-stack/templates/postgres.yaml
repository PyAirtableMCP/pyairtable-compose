{{- if .Values.databases.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  replicas: {{ .Values.databases.postgres.replicas }}
  selector:
    matchLabels:
      {{- include "pyairtable-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  template:
    metadata:
      labels:
        {{- include "pyairtable-stack.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgres
    spec:
      containers:
      - name: postgres
        image: "{{ .Values.databases.postgres.image }}:{{ .Values.databases.postgres.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.databases.postgres.port }}
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ include "pyairtable-stack.fullname" . }}-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "pyairtable-stack.fullname" . }}-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "pyairtable-stack.fullname" . }}-secrets
              key: POSTGRES_PASSWORD
        resources:
          {{- toYaml .Values.databases.postgres.resources | nindent 10 }}
        {{- if .Values.databases.postgres.persistence.enabled }}
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        {{- end }}
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      {{- if .Values.databases.postgres.persistence.enabled }}
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: {{ include "pyairtable-stack.fullname" . }}-postgres-pvc
      - name: init-scripts
        configMap:
          name: {{ include "pyairtable-stack.fullname" . }}-postgres-init
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.databases.postgres.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  type: ClusterIP
  ports:
  - port: {{ .Values.databases.postgres.port }}
    targetPort: {{ .Values.databases.postgres.port }}
    protocol: TCP
    name: postgres
  selector:
    {{- include "pyairtable-stack.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-postgres-init
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
data:
  init-db.sql: |
    -- Create databases and extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- Session management tables
    CREATE TABLE IF NOT EXISTS sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        session_id VARCHAR(255) UNIQUE NOT NULL,
        user_id VARCHAR(255),
        data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        expires_at TIMESTAMP WITH TIME ZONE
    );
    
    CREATE INDEX IF NOT EXISTS idx_sessions_session_id ON sessions(session_id);
    CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_sessions_expires_at ON sessions(expires_at);
{{- end }}