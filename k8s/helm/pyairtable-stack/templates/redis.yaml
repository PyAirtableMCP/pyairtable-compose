{{- if .Values.databases.redis.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pyairtable-stack.fullname" . }}-redis
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis
spec:
  replicas: {{ .Values.databases.redis.replicas }}
  selector:
    matchLabels:
      {{- include "pyairtable-stack.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        {{- include "pyairtable-stack.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: redis
    spec:
      containers:
      - name: redis
        image: "{{ .Values.databases.redis.image }}:{{ .Values.databases.redis.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.databases.redis.port }}
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "pyairtable-stack.fullname" . }}-secrets
              key: REDIS_PASSWORD
        resources:
          {{- toYaml .Values.databases.redis.resources | nindent 10 }}
        {{- if .Values.databases.redis.persistence.enabled }}
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        {{- end }}
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      {{- if .Values.databases.redis.persistence.enabled }}
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: {{ include "pyairtable-stack.fullname" . }}-redis-pvc
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.databases.redis.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "pyairtable-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis
spec:
  type: ClusterIP
  ports:
  - port: {{ .Values.databases.redis.port }}
    targetPort: {{ .Values.databases.redis.port }}
    protocol: TCP
    name: redis
  selector:
    {{- include "pyairtable-stack.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: redis
{{- end }}