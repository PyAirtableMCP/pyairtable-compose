# Enhanced PyAirtable Deployments with Security Best Practices
# This file contains production-ready deployment configurations

---
# API Gateway Enhanced Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: api-gateway
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyairtable
      app.kubernetes.io/component: api-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pyairtable
        app.kubernetes.io/component: api-gateway
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pyairtable-service-account
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: api-gateway
        image: localhost:5000/pyairtable-api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: METRICS_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9090"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: jwt-secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: api-key
        - name: REDIS_URL
          value: "redis://redis-dev:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        # Service URLs
        - name: PLATFORM_SERVICES_URL
          value: "http://platform-services:8001"
        - name: AUTOMATION_SERVICES_URL
          value: "http://automation-services:8002"
        - name: LLM_ORCHESTRATOR_URL
          value: "http://llm-orchestrator:8003"
        - name: MCP_SERVER_URL
          value: "http://mcp-server:8001"
        - name: AIRTABLE_GATEWAY_URL
          value: "http://airtable-gateway:8002"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 100Mi
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Platform Services Enhanced Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-services
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: platform-services
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyairtable
      app.kubernetes.io/component: platform-services
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pyairtable
        app.kubernetes.io/component: platform-services
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pyairtable-service-account
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-db
        image: postgres:16-alpine
        command: ['sh', '-c', 'until pg_isready -h postgresql-dev -p 5432; do echo waiting for database; sleep 2; done;']
        env:
        - name: PGUSER
          value: postgres
      containers:
      - name: platform-services
        image: localhost:5000/pyairtable-platform-services:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        - containerPort: 9091
          name: metrics
          protocol: TCP
        env:
        - name: PORT
          value: "8001"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: METRICS_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9091"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-dev:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: jwt-secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: api-key
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
            ephemeral-storage: 100Mi
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Automation Services Enhanced Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: automation-services
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: automation-services
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyairtable
      app.kubernetes.io/component: automation-services
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pyairtable
        app.kubernetes.io/component: automation-services
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pyairtable-service-account
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-db
        image: postgres:16-alpine
        command: ['sh', '-c', 'until pg_isready -h postgresql-dev -p 5432; do echo waiting for database; sleep 2; done;']
        env:
        - name: PGUSER
          value: postgres
      containers:
      - name: automation-services
        image: localhost:5000/pyairtable-automation-services:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
          name: http
          protocol: TCP
        - containerPort: 9092
          name: metrics
          protocol: TCP
        env:
        - name: PORT
          value: "8002"
        - name: HOST
          value: "0.0.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: METRICS_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9092"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-dev:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: redis-password
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: pyairtable-secrets
              key: api-key
        - name: MAX_FILE_SIZE
          value: "10485760"  # 10MB
        - name: ALLOWED_EXTENSIONS
          value: "pdf,doc,docx,txt,csv,xlsx,json"
        - name: WORKER_POOL_SIZE
          value: "10"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
            ephemeral-storage: 100Mi
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: uploads
          mountPath: /app/uploads
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: uploads
        persistentVolumeClaim:
          claimName: file-uploads-pvc
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Services for Enhanced Deployments
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: api-gateway
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: api-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: platform-services
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: platform-services
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: http
    protocol: TCP
    name: http
  - port: 9091
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: platform-services

---
apiVersion: v1
kind: Service
metadata:
  name: automation-services
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: automation-services
spec:
  type: ClusterIP
  ports:
  - port: 8002
    targetPort: http
    protocol: TCP
    name: http
  - port: 9092
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: automation-services

---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: pyairtable
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
# Horizontal Pod Autoscaler for Platform Services
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: platform-services-hpa
  namespace: pyairtable
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: platform-services
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Persistent Volume Claim for File Uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: file-uploads-pvc
  namespace: pyairtable
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard