# Istio Service Mesh Configuration for PyAirtable
# Provides advanced traffic management, security, and observability

---
# Gateway for external access
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: pyairtable-gateway
  namespace: pyairtable
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - pyairtable.local
    - localhost
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: pyairtable-tls-secret
    hosts:
    - pyairtable.local

---
# Virtual Service for routing external traffic
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: pyairtable-external
  namespace: pyairtable
spec:
  hosts:
  - pyairtable.local
  - localhost
  gateways:
  - pyairtable-gateway
  http:
  # Frontend routes
  - match:
    - uri:
        prefix: /
    - uri:
        prefix: /_next/
    - uri:
        prefix: /favicon.ico
    route:
    - destination:
        host: frontend
        port:
          number: 3000
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # API routes
  - match:
    - uri:
        prefix: /api/
    route:
    - destination:
        host: api-gateway
        port:
          number: 8000
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
    fault:
      delay:
        percentage: 
          value: 0.1
        fixedDelay: 5s

---
# Virtual Service for internal API Gateway routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: api-gateway-routing
  namespace: pyairtable
spec:
  hosts:
  - api-gateway
  http:
  # Platform services routing
  - match:
    - uri:
        prefix: /api/auth/
    - uri:
        prefix: /api/users/
    - uri:
        prefix: /api/analytics/
    route:
    - destination:
        host: platform-services
        port:
          number: 8001
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Automation services routing
  - match:
    - uri:
        prefix: /api/files/
    - uri:
        prefix: /api/workflows/
    - uri:
        prefix: /api/automation/
    route:
    - destination:
        host: automation-services
        port:
          number: 8002
    timeout: 60s  # Longer timeout for file operations
    retries:
      attempts: 2
      perTryTimeout: 30s
  # LLM Orchestrator routing
  - match:
    - uri:
        prefix: /api/llm/
    - uri:
        prefix: /api/chat/
    route:
    - destination:
        host: llm-orchestrator
        port:
          number: 8003
    timeout: 120s  # Longer timeout for LLM operations
    retries:
      attempts: 2
      perTryTimeout: 60s
  # MCP Server routing
  - match:
    - uri:
        prefix: /api/mcp/
    route:
    - destination:
        host: mcp-server
        port:
          number: 8001
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Airtable Gateway routing
  - match:
    - uri:
        prefix: /api/airtable/
    route:
    - destination:
        host: airtable-gateway
        port:
          number: 8002
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s

---
# Destination Rules for load balancing and circuit breaking
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: api-gateway-destination
  namespace: pyairtable
spec:
  host: api-gateway
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 50

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: platform-services-destination
  namespace: pyairtable
spec:
  host: platform-services
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 50
        maxRequestsPerConnection: 2
        maxRetries: 3
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: automation-services-destination
  namespace: pyairtable
spec:
  host: automation-services
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 30
      http:
        http1MaxPendingRequests: 15
        http2MaxRequests: 30
        maxRequestsPerConnection: 1  # Lower for file uploads
        maxRetries: 2
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# Service Entries for external dependencies
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: gemini-api
  namespace: pyairtable
spec:
  hosts:
  - generativelanguage.googleapis.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: airtable-api
  namespace: pyairtable
spec:
  hosts:
  - api.airtable.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
# PeerAuthentication for mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: pyairtable
spec:
  mtls:
    mode: STRICT

---
# AuthorizationPolicy for internal services
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-internal-communications
  namespace: pyairtable
spec:
  action: ALLOW
  rules:
  # Allow frontend to API gateway
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable/sa/pyairtable-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  # Allow API gateway to backend services
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable/sa/pyairtable-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]

---
# AuthorizationPolicy for external access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-external-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
  action: ALLOW
  rules:
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "OPTIONS"]

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-api-gateway-external
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  action: ALLOW
  rules:
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        paths: ["/api/*", "/health", "/metrics"]

---
# RequestAuthentication for JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: pyairtable-jwt
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  jwtRules:
  - issuer: "pyairtable"
    jwksUri: "http://platform-services:8001/.well-known/jwks.json"
    audiences:
    - "pyairtable-api"

---
# Telemetry configuration for metrics collection
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-metrics
  namespace: pyairtable
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        request_id:
          operation: UPSERT
          value: "%{REQUEST_ID}"
        user_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-user-id']}"

---
# Telemetry configuration for distributed tracing
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-tracing
  namespace: pyairtable
spec:
  tracing:
  - providers:
    - name: jaeger
  - customTags:
      user_id:
        header:
          name: x-user-id
      request_id:
        header:
          name: x-request-id
      tenant_id:
        header:
          name: x-tenant-id

---
# Envoy Filter for request/response logging
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: pyairtable-access-logs
  namespace: pyairtable
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.wasm
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: pyairtable_access_log
            root_id: pyairtable_access_log
            configuration:
              "@type": type.googleapis.com/google.protobuf.StringValue
              value: |
                {
                  "log_format": {
                    "timestamp": "%START_TIME%",
                    "method": "%REQ(:METHOD)%",
                    "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
                    "status": "%RESPONSE_CODE%",
                    "duration": "%DURATION%",
                    "user_agent": "%REQ(USER-AGENT)%",
                    "request_id": "%REQ(X-REQUEST-ID)%",
                    "user_id": "%REQ(X-USER-ID)%",
                    "tenant_id": "%REQ(X-TENANT-ID)%"
                  }
                }

---
# WasmPlugin for rate limiting
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: rate-limiter
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  url: oci://ghcr.io/tetratelabs/wasm-rate-limiting:latest
  phase: AUTHN
  pluginConfig:
    rules:
    - match:
        headers:
        - name: ":path"
          prefix: "/api/"
      actions:
      - quota:
          name: api_quota
          max_amount: 1000
          window: 60s
          identifier:
            headers:
            - name: "x-user-id"
              default_value: "anonymous"

---
# Fault injection for chaos engineering (disabled by default)
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: chaos-engineering
  namespace: pyairtable
spec:
  hosts:
  - platform-services
  http:
  - match:
    - headers:
        x-chaos-enabled:
          exact: "true"
    fault:
      delay:
        percentage:
          value: 1.0
        fixedDelay: 2s
      abort:
        percentage:
          value: 0.5
        httpStatus: 503
    route:
    - destination:
        host: platform-services
  - route:
    - destination:
        host: platform-services