# PyAirtable Security Policies
# Comprehensive security configuration including PodSecurityPolicies, 
# NetworkPolicies, and ServiceAccounts

---
# Pod Security Standards (PSS) - Restricted Profile
apiVersion: v1
kind: Namespace
metadata:
  name: pyairtable
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    name: pyairtable

---
# Service Account for PyAirtable services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyairtable-service-account
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/component: security
automountServiceAccountToken: false

---
# Role for PyAirtable services (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pyairtable-role
  namespace: pyairtable
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]

---
# RoleBinding for PyAirtable services
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pyairtable-rolebinding
  namespace: pyairtable
subjects:
- kind: ServiceAccount
  name: pyairtable-service-account
  namespace: pyairtable
roleRef:
  kind: Role
  name: pyairtable-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy: Default Deny All
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: pyairtable
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Network Policy: Allow Frontend to API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-to-api-gateway
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: frontend
    ports:
    - protocol: TCP
      port: 8000

---
# Network Policy: Allow API Gateway to Backend Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-gateway-to-backends
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  policyTypes:
  - Egress
  egress:
  # Allow access to platform services
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: platform-services
    ports:
    - protocol: TCP
      port: 8001
  # Allow access to automation services
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: automation-services
    ports:
    - protocol: TCP
      port: 8002
  # Allow access to LLM orchestrator
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: llm-orchestrator
    ports:
    - protocol: TCP
      port: 8003
  # Allow access to MCP server
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: mcp-server
    ports:
    - protocol: TCP
      port: 8001
  # Allow access to Airtable gateway
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: airtable-gateway
    ports:
    - protocol: TCP
      port: 8002
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy: Allow Backend Services to Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backends-to-database
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app: postgresql-dev
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: platform-services
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: automation-services
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: airtable-gateway
    ports:
    - protocol: TCP
      port: 5432

---
# Network Policy: Allow Backend Services to Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backends-to-redis
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: platform-services
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: automation-services
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: llm-orchestrator
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: api-gateway
    ports:
    - protocol: TCP
      port: 6379

---
# Network Policy: Allow External Access to Frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-to-frontend
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  policyTypes:
  - Ingress
  ingress:
  - from: []  # Allow from anywhere
    ports:
    - protocol: TCP
      port: 3000

---
# Network Policy: Allow External Access to API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-to-api-gateway
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  policyTypes:
  - Ingress
  ingress:
  - from: []  # Allow from anywhere
    ports:
    - protocol: TCP
      port: 8000

---
# Network Policy: Allow Egress for External API Calls
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-api-calls
  namespace: pyairtable
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pyairtable
  policyTypes:
  - Egress
  egress:
  # Allow HTTPS to external APIs (Gemini, Airtable, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP for health checks and webhooks
  - to: []
    ports:
    - protocol: TCP
      port: 80
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Pod Disruption Budget for API Gateway
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: pyairtable
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway

---
# Pod Disruption Budget for Platform Services
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: platform-services-pdb
  namespace: pyairtable
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: platform-services

---
# Pod Disruption Budget for Database
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgresql-pdb
  namespace: pyairtable
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgresql-dev

---
# Resource Quota for the namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pyairtable-quota
  namespace: pyairtable
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 4Gi
    limits.cpu: "4"
    limits.memory: 8Gi
    pods: "20"
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "10"
    configmaps: "10"

---
# Limit Range for the namespace
apiVersion: v1
kind: LimitRange
metadata:
  name: pyairtable-limits
  namespace: pyairtable
spec:
  limits:
  - default:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
    type: Container
  - max:
      cpu: "1"
      memory: 1Gi
    min:
      cpu: 50m
      memory: 64Mi
    type: Container
  - max:
      storage: 10Gi
    min:
      storage: 100Mi
    type: PersistentVolumeClaim