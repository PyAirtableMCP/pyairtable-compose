apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-performance-config
  namespace: pyairtable
data:
  postgresql.conf: |
    # Performance-optimized PostgreSQL configuration for PyAirtable
    
    # Connection Settings
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings (adjust based on available memory)
    shared_buffers = 512MB                    # 25% of total RAM for dedicated DB server
    effective_cache_size = 2GB                # Total system memory available for caching
    work_mem = 32MB                           # Memory for sorts and hash joins per connection
    maintenance_work_mem = 512MB              # Memory for maintenance operations
    autovacuum_work_mem = 256MB              # Memory for autovacuum workers
    
    # WAL (Write-Ahead Logging) Settings
    wal_level = replica
    max_wal_size = 4GB
    min_wal_size = 1GB
    wal_buffers = 32MB
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 15min
    
    # Background Writer Settings
    bgwriter_delay = 200ms
    bgwriter_lru_maxpages = 100
    bgwriter_lru_multiplier = 2.0
    bgwriter_flush_after = 512kB
    
    # Query Planner Settings
    random_page_cost = 1.5                    # Adjusted for SSD storage
    seq_page_cost = 1.0
    cpu_tuple_cost = 0.01
    cpu_index_tuple_cost = 0.005
    cpu_operator_cost = 0.0025
    effective_io_concurrency = 200           # For SSD storage
    
    # Statistics Settings
    default_statistics_target = 100
    constraint_exclusion = partition
    
    # Logging Settings for Performance Monitoring
    log_destination = 'stderr'
    logging_collector = on
    log_directory = '/var/log/postgresql'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = verbose
    log_statement = 'ddl'
    log_min_duration_statement = 1000        # Log queries taking more than 1 second
    
    # Autovacuum Settings
    autovacuum = on
    autovacuum_max_workers = 4
    autovacuum_naptime = 30s
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    autovacuum_vacuum_scale_factor = 0.1
    autovacuum_analyze_scale_factor = 0.05
    autovacuum_freeze_max_age = 200000000
    autovacuum_multixact_freeze_max_age = 400000000
    vacuum_cost_delay = 10ms
    vacuum_cost_limit = 2000
    
    # Lock Management
    max_locks_per_transaction = 256
    max_pred_locks_per_transaction = 64
    deadlock_timeout = 1s
    
    # Parallel Query Settings
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 4
    parallel_tuple_cost = 0.1
    parallel_setup_cost = 1000.0
    min_parallel_table_scan_size = 8MB
    min_parallel_index_scan_size = 512kB
    
    # Replication Settings
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    hot_standby_feedback = on
    
    # Extensions and Additional Settings
    shared_preload_libraries = 'pg_stat_statements,auto_explain'
    
    # pg_stat_statements settings
    pg_stat_statements.max = 10000
    pg_stat_statements.track = all
    pg_stat_statements.track_utility = on
    pg_stat_statements.save = on
    
    # auto_explain settings
    auto_explain.log_min_duration = 5s
    auto_explain.log_analyze = on
    auto_explain.log_buffers = on
    auto_explain.log_timing = on
    auto_explain.log_triggers = on
    auto_explain.log_verbose = on
    auto_explain.log_nested_statements = on
    
    # Security Settings
    ssl = on
    ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'
    ssl_prefer_server_ciphers = on
    password_encryption = scram-sha-256
    
    # Time Zone
    timezone = 'UTC'
    log_timezone = 'UTC'
    
    # Locale Settings
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'
    default_text_search_config = 'pg_catalog.english'
    
    # Connection Pooling (when using external connection pooler)
    tcp_keepalives_idle = 600
    tcp_keepalives_interval = 30
    tcp_keepalives_count = 3
    
    # Additional Performance Settings
    synchronous_commit = on                   # Keep for data integrity
    fsync = on                               # Keep for data integrity
    full_page_writes = on                    # Keep for crash recovery
    wal_compression = on                     # Compress WAL files
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # JIT Settings (PostgreSQL 11+)
    jit = on
    jit_above_cost = 100000
    jit_inline_above_cost = 500000
    jit_optimize_above_cost = 500000
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration File
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            scram-sha-256
    host    all             all             10.0.0.0/8              scram-sha-256
    host    all             all             172.16.0.0/12           scram-sha-256
    host    all             all             192.168.0.0/16          scram-sha-256
    
    # IPv6 local connections:
    host    all             all             ::1/128                 scram-sha-256
    
    # Allow replication connections from localhost
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            scram-sha-256
    host    replication     all             ::1/128                 scram-sha-256
    
    # Allow connections from Kubernetes pods
    host    all             all             0.0.0.0/0               scram-sha-256

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-optimized
  namespace: pyairtable
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-optimized
  template:
    metadata:
      labels:
        app: postgres-optimized
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "pyairtable"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: postgres-logs
          mountPath: /var/log/postgresql
        command: ["postgres"]
        args: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      # Add postgres-exporter for monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@localhost:5432/pyairtable?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PG_EXPORTER_EXCLUDE_DATABASES
          value: "template0,template1"
        - name: PG_EXPORTER_INCLUDE_DATABASES
          value: "pyairtable"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-performance-config
      - name: postgres-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-optimized
  namespace: pyairtable
spec:
  selector:
    app: postgres-optimized
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  - name: metrics
    port: 9187
    targetPort: 9187
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: pyairtable
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd  # Use high-performance storage class
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: pyairtable
type: Opaque
data:
  password: cG9zdGdyZXNfcGFzc3dvcmRfY2hhbmdlX21l  # base64 encoded password

---
# PostgreSQL Read Replica for load balancing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-read-replica
  namespace: pyairtable
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres-read-replica
  template:
    metadata:
      labels:
        app: postgres-read-replica
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "pyairtable"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGUSER
          value: "postgres"
        - name: POSTGRES_MASTER_SERVICE
          value: "postgres-optimized"
        - name: POSTGRES_REPLICA_SLOT
          value: "replica_slot"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-replica-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        command: ["postgres"]
        args: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: postgres-replica-storage
        emptyDir: {}
      - name: postgres-config
        configMap:
          name: postgres-performance-config

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-read-replica
  namespace: pyairtable
spec:
  selector:
    app: postgres-read-replica
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP