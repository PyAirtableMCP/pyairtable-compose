# PyAirtable Local Development - Resource Optimized Configuration
# Designed for laptops/workstations with 8-16GB RAM
# Optimizes for development speed while maintaining functionality

global:
  namespace: pyairtable
  imageRegistry: ""  # Use local images
  imagePullPolicy: IfNotPresent  # Faster local development
  storageClassName: standard
  
  # Local development optimizations
  development:
    enabled: true
    debugMode: true
    hotReload: true
    exposeMetrics: false  # Disable to save resources
    
  # Resource optimization
  resourceOptimization:
    enabled: true
    profile: "laptop"  # laptop, workstation, server
    memoryLimit: "4Gi"  # Total memory budget
    cpuLimit: "2"       # Total CPU budget

# Application configuration
app:
  environment: development
  logLevel: info  # Changed from debug to save resources
  
  features:
    enableDebugEndpoints: true
    enableMetrics: false      # Disabled to save resources
    enableTracing: false      # Disabled to save resources
    enableHealthChecks: true

# Optimized service configurations
services:
  # API Gateway - Main entry point
  apiGateway:
    enabled: true
    name: api-gateway
    image: pyairtable-api-gateway
    tag: latest
    port: 8000
    targetPort: 8000
    replicas: 1
    
    # Minimal resource allocation
    resources:
      limits:
        cpu: 150m
        memory: 192Mi
      requests:
        cpu: 50m
        memory: 96Mi
    
    # Fast health checks
    healthCheck:
      enabled: true
      path: /health
      initialDelaySeconds: 10
      periodSeconds: 15
      timeoutSeconds: 3
      failureThreshold: 2
      successThreshold: 1
    
    env:
      - name: DEVELOPMENT_MODE
        value: "true"
      - name: DEBUG_LOGGING
        value: "false"  # Reduced logging
      - name: ENABLE_CORS
        value: "true"
    
    service:
      type: NodePort
      nodePort: 30800

  # LLM Orchestrator - Minimal resources for local testing
  llmOrchestrator:
    enabled: true
    name: llm-orchestrator
    image: llm-orchestrator-py
    tag: latest
    port: 8003
    targetPort: 8003
    replicas: 1
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    
    env:
      - name: DEVELOPMENT_MODE
        value: "true"
      - name: THINKING_BUDGET
        value: "1000"  # Reduced for local testing
      - name: LOG_REQUESTS
        value: "false"  # Reduce logging overhead

  # MCP Server - Lightweight configuration
  mcpServer:
    enabled: true
    name: mcp-server
    image: mcp-server-py
    tag: latest
    port: 8001
    targetPort: 8001
    replicas: 1
    
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Airtable Gateway - Basic allocation
  airtableGateway:
    enabled: true
    name: airtable-gateway
    image: airtable-gateway-py
    tag: latest
    port: 8002
    targetPort: 8002
    replicas: 1
    
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Platform Services - Core functionality
  platformServices:
    enabled: true
    name: platform-services
    image: pyairtable-platform-services
    tag: latest
    port: 8007
    targetPort: 8007
    replicas: 1
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  # Automation Services - Reduced resources
  automationServices:
    enabled: true
    name: automation-services
    image: pyairtable-automation-services
    tag: latest
    port: 8006
    targetPort: 8006
    replicas: 1
    
    resources:
      limits:
        cpu: 150m
        memory: 192Mi
      requests:
        cpu: 75m
        memory: 96Mi

  # SAGA Orchestrator - Minimal allocation
  sagaOrchestrator:
    enabled: true
    name: saga-orchestrator
    image: pyairtable-saga-orchestrator
    tag: latest
    port: 8008
    targetPort: 8008
    replicas: 1
    
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Frontend - Optimized for development
  frontend:
    enabled: true
    name: frontend
    image: pyairtable-frontend
    tag: latest
    port: 3000
    targetPort: 3000
    replicas: 1
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    
    service:
      type: NodePort
      nodePort: 30000
    
    env:
      - name: NODE_ENV
        value: "development"
      - name: NEXT_PUBLIC_API_URL
        value: "http://localhost:30800"

# Optimized database services
databases:
  # PostgreSQL - Tuned for development
  postgres:
    enabled: true
    name: postgres
    image: postgres
    tag: 16-alpine
    port: 5432
    replicas: 1
    
    # Conservative resource allocation
    resources:
      limits:
        cpu: 200m
        memory: 384Mi
      requests:
        cpu: 100m
        memory: 192Mi
    
    # Development-optimized PostgreSQL configuration
    config:
      maxConnections: 50          # Reduced from 100
      sharedBuffers: "64MB"       # Reduced from 128MB
      effectiveCacheSize: "128MB" # Reduced from 256MB
      workMem: "1MB"              # Reduced from 2MB
      maintenanceWorkMem: "16MB"  # Reduced from 32MB
      fsync: "off"                # Fast for development (unsafe for production)
      synchronousCommit: "off"    # Fast for development
    
    persistence:
      enabled: true
      size: 2Gi  # Reduced from 5Gi
      storageClass: standard
    
    backup:
      enabled: false  # Disabled for local development
    
    metrics:
      enabled: false  # Disabled to save resources

  # Redis - Minimal configuration
  redis:
    enabled: true
    name: redis
    image: redis
    tag: 7-alpine
    port: 6379
    replicas: 1
    
    resources:
      limits:
        cpu: 50m
        memory: 64Mi
      requests:
        cpu: 25m
        memory: 32Mi
    
    # Minimal Redis configuration
    config:
      maxmemory: "32mb"               # Reduced from 64mb
      maxmemoryPolicy: "allkeys-lru"
      save: "300 10"                  # Less frequent saves
      appendonly: "no"                # Disabled for development speed
      logLevel: "notice"              # Less verbose
    
    persistence:
      enabled: false  # Disabled for local development speed

# Persistent volumes - Minimal sizes
persistence:
  fileUploads:
    enabled: true
    size: 1Gi  # Reduced from 2Gi
    storageClass: standard

# Development secrets (minimal set)
secrets:
  apiKey: "dev-api-key-replace-me"
  geminiApiKey: ""
  airtableToken: ""
  airtableBase: ""
  jwtSecret: "dev-jwt-secret-replace-me-32-chars"
  nextauthSecret: "dev-nextauth-secret-replace-me-32-chars"
  redisPassword: "dev-redis-password"
  postgresDb: pyairtable
  postgresUser: postgres
  postgresPassword: "dev-postgres-password"
  thinkingBudget: "1000"  # Reduced
  corsOrigins: "*"
  maxFileSize: "5MB"      # Reduced
  allowedExtensions: "pdf,txt,csv,json"

# Simplified health checks
healthChecks:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 3
  failureThreshold: 2
  successThreshold: 1
  
  development:
    verbose: false          # Disabled to reduce noise
    includeMetrics: false   # Disabled to save resources
    includeDependencies: true

# Autoscaling disabled for local development
autoscaling:
  enabled: false

# Minimal monitoring
monitoring:
  enabled: false  # Completely disabled to save resources

# Development debugging - Minimal
debugging:
  enabled: true
  
  debugEndpoints:
    enabled: true
    paths:
      - /debug/health
  
  remoteDebugging:
    enabled: false
  
  logging:
    level: info    # Reduced from debug
    format: text   # Faster than json
    includeStackTraces: false  # Disabled for performance
    logRequests: false         # Disabled for performance
    logResponses: false        # Disabled for performance

# Development utilities - Minimal
development:
  hotReload:
    enabled: true
    watchPaths:
      - /app/src
    excludePaths:
      - /app/node_modules
      - /app/__pycache__
      - /app/.next
  
  tools:
    enableShell: true
    enableDebugConsole: false      # Disabled to save resources
    enableMetricsEndpoint: false   # Disabled to save resources
    enableHealthDetailedResponse: false  # Disabled to save resources
  
  testing:
    enabled: false  # Disabled by default
    runUnitTests: false
    runIntegrationTests: false
    testDataPersistence: false

# Resource monitoring and limits
resourceLimits:
  # Global resource budget for all services
  totalCpuLimit: "2"
  totalMemoryLimit: "4Gi"
  
  # Individual service limits (enforced)
  perServiceLimits:
    cpu: "200m"
    memory: "256Mi"
  
  # Quality of Service settings
  qosClass: "Burstable"  # Allow bursting within limits
  
  # Development optimizations
  optimizations:
    disableSwap: true
    enableCpuThrottling: true
    enableMemoryReclaim: true
    gcTuning: true

# Startup orchestration
startup:
  # Service startup order with delays
  orderedStartup:
    enabled: true
    phases:
      - name: "databases"
        services: ["postgres", "redis"]
        delay: 30
      - name: "core"
        services: ["airtable-gateway", "mcp-server"] 
        delay: 15
      - name: "platform"
        services: ["platform-services", "llm-orchestrator"]
        delay: 15
      - name: "apps"
        services: ["automation-services", "saga-orchestrator", "api-gateway"]
        delay: 15
      - name: "frontend"
        services: ["frontend"]
        delay: 10
  
  # Health check dependencies
  dependencies:
    enabled: true
    timeout: 300  # 5 minutes total timeout
    retryInterval: 10