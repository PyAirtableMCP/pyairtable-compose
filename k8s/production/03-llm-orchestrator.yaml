# LLM Orchestrator Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-orchestrator
  namespace: pyairtable-production
  labels:
    app: llm-orchestrator
    component: llm
    tier: backend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: llm-orchestrator
  template:
    metadata:
      labels:
        app: llm-orchestrator
        component: llm
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8003"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pyairtable-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: llm-orchestrator
        image: ghcr.io/reg-kris/llm-orchestrator-py:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
          protocol: TCP
        env:
        # Service Configuration
        - name: PORT
          value: "8003"
        - name: MCP_SERVER_HTTP_URL
          value: "http://mcp-server:8001"
        - name: USE_HTTP_MCP
          value: "true"
        - name: MCP_SERVER_STDIO_COMMAND
          value: "python -m src.server"
        - name: MCP_SERVER_WORKING_DIR
          value: "/app/mcp-server"
        - name: USE_REDIS_SESSIONS
          value: "true"
        envFrom:
        - secretRef:
            name: pyairtable-api-keys
        - secretRef:
            name: pyairtable-app-config
        - secretRef:
            name: pyairtable-redis
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 20
      tolerations:
      - key: "system-critical"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - llm-orchestrator
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["on-demand"]
---
apiVersion: v1
kind: Service
metadata:
  name: llm-orchestrator
  namespace: pyairtable-production
  labels:
    app: llm-orchestrator
    component: llm
spec:
  type: ClusterIP
  ports:
  - port: 8003
    targetPort: 8003
    protocol: TCP
    name: http
  selector:
    app: llm-orchestrator
---
# HorizontalPodAutoscaler for LLM Orchestrator
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: llm-orchestrator-hpa
  namespace: pyairtable-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: llm-orchestrator
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60