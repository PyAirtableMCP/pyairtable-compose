# PyAirtable Istio Security Policies
# Comprehensive security configuration with strict mTLS, RBAC, and authorization

---
# Namespace with automatic sidecar injection
apiVersion: v1
kind: Namespace
metadata:
  name: pyairtable
  labels:
    istio-injection: enabled
    name: pyairtable
    security.istio.io/tlsMode: istio
  annotations:
    # Enable strict mTLS by default
    security.istio.io/tlsMode: istio
    # Sidecar injection configuration
    sidecar.istio.io/inject: "true"
    # Enhanced security annotations
    seccomp.security.alpha.kubernetes.io/pod: runtime/default

---
# Service Account for PyAirtable services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyairtable-service-account
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: pyairtable
    app.kubernetes.io/part-of: pyairtable-platform
automountServiceAccountToken: true

---
# Service Account for API Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: api-gateway
automountServiceAccountToken: true

---
# Service Account for Auth Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: auth-service
automountServiceAccountToken: true

---
# Service Account for User Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-service-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: user-service
automountServiceAccountToken: true

---
# Service Account for Platform Services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: platform-services-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: platform-services
    app.kubernetes.io/component: platform-services
automountServiceAccountToken: true

---
# Service Account for Airtable Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airtable-gateway-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: airtable-gateway
    app.kubernetes.io/component: airtable-gateway
automountServiceAccountToken: true

---
# Service Account for LLM Orchestrator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: llm-orchestrator-sa
  namespace: pyairtable
  labels:
    app.kubernetes.io/name: llm-orchestrator
    app.kubernetes.io/component: llm-orchestrator
automountServiceAccountToken: true

---
# Strict mTLS for all services in the namespace
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-strict-mtls
  namespace: pyairtable
spec:
  mtls:
    mode: STRICT

---
# Permissive mTLS for ingress gateway (to allow external traffic)
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: ingress-gateway-permissive
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  mtls:
    mode: PERMISSIVE

---
# API Gateway specific peer authentication (allows external HTTP/HTTPS)
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: api-gateway-external
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  portLevelMtls:
    8080:
      mode: PERMISSIVE  # Allow external traffic
    8081:
      mode: STRICT      # Internal metrics port

---
# JWT Authentication for API Gateway
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: pyairtable-jwt-auth
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  jwtRules:
  - issuer: "pyairtable-auth"
    jwksUri: "http://auth-service.pyairtable.svc.cluster.local:8001/.well-known/jwks.json"
    audiences:
    - "pyairtable-api"
    - "pyairtable-frontend"
    forwardOriginalToken: true
    fromHeaders:
    - name: "Authorization"
      prefix: "Bearer "
    fromParams:
    - "access_token"

---
# Authorization Policy: Default deny all
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: default-deny-all
  namespace: pyairtable
spec:
  # Empty spec means deny all by default

---
# Authorization Policy: Allow internal service-to-service communication
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-internal-communication
  namespace: pyairtable
spec:
  action: ALLOW
  rules:
  # Allow all internal service accounts to communicate
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/pyairtable-service-account"
        - "cluster.local/ns/pyairtable/sa/api-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/auth-service-sa"
        - "cluster.local/ns/pyairtable/sa/user-service-sa"
        - "cluster.local/ns/pyairtable/sa/platform-services-sa"
        - "cluster.local/ns/pyairtable/sa/airtable-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/llm-orchestrator-sa"
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]

---
# Authorization Policy: Allow external access to API Gateway
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-external-api-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  action: ALLOW
  rules:
  # Allow external access to API endpoints
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        paths: ["/api/*", "/health", "/metrics", "/ready"]
  # Allow access from istio-system namespace (ingress gateway)
  - from:
    - source:
        namespaces: ["istio-system"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]

---
# Authorization Policy: Auth Service access control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-service-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: auth-service
  action: ALLOW
  rules:
  # Allow API Gateway to access auth endpoints
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable/sa/api-gateway-sa"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/auth/*", "/health", "/metrics"]
  
  # Allow other services to validate tokens
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/user-service-sa"
        - "cluster.local/ns/pyairtable/sa/platform-services-sa"
    to:
    - operation:
        methods: ["POST"]
        paths: ["/api/v1/auth/validate", "/api/v1/auth/refresh"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]

---
# Authorization Policy: User Service access control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: user-service-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: user-service
  action: ALLOW
  rules:
  # Allow API Gateway and Auth Service access
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/api-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/auth-service-sa"
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/users/*", "/health", "/metrics"]
    when:
    - key: request.headers[x-user-id]
      values: ["*"]

---
# Authorization Policy: Airtable Gateway access control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: airtable-gateway-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: airtable-gateway
  action: ALLOW
  rules:
  # Allow API Gateway and MCP Server access
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/api-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/platform-services-sa"
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/airtable/*", "/health", "/metrics"]
    when:
    - key: request.headers[x-api-key]
      values: ["*"]

---
# Authorization Policy: LLM Orchestrator access control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: llm-orchestrator-access
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: llm-orchestrator
  action: ALLOW
  rules:
  # Allow API Gateway access to LLM endpoints
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable/sa/api-gateway-sa"]
    to:
    - operation:
        methods: ["POST", "GET"]
        paths: ["/api/v1/llm/*", "/api/v1/chat/*", "/health", "/metrics"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]

---
# Authorization Policy: Database access restrictions
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: database-access-control
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: database
  action: ALLOW
  rules:
  # Only allow specific services to access database
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/auth-service-sa"
        - "cluster.local/ns/pyairtable/sa/user-service-sa"
        - "cluster.local/ns/pyairtable/sa/platform-services-sa"
    to:
    - operation:
        ports: ["5432"]

---
# Authorization Policy: Redis access restrictions
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: redis-access-control
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: redis
  action: ALLOW
  rules:
  # Allow all services to access Redis (for caching)
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/api-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/auth-service-sa"
        - "cluster.local/ns/pyairtable/sa/user-service-sa"
        - "cluster.local/ns/pyairtable/sa/platform-services-sa"
        - "cluster.local/ns/pyairtable/sa/airtable-gateway-sa"
        - "cluster.local/ns/pyairtable/sa/llm-orchestrator-sa"
    to:
    - operation:
        ports: ["6379"]

---
# Security Context Constraints (for OpenShift compatibility)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: pyairtable-scc
  namespace: pyairtable
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: false
allowedCapabilities: null
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
priority: 10
readOnlyRootFilesystem: true
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:pyairtable:pyairtable-service-account
- system:serviceaccount:pyairtable:api-gateway-sa
- system:serviceaccount:pyairtable:auth-service-sa
- system:serviceaccount:pyairtable:user-service-sa
- system:serviceaccount:pyairtable:platform-services-sa
- system:serviceaccount:pyairtable:airtable-gateway-sa
- system:serviceaccount:pyairtable:llm-orchestrator-sa
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret

---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: pyairtable-psp
  namespace: pyairtable
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: true
  seLinux:
    rule: RunAsAny