# Enhanced Istio Service Mesh Configuration for PyAirtable Production
# Advanced traffic management, security, and observability for enterprise deployment

---
# Istio Installation Configuration
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: pyairtable-production
  namespace: istio-system
spec:
  # Production-grade control plane configuration
  values:
    pilot:
      traceSampling: 1.0  # 100% tracing for debugging, reduce to 0.1 for production
      resources:
        requests:
          cpu: 500m
          memory: 2048Mi
        limits:
          cpu: 1000m
          memory: 4096Mi
    
    global:
      meshID: pyairtable-mesh
      multiCluster:
        clusterName: pyairtable-primary
      network: pyairtable-network
      
      # Enhanced security
      mtls:
        auto: true
      
      # Proxy configuration for optimal performance
      proxy:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # Concurrency settings for high throughput
        concurrency: 2
        
        # Access logging configuration
        accessLogFormat: |
          {
            "timestamp": "%START_TIME%",
            "method": "%REQ(:METHOD)%",
            "url": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
            "protocol": "%PROTOCOL%",
            "status": "%RESPONSE_CODE%",
            "response_flags": "%RESPONSE_FLAGS%",
            "bytes_received": "%BYTES_RECEIVED%",
            "bytes_sent": "%BYTES_SENT%",
            "duration": "%DURATION%",
            "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
            "user_agent": "%REQ(USER-AGENT)%",
            "request_id": "%REQ(X-REQUEST-ID)%",
            "authority": "%REQ(:AUTHORITY)%",
            "upstream_host": "%UPSTREAM_HOST%",
            "tenant_id": "%REQ(X-TENANT-ID)%",
            "user_id": "%REQ(X-USER-ID)%",
            "trace_id": "%REQ(X-TRACE-ID)%",
            "span_id": "%REQ(X-SPAN-ID)%"
          }
  
  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 500m
            memory: 2048Mi
          limits:
            cpu: 1000m
            memory: 4096Mi
        hpaSpec:
          minReplicas: 2
          maxReplicas: 5
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80

    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 1000m
            memory: 1024Mi
          limits:
            cpu: 2000m
            memory: 2048Mi
        hpaSpec:
          minReplicas: 3
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70
        service:
          type: LoadBalancer
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
            service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
            service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
            service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
            service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
            service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"

    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi

---
# Enhanced Gateway Configuration
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: pyairtable-production-gateway
  namespace: pyairtable
spec:
  selector:
    istio: ingressgateway
  servers:
  # HTTP -> HTTPS redirect
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "api.pyairtable.com"
    - "app.pyairtable.com"
    - "*.pyairtable.com"
    tls:
      httpsRedirect: true
  
  # HTTPS with TLS termination
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "api.pyairtable.com"
    - "app.pyairtable.com"
    - "*.pyairtable.com"
    tls:
      mode: SIMPLE
      credentialName: pyairtable-tls-secret
      minProtocolVersion: TLSV1_2
      cipherSuites:
      - ECDHE-RSA-AES256-GCM-SHA384
      - ECDHE-RSA-AES128-GCM-SHA256

---
# Advanced Virtual Service with Traffic Splitting and Fault Injection
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: pyairtable-api-traffic-management
  namespace: pyairtable
spec:
  hosts:
  - "api.pyairtable.com"
  gateways:
  - pyairtable-production-gateway
  http:
  # Health check endpoints (fast response)
  - match:
    - uri:
        prefix: "/health"
    - uri:
        prefix: "/ready"
    - uri:
        prefix: "/metrics"
    route:
    - destination:
        host: api-gateway
        port:
          number: 8080
    timeout: 5s
    retries:
      attempts: 2
      perTryTimeout: 2s

  # Authentication service routing
  - match:
    - uri:
        prefix: "/api/v1/auth"
    route:
    - destination:
        host: auth-service
        port:
          number: 8010
        subset: stable
      weight: 95
    - destination:
        host: auth-service
        port:
          number: 8010
        subset: canary
      weight: 5
    headers:
      request:
        add:
          x-service-name: auth-service
          x-request-start-time: "%START_TIME%"
      response:
        add:
          x-response-time: "%DURATION%"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    # Rate limiting for auth endpoints
    fault:
      delay:
        percentage:
          value: 0.05  # 0.05% of requests
        fixedDelay: 100ms

  # User service routing with circuit breaker
  - match:
    - uri:
        prefix: "/api/v1/users"
    route:
    - destination:
        host: user-service
        port:
          number: 8011
    headers:
      request:
        add:
          x-service-name: user-service
    timeout: 30s
    retries:
      attempts: 2
      perTryTimeout: 15s
      retryOn: gateway-error,connect-failure,refused-stream

  # Airtable service with advanced routing
  - match:
    - uri:
        prefix: "/api/v1/airtable"
    route:
    - destination:
        host: platform-services
        port:
          number: 8001
        subset: stable
      weight: 90
    - destination:
        host: platform-services
        port:
          number: 8001
        subset: canary
      weight: 10
    headers:
      request:
        add:
          x-service-name: platform-services
          x-tenant-id: "%REQ(x-tenant-id)%"
    timeout: 60s
    retries:
      attempts: 3
      perTryTimeout: 20s
      retryOn: gateway-error,connect-failure,refused-stream,5xx

  # AI/LLM services with longer timeouts
  - match:
    - uri:
        prefix: "/api/v1/chat"
    - uri:
        prefix: "/api/v1/llm"
    route:
    - destination:
        host: llm-orchestrator
        port:
          number: 8003
    headers:
      request:
        add:
          x-service-name: llm-orchestrator
    timeout: 120s  # AI operations can take longer
    retries:
      attempts: 1  # Don't retry AI operations
      perTryTimeout: 120s

  # File upload/download with special handling
  - match:
    - uri:
        prefix: "/api/v1/files"
    route:
    - destination:
        host: automation-services
        port:
          number: 8002
    headers:
      request:
        add:
          x-service-name: automation-services
    timeout: 300s  # File operations can take longer
    retries:
      attempts: 1  # Don't retry file operations

  # Workflow and automation services
  - match:
    - uri:
        prefix: "/api/v1/workflows"
    - uri:
        prefix: "/api/v1/automation"
    route:
    - destination:
        host: automation-services
        port:
          number: 8002
    headers:
      request:
        add:
          x-service-name: automation-services
    timeout: 60s
    retries:
      attempts: 2
      perTryTimeout: 30s

  # Default routing to API gateway
  - route:
    - destination:
        host: api-gateway
        port:
          number: 8080
    headers:
      request:
        add:
          x-service-name: api-gateway
    timeout: 30s

---
# Enhanced Destination Rules with Circuit Breakers and Load Balancing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: auth-service-dr
  namespace: pyairtable
spec:
  host: auth-service
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 20
        maxRetries: 3
        consecutiveGatewayErrors: 5
        h2UpgradePolicy: UPGRADE
    loadBalancer:
      simple: LEAST_CONN
      consistentHash:
        httpHeaderName: "x-user-id"  # Session affinity for auth
    outlierDetection:
      consecutiveGatewayErrors: 3
      consecutive5xxErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
  subsets:
  - name: stable
    labels:
      version: stable
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 80
  - name: canary
    labels:
      version: canary
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 20

---
# Platform Services Destination Rule
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: platform-services-dr
  namespace: pyairtable
spec:
  host: platform-services
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 150
        connectTimeout: 30s
      http:
        http1MaxPendingRequests: 75
        http2MaxRequests: 150
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
    loadBalancer:
      simple: ROUND_ROBIN
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
  subsets:
  - name: stable
    labels:
      version: stable
  - name: canary
    labels:
      version: canary

---
# LLM Orchestrator with specialized settings
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: llm-orchestrator-dr
  namespace: pyairtable
spec:
  host: llm-orchestrator
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 50
        connectTimeout: 60s
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 50
        maxRequestsPerConnection: 5  # Lower for AI workloads
        maxRetries: 1
        consecutiveGatewayErrors: 3
    loadBalancer:
      simple: LEAST_CONN  # Better for AI workloads
    outlierDetection:
      consecutiveGatewayErrors: 2
      consecutive5xxErrors: 2
      interval: 60s
      baseEjectionTime: 60s
      maxEjectionPercent: 25  # More conservative for AI

---
# Strict mTLS Policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: pyairtable
spec:
  mtls:
    mode: STRICT

---
# Gateway-specific authentication (allow external traffic)
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: api-gateway-mtls
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: api-gateway
  portLevelMtls:
    8080:
      mode: PERMISSIVE

---
# Comprehensive Authorization Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: pyairtable-rbac
  namespace: pyairtable
spec:
  action: ALLOW
  rules:
  # Allow ingress gateway to API gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"]

  # API Gateway can access all backend services
  - from:
    - source:
        principals: ["cluster.local/ns/pyairtable/sa/api-gateway"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]

  # Auth service specific rules
  - from:
    - source:
        principals: 
        - "cluster.local/ns/pyairtable/sa/api-gateway"
        - "cluster.local/ns/pyairtable/sa/user-service"
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/auth/*"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]

  # Inter-service communication for platform services
  - from:
    - source:
        principals:
        - "cluster.local/ns/pyairtable/sa/api-gateway"
        - "cluster.local/ns/pyairtable/sa/auth-service"
        - "cluster.local/ns/pyairtable/sa/automation-services"
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/users/*", "/api/v1/airtable/*"]

  # AI services access control
  - from:
    - source:
        principals:
        - "cluster.local/ns/pyairtable/sa/api-gateway"
        - "cluster.local/ns/pyairtable/sa/platform-services"
    to:
    - operation:
        methods: ["POST"]
        paths: ["/api/v1/chat/*", "/api/v1/llm/*"]
    when:
    - key: request.headers[x-tenant-id]
      values: ["*"]

  # File services with size restrictions
  - from:
    - source:
        principals:
        - "cluster.local/ns/pyairtable/sa/api-gateway"
        - "cluster.local/ns/pyairtable/sa/platform-services"
    to:
    - operation:
        methods: ["GET", "POST", "PUT"]
        paths: ["/api/v1/files/*"]
    when:
    - key: request.headers[content-length]
      values: ["*"]

  # Monitoring and health check access
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET"]
        paths: ["/health", "/ready", "/metrics"]

  # Internal service mesh communication
  - from:
    - source:
        namespaces: ["pyairtable", "istio-system", "pyairtable-monitoring"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/health", "/ready", "/metrics"]

---
# Request Authentication with JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-auth
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: api-gateway
  jwtRules:
  - issuer: "https://auth.pyairtable.com"
    jwksUri: "https://auth.pyairtable.com/.well-known/jwks.json"
    audiences:
    - "pyairtable-api"
    - "pyairtable-app"
    forwardOriginalToken: true

---
# Authorization policy requiring JWT for protected endpoints
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: api-gateway
  action: ALLOW
  rules:
  # Allow public endpoints without JWT
  - to:
    - operation:
        paths: ["/health", "/ready", "/api/v1/auth/login", "/api/v1/auth/register"]
        methods: ["GET", "POST"]
  
  # Require JWT for protected endpoints
  - from:
    - source:
        requestPrincipals: ["https://auth.pyairtable.com/*"]
    to:
    - operation:
        paths: ["/api/v1/*"]
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.auth.claims[sub]
      values: ["*"]
    - key: request.auth.claims[aud]
      values: ["pyairtable-api", "pyairtable-app"]

---
# Enhanced Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: enhanced-metrics
  namespace: pyairtable
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        tenant_id:
          value: "%{REQUEST_HEADERS.x-tenant-id}"
        user_id:
          value: "%{REQUEST_HEADERS.x-user-id}"
        service_name:
          value: "%{REQUEST_HEADERS.x-service-name}"
        request_id:
          value: "%{REQUEST_HEADERS.x-request-id}"
        api_version:
          value: "%{REQUEST_HEADERS.x-api-version}"
        client_version:
          value: "%{REQUEST_HEADERS.x-client-version}"
        response_size_bucket:
          value: |
            has(response.total_size) ?
              (response.total_size <= 1024 ? "small" :
               response.total_size <= 10240 ? "medium" :
               response.total_size <= 102400 ? "large" : "xlarge") : "unknown"

---
# Distributed Tracing Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: distributed-tracing
  namespace: pyairtable
spec:
  tracing:
  - providers:
    - name: jaeger
  - customTags:
      tenant_id:
        header:
          name: x-tenant-id
      user_id:
        header:
          name: x-user-id
      request_id:
        header:
          name: x-request-id
      service_name:
        header:
          name: x-service-name
      operation_name:
        operation:
          name: "%{REQUEST_HEADERS.:path}"
      http_method:
        operation:
          name: "%{REQUEST_HEADERS.:method}"

---
# Access Logging Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: access-logs
  namespace: pyairtable
spec:
  accessLogging:
  - providers:
    - name: otel
  - filter:
      expression: |
        response.code >= 400 ||
        request.headers['x-debug-logging'] == 'true' ||
        request.url_path.matches('/api/v1/(auth|admin)/.*')

---
# Egress Gateway for external services
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: external-services-gateway
  namespace: pyairtable
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 443
      name: tls
      protocol: TLS
    hosts:
    - api.airtable.com
    - api.openai.com
    - generativelanguage.googleapis.com
    tls:
      mode: PASSTHROUGH

---
# Service Entries for external dependencies
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: airtable-api
  namespace: pyairtable
spec:
  hosts:
  - api.airtable.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL

---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: openai-api
  namespace: pyairtable
spec:
  hosts:
  - api.openai.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL

---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: gemini-api
  namespace: pyairtable
spec:
  hosts:
  - generativelanguage.googleapis.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL

---
# Virtual Service for external API rate limiting
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: external-api-ratelimit
  namespace: pyairtable
spec:
  hosts:
  - api.airtable.com
  - api.openai.com
  gateways:
  - external-services-gateway
  - mesh
  tls:
  - match:
    - port: 443
      sniHosts:
      - api.airtable.com
      - api.openai.com
    route:
    - destination:
        host: api.airtable.com
        port:
          number: 443
      - destination:
        host: api.openai.com
        port:
          number: 443
    # Rate limiting for external APIs
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 100ms

---
# WasmPlugin for advanced rate limiting
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: rate-limiter
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: api-gateway
  url: oci://ghcr.io/pyairtable/rate-limiter-wasm:latest
  phase: AUTHN
  pluginConfig:
    rules:
    # Rate limit by tenant
    - match:
        request_headers:
          x-tenant-id:
            present_match: true
      actions:
      - quota:
          name: tenant_quota
          max_amount: 10000
          window: 3600s  # 1 hour
          identifier:
            request_headers:
            - name: x-tenant-id
    
    # Rate limit by user
    - match:
        request_headers:
          x-user-id:
            present_match: true
      actions:
      - quota:
          name: user_quota
          max_amount: 1000
          window: 3600s  # 1 hour
          identifier:
            request_headers:
            - name: x-user-id
    
    # Global rate limit
    - match:
        request_headers:
          ":path":
            regex_match: "/api/v1/.*"
      actions:
      - quota:
          name: global_quota
          max_amount: 100000
          window: 3600s  # 1 hour

---
# WasmPlugin for security headers
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: security-headers
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app: api-gateway
  url: oci://ghcr.io/pyairtable/security-headers-wasm:latest
  phase: AUTHZ
  pluginConfig:
    headers:
      response:
        add:
          X-Content-Type-Options: "nosniff"
          X-Frame-Options: "DENY"
          X-XSS-Protection: "1; mode=block"
          Strict-Transport-Security: "max-age=31536000; includeSubDomains"
          Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
          Referrer-Policy: "strict-origin-when-cross-origin"