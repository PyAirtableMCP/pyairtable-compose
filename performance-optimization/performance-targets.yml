# PyAirtable Performance Targets Configuration
# Defines performance targets, monitoring thresholds, and validation criteria

# Base configuration
base_url: "http://localhost:8000"
environment: "performance-test"

# Service endpoints for monitoring and testing
services:
  api-gateway: "http://localhost:8000"
  llm-orchestrator: "http://localhost:8003"
  mcp-server: "http://localhost:8001"
  airtable-gateway: "http://localhost:8002"
  platform-services: "http://localhost:8007"
  automation-services: "http://localhost:8006"
  saga-orchestrator: "http://localhost:8008"
  frontend: "http://localhost:3000"

# Core Performance Targets
performance_targets:
  # API Performance
  api_response_time_ms: 200          # P95 response time target
  api_response_time_p99_ms: 500      # P99 response time target
  throughput_rps: 500                # Minimum requests per second
  
  # Frontend Performance
  frontend_load_time_ms: 3000        # Initial page load time
  largest_contentful_paint_ms: 2500  # LCP target
  first_input_delay_ms: 100          # FID target
  cumulative_layout_shift: 0.1       # CLS target
  
  # Scalability
  max_concurrent_users: 1000         # Maximum concurrent users
  error_rate_threshold: 0.05         # Maximum error rate (5%)
  
  # Database Performance
  database_query_time_ms: 100        # P95 database query time
  database_connection_pool_size: 50  # Minimum connection pool size
  
  # Caching Performance
  cache_hit_rate: 0.80              # Minimum cache hit rate (80%)
  cache_response_time_ms: 10        # Maximum cache response time
  
  # System Resources (MacBook Air M2 optimized)
  cpu_utilization_threshold: 0.80   # Maximum CPU utilization (80%)
  memory_utilization_threshold: 0.80 # Maximum memory utilization (80%)
  disk_io_threshold_mbps: 100       # Maximum disk I/O (MB/s)
  
  # Network Performance
  inter_service_latency_ms: 50      # Maximum inter-service latency
  network_throughput_mbps: 100      # Minimum network throughput

# Performance Test Scenarios
test_scenarios:
  # Basic functionality test
  smoke_test:
    users: 1
    duration: "1m"
    description: "Basic functionality and health check"
    
  # Normal load test
  load_test:
    users: 100
    duration: "10m"
    description: "Normal expected load"
    ramp_up: "2m"
    
  # High load test
  stress_test:
    users: 500
    duration: "15m"
    description: "Above normal load to test limits"
    ramp_up: "5m"
    
  # Maximum load test
  spike_test:
    users: 1000
    duration: "5m"
    description: "Sudden spike to maximum users"
    ramp_up: "30s"
    
  # Extended duration test
  endurance_test:
    users: 200
    duration: "60m"
    description: "Extended duration for memory leaks"
    ramp_up: "5m"
    
  # API throughput test
  api_throughput_test:
    requests_per_second: 500
    duration: "10m"
    description: "API throughput validation"
    
  # Database stress test
  database_stress_test:
    users: 100
    duration: "15m"
    description: "Database-heavy operations"
    query_complexity: "high"

# Monitoring Configuration
monitoring:
  # Metrics collection intervals
  metrics_interval: "15s"
  health_check_interval: "30s"
  
  # Alert thresholds
  alerts:
    critical:
      api_response_time_ms: 1000     # Critical if >1s
      error_rate: 0.20               # Critical if >20%
      cpu_utilization: 0.95          # Critical if >95%
      memory_utilization: 0.95       # Critical if >95%
      
    warning:
      api_response_time_ms: 400      # Warning if >400ms
      error_rate: 0.10               # Warning if >10%
      cpu_utilization: 0.80          # Warning if >80%
      memory_utilization: 0.80       # Warning if >80%
      cache_hit_rate: 0.70           # Warning if <70%
  
  # Dashboard refresh rates
  dashboard_refresh: "30s"
  real_time_refresh: "5s"

# Service-Specific Targets
service_targets:
  api-gateway:
    response_time_ms: 150
    throughput_rps: 200
    memory_limit_mb: 512
    cpu_limit_cores: 1.0
    
  llm-orchestrator:
    response_time_ms: 2000          # LLM calls can be slower
    throughput_rps: 50
    memory_limit_mb: 1024
    cpu_limit_cores: 1.5
    
  mcp-server:
    response_time_ms: 100
    throughput_rps: 100
    memory_limit_mb: 512
    cpu_limit_cores: 1.0
    
  airtable-gateway:
    response_time_ms: 300           # External API dependency
    throughput_rps: 50              # Rate limited by Airtable
    memory_limit_mb: 512
    cpu_limit_cores: 1.0
    
  platform-services:
    response_time_ms: 150
    throughput_rps: 150
    memory_limit_mb: 512
    cpu_limit_cores: 1.0
    
  automation-services:
    response_time_ms: 500           # Complex processing
    throughput_rps: 30
    memory_limit_mb: 768
    cpu_limit_cores: 1.5
    
  saga-orchestrator:
    response_time_ms: 200
    throughput_rps: 100
    memory_limit_mb: 512
    cpu_limit_cores: 1.0
    
  frontend:
    initial_load_time_ms: 3000
    subsequent_load_time_ms: 1000
    memory_limit_mb: 512
    cpu_limit_cores: 1.0

# Database Performance Targets
database_targets:
  postgresql:
    # Connection settings
    max_connections: 200
    connection_pool_size: 50
    connection_timeout_ms: 30000
    
    # Query performance
    query_timeout_ms: 30000
    slow_query_threshold_ms: 1000
    
    # Resource usage
    shared_buffers_mb: 256
    effective_cache_size_mb: 1024
    work_mem_mb: 4
    
    # Maintenance
    autovacuum_enabled: true
    checkpoint_completion_target: 0.9

# Cache Performance Targets
cache_targets:
  redis:
    # Performance
    response_time_ms: 10
    hit_rate_threshold: 0.80
    memory_usage_mb: 512
    
    # Configuration
    max_memory_policy: "allkeys-lru"
    timeout_seconds: 0
    tcp_keepalive: 300
    
    # Specific cache types
    api_cache_ttl: 300              # 5 minutes
    session_cache_ttl: 3600         # 1 hour
    user_cache_ttl: 1800            # 30 minutes
    workspace_cache_ttl: 900        # 15 minutes

# Load Testing Configuration
load_testing:
  # K6 configuration
  k6:
    output_format: "json"
    thresholds:
      http_req_duration_p95: 200
      http_req_duration_p99: 500
      http_req_failed_rate: 0.05
      
  # Test data generation
  test_data:
    users_count: 1000
    workspaces_count: 100
    tables_count: 500
    records_count: 10000
    
  # Realistic scenarios
  user_behavior:
    think_time_min_ms: 1000
    think_time_max_ms: 4000
    session_duration_min: 300       # 5 minutes
    session_duration_max: 3600      # 1 hour

# Infrastructure Targets (MacBook Air M2)
infrastructure_targets:
  system:
    cpu_cores: 8                    # M2 CPU cores
    memory_gb: 16                   # Available memory
    disk_type: "SSD"                # Storage type
    network_bandwidth_mbps: 1000    # Network capacity
    
  docker:
    max_containers: 20
    memory_per_container_mb: 512
    network_mode: "bridge"
    
  # Resource allocation
  resource_allocation:
    database_memory_mb: 1024
    cache_memory_mb: 512
    services_memory_mb: 4096
    system_reserved_mb: 2048

# Validation Rules
validation_rules:
  # Performance requirements
  performance:
    - metric: "api_response_time_p95"
      operator: "<"
      value: 200
      unit: "ms"
      critical: true
      
    - metric: "frontend_load_time"
      operator: "<"
      value: 3000
      unit: "ms"
      critical: true
      
    - metric: "error_rate"
      operator: "<"
      value: 0.05
      unit: "ratio"
      critical: true
      
    - metric: "throughput"
      operator: ">"
      value: 500
      unit: "rps"
      critical: true
      
    - metric: "concurrent_users"
      operator: ">="
      value: 1000
      unit: "users"
      critical: true
  
  # Resource requirements
  resources:
    - metric: "cpu_utilization"
      operator: "<"
      value: 0.80
      unit: "ratio"
      critical: false
      
    - metric: "memory_utilization"
      operator: "<"
      value: 0.80
      unit: "ratio"
      critical: false
      
    - metric: "cache_hit_rate"
      operator: ">"
      value: 0.80
      unit: "ratio"
      critical: false

# Reporting Configuration
reporting:
  # Report formats
  formats:
    - "json"
    - "markdown"
    - "html"
    
  # Report sections
  sections:
    - "executive_summary"
    - "performance_metrics"
    - "load_test_results"
    - "resource_utilization"
    - "recommendations"
    - "historical_comparison"
    
  # Report distribution
  distribution:
    email_recipients: []
    slack_channels: []
    file_locations:
      - "./reports/"
      - "./artifacts/"

# Historical Performance Tracking
historical_tracking:
  enabled: true
  retention_days: 90
  baseline_metrics:
    - "api_response_time_p95"
    - "frontend_load_time"
    - "error_rate"
    - "throughput"
    - "cpu_utilization"
    - "memory_utilization"
    - "cache_hit_rate"
  
  # Performance regression detection
  regression_detection:
    enabled: true
    threshold_percentage: 10        # Alert if 10% degradation
    lookback_days: 7               # Compare with last 7 days average