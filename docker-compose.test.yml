version: '3.8'

services:
  # Test Database
  test-postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./migrations/000_create_test_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Redis
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    ports:
      - "6380:6379"
    command: redis-server --requirepass test_password
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Test Auth Service (for integration tests)
  test-auth-service:
    build:
      context: ./go-services/auth-service
      dockerfile: Dockerfile
    container_name: test-auth-service
    environment:
      - DATABASE_URL=postgres://test_user:test_password@test-postgres:5432/test_db?sslmode=disable
      - REDIS_URL=redis://:test_password@test-redis:6379
      - JWT_SECRET=test-jwt-secret-key-for-testing-only
      - SERVER_PORT=8004
      - LOG_LEVEL=info
      - ENVIRONMENT=test
    ports:
      - "8004:8004"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test API Gateway (for integration tests)
  test-api-gateway:
    build:
      context: ./go-services/api-gateway
      dockerfile: Dockerfile
    container_name: test-api-gateway
    environment:
      - AUTH_SERVICE_URL=http://test-auth-service:8004
      - LLM_ORCHESTRATOR_URL=http://test-llm-orchestrator:8003
      - AIRTABLE_GATEWAY_URL=http://test-airtable-gateway:8001
      - SERVER_PORT=8000
      - LOG_LEVEL=info
      - ENVIRONMENT=test
      - CORS_ALLOWED_ORIGINS=*
    ports:
      - "8000:8000"
    depends_on:
      test-auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test LLM Orchestrator (for integration tests)
  test-llm-orchestrator:
    build:
      context: ./python-services/llm-orchestrator
      dockerfile: Dockerfile
    container_name: test-llm-orchestrator
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_db
      - REDIS_URL=redis://:test_password@test-redis:6379
      - SERVER_PORT=8003
      - LOG_LEVEL=info
      - ENVIRONMENT=test
      - OPENAI_API_KEY=test-openai-key
      - ANTHROPIC_API_KEY=test-anthropic-key
      - GEMINI_API_KEY=test-gemini-key
    ports:
      - "8003:8003"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test Airtable Gateway (for integration tests)
  test-airtable-gateway:
    build:
      context: ./python-services/airtable-gateway
      dockerfile: Dockerfile
    container_name: test-airtable-gateway
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_db
      - REDIS_URL=redis://:test_password@test-redis:6379
      - SERVER_PORT=8001
      - LOG_LEVEL=info
      - ENVIRONMENT=test
      - AIRTABLE_API_URL=https://api.airtable.com/v0
    ports:
      - "8001:8001"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test MCP Server (for integration tests)
  test-mcp-server:
    build:
      context: ./python-services/mcp-server
      dockerfile: Dockerfile
    container_name: test-mcp-server
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_db
      - REDIS_URL=redis://:test_password@test-redis:6379
      - SERVER_PORT=8002
      - LOG_LEVEL=info
      - ENVIRONMENT=test
    ports:
      - "8002:8002"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test Runner (for running tests inside container)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    environment:
      - TEST_DATABASE_URL=postgresql://test_user:test_password@test-postgres:5432/test_db
      - TEST_REDIS_URL=redis://:test_password@test-redis:6379
      - API_GATEWAY_URL=http://test-api-gateway:8000
      - AUTH_SERVICE_URL=http://test-auth-service:8004
      - LLM_ORCHESTRATOR_URL=http://test-llm-orchestrator:8003
      - AIRTABLE_GATEWAY_URL=http://test-airtable-gateway:8001
      - MCP_SERVER_URL=http://test-mcp-server:8002
      - TEST_ENV=integration
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - test_reports:/app/reports
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-auth-service:
        condition: service_healthy
      test-api-gateway:
        condition: service_healthy
      test-llm-orchestrator:
        condition: service_healthy
      test-airtable-gateway:
        condition: service_healthy
      test-mcp-server:
        condition: service_healthy
    networks:
      - test-network
    command: ["tail", "-f", "/dev/null"]  # Keep container running

  # Database Admin (for test database management)
  test-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: test-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@test.com
      PGADMIN_DEFAULT_PASSWORD: test123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      test-postgres:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - debug  # Only start with --profile debug

  # Redis Admin (for Redis management)
  test-redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: test-redis-commander
    environment:
      REDIS_HOSTS: test-redis:test-redis:6379:0:test_password
    ports:
      - "8081:8081"
    depends_on:
      test-redis:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - debug  # Only start with --profile debug

networks:
  test-network:
    driver: bridge
    name: pyairtable-test-network

volumes:
  test_postgres_data:
    name: pyairtable-test-postgres
  test_redis_data:
    name: pyairtable-test-redis
  test_reports:
    name: pyairtable-test-reports