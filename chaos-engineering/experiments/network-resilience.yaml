apiVersion: chaos-mesh.org/v1alpha1
kind: Workflow
metadata:
  name: network-resilience-workflow
  namespace: chaos-engineering
spec:
  entry: network-resilience-test
  templates:
    - name: network-resilience-test
      templateType: Serial
      deadline: 20m
      children:
        - baseline-check
        - network-delay-test
        - network-partition-test
        - packet-loss-test
        - recovery-validation
    
    - name: baseline-check
      templateType: Task
      deadline: 2m
      task:
        container:
          name: baseline
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "📊 Establishing network baseline"
              start_time=$(date +%s)
              
              for i in {1..5}; do
                curl -w "Response time: %{time_total}s\n" -s -o /dev/null \
                  http://api-gateway.pyairtable.svc.cluster.local:8080/health
                sleep 1
              done
              
              end_time=$(date +%s)
              echo "✅ Baseline established in $((end_time - start_time)) seconds"
    
    - name: network-delay-test
      templateType: Parallel
      deadline: 8m
      children:
        - inject-api-gateway-delay
        - monitor-delay-impact
    
    - name: inject-api-gateway-delay
      templateType: Task
      deadline: 6m
      task:
        networkChaos:
          action: delay
          mode: one
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "app": "api-gateway"
          delay:
            latency: "500ms"
            correlation: "100"
            jitter: "100ms"
          duration: "5m"
    
    - name: monitor-delay-impact
      templateType: Task
      deadline: 7m
      task:
        container:
          name: delay-monitor
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "📡 Monitoring network delay impact"
              sleep 30  # Wait for delay injection
              
              echo "Testing API response times under delay..."
              for i in {1..10}; do
                start=$(date +%s%N)
                if curl -f -m 10 http://api-gateway.pyairtable.svc.cluster.local:8080/health > /dev/null; then
                  end=$(date +%s%N)
                  duration=$(( (end - start) / 1000000 ))
                  echo "Request $i: ${duration}ms"
                  
                  if [ "$duration" -gt 2000 ]; then
                    echo "⚠️ High latency detected: ${duration}ms"
                  fi
                else
                  echo "❌ Request $i failed"
                fi
                sleep 30
              done
    
    - name: network-partition-test
      templateType: Task
      deadline: 5m
      task:
        networkChaos:
          action: partition
          mode: all
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "app": "auth-service"
          direction: to
          target:
            mode: all
            selector:
              namespaces:
                - pyairtable
              labelSelectors:
                "app": "platform-services"
          duration: "3m"
    
    - name: packet-loss-test
      templateType: Task
      deadline: 4m
      task:
        networkChaos:
          action: loss
          mode: one
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "tier": "backend"
          loss:
            loss: "15"
            correlation: "100"
          duration: "3m"
    
    - name: recovery-validation
      templateType: Task
      deadline: 3m
      task:
        container:
          name: recovery-validator
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "🔄 Validating network recovery"
              sleep 60  # Allow network recovery
              
              echo "Testing post-chaos network performance..."
              for i in {1..5}; do
                start=$(date +%s%N)
                if curl -f -m 5 http://api-gateway.pyairtable.svc.cluster.local:8080/health > /dev/null; then
                  end=$(date +%s%N)
                  duration=$(( (end - start) / 1000000 ))
                  echo "Recovery test $i: ${duration}ms"
                  
                  if [ "$duration" -lt 1000 ]; then
                    echo "✅ Network performance restored"
                  fi
                else
                  echo "❌ Recovery test $i failed"
                fi
                sleep 10
              done
              
              echo "🎉 Network resilience test completed"