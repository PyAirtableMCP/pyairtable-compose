apiVersion: chaos-mesh.org/v1alpha1
kind: Workflow
metadata:
  name: resilience-testing-workflow
  namespace: chaos-engineering
spec:
  entry: resilience-test-suite
  templates:
    - name: resilience-test-suite
      templateType: Serial
      deadline: 45m
      children:
        - baseline-establishment
        - circuit-breaker-test
        - retry-mechanism-test
        - fallback-mechanism-test
        - bulkhead-isolation-test
        - timeout-handling-test
        - graceful-degradation-test
        - final-validation
    
    - name: baseline-establishment
      templateType: Task
      deadline: 5m
      task:
        container:
          name: baseline
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üìä Establishing resilience baseline"
              
              # Test normal operation
              for i in {1..10}; do
                start=$(date +%s%N)
                if curl -f -m 5 http://api-gateway.pyairtable.svc.cluster.local:8080/health; then
                  end=$(date +%s%N)
                  duration=$(( (end - start) / 1000000 ))
                  echo "Baseline request $i: ${duration}ms"
                else
                  echo "‚ùå Baseline request $i failed"
                fi
                sleep 2
              done
              
              echo "‚úÖ Baseline established"
    
    - name: circuit-breaker-test
      templateType: Serial
      deadline: 8m
      children:
        - inject-downstream-failure
        - test-circuit-breaker-activation
        - test-circuit-breaker-recovery
    
    - name: inject-downstream-failure
      templateType: Task
      deadline: 3m
      task:
        podchaos:
          action: pod-failure
          mode: one
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "tier": "backend"
          duration: "2m"
    
    - name: test-circuit-breaker-activation
      templateType: Task
      deadline: 3m
      task:
        container:
          name: circuit-breaker-test
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üîå Testing circuit breaker activation"
              
              # Send requests to trigger circuit breaker
              failed_requests=0
              total_requests=20
              
              for i in $(seq 1 $total_requests); do
                if ! curl -f -m 3 http://api-gateway.pyairtable.svc.cluster.local:8080/api/test 2>/dev/null; then
                  ((failed_requests++))
                  echo "Request $i failed (expected during circuit breaker activation)"
                else
                  echo "Request $i succeeded"
                fi
                sleep 5
              done
              
              failure_rate=$(( failed_requests * 100 / total_requests ))
              echo "üìä Failure rate during injection: ${failure_rate}%"
              
              if [ $failure_rate -gt 50 ]; then
                echo "‚úÖ Circuit breaker appears to be working (high failure rate detected)"
              else
                echo "‚ö†Ô∏è Circuit breaker may not be working properly"
              fi
    
    - name: test-circuit-breaker-recovery
      templateType: Task
      deadline: 4m
      task:
        container:
          name: circuit-breaker-recovery
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üîÑ Testing circuit breaker recovery"
              
              # Wait for services to recover
              sleep 60
              
              # Test recovery
              success_requests=0
              total_requests=10
              
              for i in $(seq 1 $total_requests); do
                if curl -f -m 5 http://api-gateway.pyairtable.svc.cluster.local:8080/health 2>/dev/null; then
                  ((success_requests++))
                  echo "Recovery test $i: SUCCESS"
                else
                  echo "Recovery test $i: FAILED"
                fi
                sleep 10
              done
              
              recovery_rate=$(( success_requests * 100 / total_requests ))
              echo "üìä Recovery rate: ${recovery_rate}%"
              
              if [ $recovery_rate -gt 80 ]; then
                echo "‚úÖ Circuit breaker recovery successful"
              else
                echo "‚ùå Circuit breaker recovery failed"
              fi
    
    - name: retry-mechanism-test
      templateType: Parallel
      deadline: 10m
      children:
        - inject-intermittent-failures
        - monitor-retry-behavior
    
    - name: inject-intermittent-failures
      templateType: Task
      deadline: 8m
      task:
        networkchaos:
          action: loss
          mode: fixed-percent
          value: "30"
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "app": "platform-services"
          loss:
            loss: "30"
            correlation: "100"
          duration: "6m"
    
    - name: monitor-retry-behavior
      templateType: Task
      deadline: 9m
      task:
        container:
          name: retry-monitor
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üîÑ Testing retry mechanisms"
              
              sleep 30  # Wait for network chaos to take effect
              
              # Test retry behavior
              successful_retries=0
              total_attempts=15
              
              for i in $(seq 1 $total_attempts); do
                echo "Testing retry attempt $i..."
                
                # Make request with retries (simulate application retry logic)
                retry_count=0
                max_retries=3
                
                while [ $retry_count -lt $max_retries ]; do
                  if curl -f -m 10 http://api-gateway.pyairtable.svc.cluster.local:8080/api/test 2>/dev/null; then
                    echo "  Attempt $i succeeded on retry $retry_count"
                    ((successful_retries++))
                    break
                  else
                    ((retry_count++))
                    echo "  Retry $retry_count failed, waiting..."
                    sleep 2
                  fi
                done
                
                if [ $retry_count -eq $max_retries ]; then
                  echo "  Attempt $i failed after all retries"
                fi
                
                sleep 20
              done
              
              retry_success_rate=$(( successful_retries * 100 / total_attempts ))
              echo "üìä Retry success rate: ${retry_success_rate}%"
              
              if [ $retry_success_rate -gt 60 ]; then
                echo "‚úÖ Retry mechanism working effectively"
              else
                echo "‚ö†Ô∏è Retry mechanism may need improvement"
              fi
    
    - name: fallback-mechanism-test
      templateType: Task
      deadline: 6m
      task:
        container:
          name: fallback-test
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üîÄ Testing fallback mechanisms"
              
              # Test fallback to cached data
              echo "Testing cached data fallback..."
              
              # Simulate primary service failure and test fallback
              fallback_responses=0
              total_tests=10
              
              for i in $(seq 1 $total_tests); do
                # Test endpoint that should return cached/fallback data
                response=$(curl -s -m 5 http://api-gateway.pyairtable.svc.cluster.local:8080/api/cached-test || echo "FALLBACK_RESPONSE")
                
                if echo "$response" | grep -q "FALLBACK\|cached\|default"; then
                  ((fallback_responses++))
                  echo "Test $i: Fallback response detected"
                else
                  echo "Test $i: Normal response"
                fi
                
                sleep 10
              done
              
              fallback_rate=$(( fallback_responses * 100 / total_tests ))
              echo "üìä Fallback activation rate: ${fallback_rate}%"
              
              echo "‚úÖ Fallback mechanism test completed"
    
    - name: bulkhead-isolation-test
      templateType: Task
      deadline: 8m
      task:
        stresschaos:
          mode: one
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "component": "non-critical"
          stressors:
            cpu:
              workers: 4
              load: 100
            memory:
              workers: 1
              size: "512MB"
          duration: "6m"
    
    - name: timeout-handling-test
      templateType: Task
      deadline: 6m
      task:
        networkchaos:
          action: delay
          mode: one
          selector:
            namespaces:
              - pyairtable
            labelSelectors:
              "app": "auth-service"
          delay:
            latency: "10s"
            correlation: "100"
            jitter: "2s"
          duration: "4m"
    
    - name: graceful-degradation-test
      templateType: Task
      deadline: 8m
      task:
        container:
          name: degradation-test
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üìâ Testing graceful degradation"
              
              # Test that system provides reduced functionality instead of complete failure
              degraded_responses=0
              total_tests=12
              
              for i in $(seq 1 $total_tests); do
                response_code=$(curl -s -o /dev/null -w "%{http_code}" -m 5 http://api-gateway.pyairtable.svc.cluster.local:8080/api/health || echo "000")
                
                case $response_code in
                  200)
                    echo "Test $i: Full functionality"
                    ;;
                  206|202)
                    echo "Test $i: Degraded functionality (expected)"
                    ((degraded_responses++))
                    ;;
                  503|502|500)
                    echo "Test $i: Service unavailable"
                    ;;
                  *)
                    echo "Test $i: Unexpected response code: $response_code"
                    ;;
                esac
                
                sleep 30
              done
              
              echo "üìä Degraded responses: ${degraded_responses}/${total_tests}"
              echo "‚úÖ Graceful degradation test completed"
    
    - name: final-validation
      templateType: Task
      deadline: 5m
      task:
        container:
          name: final-validation
          image: curlimages/curl:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üèÅ Final resilience validation"
              
              # Wait for all chaos to end
              sleep 60
              
              # Final health check
              healthy_services=0
              total_services=3
              services=("api-gateway:8080" "auth-service:8081" "platform-services:8000")
              
              for service in "${services[@]}"; do
                IFS=':' read -r name port <<< "$service"
                
                if curl -f -m 10 "http://${name}.pyairtable.svc.cluster.local:${port}/health" &>/dev/null; then
                  echo "‚úÖ ${name}: Healthy"
                  ((healthy_services++))
                else
                  echo "‚ùå ${name}: Unhealthy"
                fi
              done
              
              recovery_rate=$(( healthy_services * 100 / total_services ))
              echo "üìä Final recovery rate: ${recovery_rate}%"
              
              if [ $recovery_rate -eq 100 ]; then
                echo "üéâ Resilience testing completed successfully!"
                echo "‚úÖ All services recovered from chaos experiments"
              else
                echo "‚ö†Ô∏è Some services did not fully recover"
                echo "Manual investigation may be required"
              fi