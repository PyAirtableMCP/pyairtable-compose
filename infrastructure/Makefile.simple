# Simple PyAirtable Infrastructure Management
# Designed for a 2-person team

.PHONY: help init plan apply destroy logs deploy-service

# Default environment
ENV ?= dev

# Colors
BLUE := \033[0;34m
GREEN := \033[0;32m
RED := \033[0;31m
NC := \033[0m

help: ## Show this help
	@echo "$(BLUE)PyAirtable Infrastructure Management$(NC)"
	@echo ""
	@echo "$(GREEN)Usage:$(NC)"
	@echo "  make <target> [ENV=dev|prod]"
	@echo ""
	@echo "$(GREEN)Available targets:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

init: ## Initialize Terraform
	@echo "$(BLUE)Initializing Terraform for $(ENV)...$(NC)"
	@cd terraform && terraform init -backend-config=backend-config.hcl
	@cd terraform && terraform workspace select $(ENV) || terraform workspace new $(ENV)

plan: init ## Plan infrastructure changes
	@echo "$(BLUE)Planning infrastructure for $(ENV)...$(NC)"
	@cd terraform && terraform plan -var-file=environments/$(ENV).tfvars

apply: init ## Apply infrastructure changes
	@echo "$(BLUE)Applying infrastructure for $(ENV)...$(NC)"
	@cd terraform && terraform apply -var-file=environments/$(ENV).tfvars

destroy: init ## Destroy infrastructure (DANGEROUS)
	@echo "$(RED)WARNING: This will destroy all infrastructure for $(ENV)!$(NC)"
	@read -p "Type '$(ENV)-destroy' to confirm: " confirm && [ "$$confirm" = "$(ENV)-destroy" ]
	@cd terraform && terraform destroy -var-file=environments/$(ENV).tfvars

# Quick deployment commands
deploy-dev: ENV=dev
deploy-dev: apply ## Quick deploy to dev

deploy-prod: ENV=prod
deploy-prod: ## Deploy to production (with confirmation)
	@echo "$(RED)Deploying to PRODUCTION$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; echo; if [[ ! $$REPLY =~ ^[Yy]$$ ]]; then exit 1; fi
	@$(MAKE) apply ENV=prod

# Service management
SERVICE ?= api-gateway
CLUSTER_NAME := pyairtable-$(ENV)-cluster
SERVICE_NAME := pyairtable-$(ENV)-$(SERVICE)

logs: ## View service logs (SERVICE=service-name ENV=dev|prod)
	@echo "$(BLUE)Fetching logs for $(SERVICE) in $(ENV)...$(NC)"
	@aws logs tail "/ecs/pyairtable-$(ENV)" --follow --filter-pattern "$(SERVICE)"

restart-service: ## Restart a specific service
	@echo "$(BLUE)Restarting $(SERVICE) in $(ENV)...$(NC)"
	@aws ecs update-service --cluster $(CLUSTER_NAME) --service $(SERVICE_NAME) --force-new-deployment

scale-service: ## Scale a service (REPLICAS=2)
	@test -n "$(REPLICAS)" || (echo "$(RED)REPLICAS required. Usage: make scale-service SERVICE=api-gateway REPLICAS=2$(NC)" && exit 1)
	@echo "$(BLUE)Scaling $(SERVICE) to $(REPLICAS) replicas in $(ENV)...$(NC)"
	@aws ecs update-service --cluster $(CLUSTER_NAME) --service $(SERVICE_NAME) --desired-count $(REPLICAS)

# Container deployment
ECR_REGISTRY := $(shell cd terraform && terraform output -raw ecr_repositories 2>/dev/null | jq -r '.["$(SERVICE)"]' | cut -d'/' -f1)

docker-login: ## Login to ECR
	@echo "$(BLUE)Logging into ECR...$(NC)"
	@aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $(ECR_REGISTRY)

deploy-service: docker-login ## Deploy a service container (SERVICE=service-name)
	@test -n "$(SERVICE)" || (echo "$(RED)SERVICE required. Usage: make deploy-service SERVICE=api-gateway$(NC)" && exit 1)
	@echo "$(BLUE)Deploying $(SERVICE) to $(ENV)...$(NC)"
	
	# Build and tag
	@cd ../$(SERVICE) && docker build -t pyairtable-$(SERVICE) .
	@docker tag pyairtable-$(SERVICE):latest $(shell cd terraform && terraform output -raw ecr_repositories | jq -r '.["$(SERVICE)"]'):latest
	
	# Push to ECR
	@docker push $(shell cd terraform && terraform output -raw ecr_repositories | jq -r '.["$(SERVICE)"]'):latest
	
	# Update ECS service
	@aws ecs update-service --cluster $(CLUSTER_NAME) --service $(SERVICE_NAME) --force-new-deployment
	@echo "$(GREEN)Service $(SERVICE) deployed to $(ENV)$(NC)"

# Utility commands
outputs: init ## Show Terraform outputs
	@cd terraform && terraform output

status: ## Show infrastructure status
	@echo "$(BLUE)Infrastructure Status for $(ENV):$(NC)"
	@cd terraform && terraform output application_url
	@echo ""
	@echo "$(BLUE)ECS Services:$(NC)"
	@aws ecs list-services --cluster $(CLUSTER_NAME) --query 'serviceArns[*]' --output table

health: ## Check service health
	@echo "$(BLUE)Checking service health for $(ENV)...$(NC)"
	@URL=$$(cd terraform && terraform output -raw application_url 2>/dev/null); \
	for service in api-gateway mcp-server airtable-gateway platform-services automation-services; do \
		echo -n "$$service: "; \
		curl -s -o /dev/null -w "%{http_code}" $$URL/$$service/health || echo "Failed to connect"; \
		echo ""; \
	done

# Database operations
db-connect: ## Connect to database (requires psql)
	@echo "$(BLUE)Connecting to $(ENV) database...$(NC)"
	@DB_URL=$$(aws ssm get-parameter --name "/pyairtable/$(ENV)/database-url" --with-decryption --query 'Parameter.Value' --output text); \
	psql "$$DB_URL"

db-backup: ## Create manual database backup
	@echo "$(BLUE)Creating database backup for $(ENV)...$(NC)"
	@aws rds create-db-snapshot \
		--db-instance-identifier pyairtable-$(ENV) \
		--db-snapshot-identifier pyairtable-$(ENV)-manual-$$(date +%Y%m%d-%H%M%S)

# Monitoring
dashboard: ## Open CloudWatch dashboard
	@echo "$(BLUE)CloudWatch Dashboard URL:$(NC)"
	@echo "https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=pyairtable-$(ENV)"

# Cleanup
clean: ## Clean up local files
	@echo "$(BLUE)Cleaning up local files...$(NC)"
	@cd terraform && rm -f *.tfplan
	@docker system prune -f

# Setup helpers
setup-secrets: ## Setup common secrets in Parameter Store
	@echo "$(BLUE)Setting up secrets for $(ENV)...$(NC)"
	@read -p "OpenAI API Key: " openai_key && \
	aws ssm put-parameter --name "/pyairtable/$(ENV)/openai-api-key" --type "SecureString" --value "$$openai_key" || true
	@read -p "Airtable API Key: " airtable_key && \
	aws ssm put-parameter --name "/pyairtable/$(ENV)/airtable-api-key" --type "SecureString" --value "$$airtable_key" || true
	@echo "$(GREEN)Secrets configured$(NC)"

# Initial setup
setup: ## One-time setup (creates S3 bucket and backend config)
	@echo "$(BLUE)Setting up Terraform backend...$(NC)"
	@aws s3 mb s3://pyairtable-terraform-state --region us-east-1 || true
	@aws s3api put-bucket-versioning --bucket pyairtable-terraform-state --versioning-configuration Status=Enabled || true
	@echo 'bucket = "pyairtable-terraform-state"' > terraform/backend-config.hcl
	@echo 'key    = "terraform.tfstate"' >> terraform/backend-config.hcl
	@echo 'region = "us-east-1"' >> terraform/backend-config.hcl
	@echo "$(GREEN)Backend configured$(NC)"
	@echo "$(YELLOW)Now run: make apply ENV=dev$(NC)"

# Examples
example-deploy: ## Example: Full deployment workflow
	@echo "$(BLUE)Example deployment workflow:$(NC)"
	@echo "1. make setup                    # One-time setup"
	@echo "2. make apply ENV=dev           # Deploy dev infrastructure"
	@echo "3. make setup-secrets ENV=dev   # Configure secrets"
	@echo "4. make deploy-service SERVICE=api-gateway ENV=dev  # Deploy service"
	@echo "5. make health ENV=dev          # Check health"