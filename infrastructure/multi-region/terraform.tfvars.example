# Multi-Region Infrastructure Configuration
# Copy this file to terraform.tfvars and customize for your environment

# Project Configuration
project_name = "pyairtable"
environment  = "prod"
domain_name  = "api.pyairtable.com"

# Regional Configuration
primary_region     = "us-east-1"
secondary_regions  = ["eu-west-1", "ap-southeast-1"]

# Service Configuration
services = [
  "frontend",
  "api-gateway", 
  "llm-orchestrator",
  "mcp-server",
  "airtable-gateway",
  "platform-services",
  "automation-services"
]

# Database Configuration
enable_rds                    = true
db_instance_class_primary     = "db.r6g.xlarge"
db_instance_class_secondary   = "db.r6g.large"
db_allocated_storage         = 200
db_max_allocated_storage     = 2000
backup_retention_period      = 30
backup_window               = "03:00-04:00"
maintenance_window          = "sun:04:00-sun:05:00"

# Redis Configuration
enable_elasticache          = true
redis_node_type            = "cache.r6g.large"
redis_num_cache_nodes      = 3
redis_parameter_group_name = "default.redis7"

# Kafka Configuration
enable_msk              = true
kafka_instance_type     = "kafka.m5.large"
kafka_ebs_volume_size   = 100
kafka_version          = "2.8.1"

# CloudFront and CDN Configuration
enable_cloudfront                   = true
cloudfront_price_class             = "PriceClass_All"
cloudfront_minimum_protocol_version = "TLSv1.2_2021"

# SSL/TLS Certificates (replace with your actual certificate ARNs)
certificate_arn    = "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
certificate_arn_eu = "arn:aws:acm:eu-west-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
certificate_arn_ap = "arn:aws:acm:ap-southeast-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"

# Monitoring and Alerting
alert_email           = "ops-team@yourcompany.com"
slack_webhook_url     = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
log_retention_days    = 30
enable_detailed_monitoring = true

# Disaster Recovery Configuration
failover_threshold_seconds = 300
auto_failover_enabled     = false  # Set to true for automatic failover
rpo_minutes              = 15
rto_minutes              = 30

# Security Configuration
enable_encryption_at_rest     = true
enable_encryption_in_transit  = true
enable_vpc_flow_logs         = true
enable_waf                   = true

# Cost Optimization
enable_spot_instances           = false  # Set to true for non-prod environments
enable_cost_anomaly_detection   = true
monthly_budget_limit           = 10000  # USD

# Compliance and Data Residency
enable_gdpr_compliance = true
data_classification_tags = {
  "DataClassification"   = "Internal"
  "DataRetention"       = "7years"
  "ComplianceFramework" = "GDPR,SOC2,ISO27001"
  "DataResidency"       = "Required"
}

# Performance Configuration
enable_auto_scaling           = true
target_cpu_utilization       = 70
target_memory_utilization     = 80

# Network Configuration
enable_transit_gateway = true
enable_private_link   = true

# Kubernetes Configuration
enable_eks                    = true
eks_version                  = "1.28"
eks_node_group_instance_types = ["m5.large", "m5.xlarge"]
eks_node_group_scaling_config = {
  desired_size = 3
  max_size     = 10
  min_size     = 1
}

# Environment-specific overrides
environment_configs = {
  dev = {
    min_capacity               = 1
    max_capacity               = 2
    enable_autoscaling         = false
    enable_deletion_protection = false
  }
  staging = {
    min_capacity               = 1
    max_capacity               = 4
    enable_autoscaling         = true
    enable_deletion_protection = false
  }
  prod = {
    min_capacity               = 2
    max_capacity               = 10
    enable_autoscaling         = true
    enable_deletion_protection = true
  }
}

# Service-specific configurations
service_configs = {
  frontend = {
    port              = 3000
    cpu               = 256
    memory            = 512
    desired_count     = 2
    health_check_path = "/api/health"
    priority          = 100
  }
  api-gateway = {
    port              = 8000
    cpu               = 512
    memory            = 1024
    desired_count     = 2
    health_check_path = "/health"
    priority          = 200
  }
  llm-orchestrator = {
    port              = 8003
    cpu               = 1024
    memory            = 2048
    desired_count     = 2
    health_check_path = "/health"
    priority          = 300
  }
  mcp-server = {
    port              = 8001
    cpu               = 512
    memory            = 1024
    desired_count     = 2
    health_check_path = "/health"
    priority          = 400
  }
  airtable-gateway = {
    port              = 8002
    cpu               = 256
    memory            = 512
    desired_count     = 2
    health_check_path = "/health"
    priority          = 500
  }
  platform-services = {
    port              = 8007
    cpu               = 512
    memory            = 1024
    desired_count     = 2
    health_check_path = "/health"
    priority          = 600
  }
  automation-services = {
    port              = 8006
    cpu               = 512
    memory            = 1024
    desired_count     = 2
    health_check_path = "/health"
    priority          = 700
  }
}

# Tags to apply to all resources
tags = {
  Project          = "PyAirtable"
  Environment      = "prod"
  ManagedBy        = "Terraform"
  Owner           = "Platform Team"
  CostCenter      = "Engineering"
  BusinessUnit    = "Platform"
  Application     = "PyAirtable"
  Criticality     = "High"
  BackupRequired  = "true"
  MonitoringLevel = "enhanced"
}