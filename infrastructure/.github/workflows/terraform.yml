# Terraform CI/CD Pipeline
# Automated infrastructure deployment with security scanning and testing

name: Terraform Infrastructure

on:
  push:
    branches: [main, develop]
    paths: ['infrastructure/**']
  pull_request:
    branches: [main]
    paths: ['infrastructure/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.5.0'
  AWS_DEFAULT_REGION: 'us-east-1'
  TF_IN_AUTOMATION: 'true'
  TF_INPUT: 'false'

jobs:
  # Security and compliance checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          
      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform
          format: sarif
          sarif_file: tfsec.sarif

      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: tfsec.sarif

  # Terraform validation and formatting
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          cd infrastructure/terraform
          tflint --init
          tflint --recursive

  # Cost estimation
  cost:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Generate cost diff
        run: |
          cd infrastructure/terraform
          infracost diff --path=. \
            --terraform-var-file=environments/dev/terraform.tfvars \
            --format=json \
            --out-file=/tmp/infracost.json

      - name: Post cost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
            --repo=$GITHUB_REPOSITORY \
            --github-token=${{ secrets.GITHUB_TOKEN }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --behavior=update

  # Development environment
  dev:
    name: Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    needs: [security, validate]
    environment: development
    concurrency: 
      group: terraform-dev
      cancel-in-progress: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/dev/backend.hcl

      - name: Select Workspace
        run: |
          cd infrastructure/terraform
          terraform workspace select dev || terraform workspace new dev

      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/dev/terraform.tfvars -out=tfplan-dev
          terraform show -no-color tfplan-dev > plan.txt

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform/plan.txt', 'utf8');
            const maxGitHubBodyCharacters = 65536;
            
            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            
            const body = 'Terraform Plan (Development)\n```\n' + plan + '\n```';
            
            if (body.length > maxGitHubBodyCharacters) {
              const chunks = chunkSubstr(body, maxGitHubBodyCharacters);
              for (let i = 0; i < chunks.length; i++) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `Terraform Plan (Development) - Part ${i + 1}/${chunks.length}\n\`\`\`\n${chunks[i]}\n\`\`\``
                });
              }
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan-dev

      - name: Save Terraform Outputs
        if: success()
        run: |
          cd infrastructure/terraform
          terraform output -json > terraform-outputs-dev.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: terraform-outputs-dev
          path: infrastructure/terraform/terraform-outputs-dev.json

  # Staging environment
  staging:
    name: Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    needs: [security, validate]
    environment: staging
    concurrency: 
      group: terraform-staging
      cancel-in-progress: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/staging/backend.hcl

      - name: Select Workspace
        run: |
          cd infrastructure/terraform
          terraform workspace select staging || terraform workspace new staging

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/staging/terraform.tfvars -out=tfplan-staging

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan-staging

  # Production environment
  production:
    name: Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    needs: [security, validate, staging]
    environment: production
    concurrency: 
      group: terraform-prod
      cancel-in-progress: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/prod/backend.hcl

      - name: Select Workspace
        run: |
          cd infrastructure/terraform
          terraform workspace select prod || terraform workspace new prod

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/prod/terraform.tfvars -out=tfplan-prod

      - name: Manual Approval Required
        if: github.event.inputs.action == 'apply'
        run: |
          echo "Manual approval required for production deployment"
          echo "Plan has been generated and is ready for review"

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan-prod

      - name: Notify Deployment
        if: success() && github.event.inputs.action == 'apply'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#infrastructure'
          text: 'Production infrastructure deployment completed successfully'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup destroyed resources
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/${{ github.event.inputs.environment }}/backend.hcl

      - name: Select Workspace
        run: |
          cd infrastructure/terraform
          terraform workspace select ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        run: |
          cd infrastructure/terraform
          terraform destroy -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars -auto-approve

  # Drift detection
  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/${{ matrix.environment }}/backend.hcl

      - name: Select Workspace
        run: |
          cd infrastructure/terraform
          terraform workspace select ${{ matrix.environment }}

      - name: Detect Drift
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/${{ matrix.environment }}/terraform.tfvars -detailed-exitcode
        continue-on-error: true
        id: drift

      - name: Notify Drift Detected
        if: steps.drift.outcome == 'failure' && steps.drift.conclusion == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#infrastructure'
          text: 'Infrastructure drift detected in ${{ matrix.environment }} environment'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}