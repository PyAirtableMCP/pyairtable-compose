name: Deploy EKS Infrastructure

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/aws-eks/**'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/aws-eks/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "us-west-2"
  
jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: infrastructure/aws-eks
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init -backend=false
        working-directory: infrastructure/aws-eks

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infrastructure/aws-eks

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results
            
            ### Format Check üñå
            \`${{ steps.fmt.outcome }}\`
            
            ### Initialization ‚öôÔ∏è
            \`${{ steps.init.outcome }}\`
            
            ### Validation ü§ñ
            \`${{ steps.validate.outcome }}\`
            
            <details><summary>Show Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/aws-eks
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/aws-eks
          framework: terraform
          soft_fail: true
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=pyairtable/eks/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
        working-directory: infrastructure/aws-eks

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -out=tfplan \
            -no-color
        working-directory: infrastructure/aws-eks
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/aws-eks/tfplan
          retention-days: 5

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Plan Results for \`${{ matrix.environment }}\`
            
            ### Plan Status üìã
            \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            ### Cost Estimation üí∞
            This plan will be analyzed for cost implications using Infracost.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-dev
          path: infrastructure/aws-eks/

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost breakdown
        run: |
          infracost breakdown \
            --path=infrastructure/aws-eks/tfplan \
            --format=json \
            --out-file=/tmp/infracost-base.json

      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        run: |
          infracost comment github \
            --path=/tmp/infracost-base.json \
            --repo=$GITHUB_REPOSITORY \
            --github-token=${{ github.token }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --behavior=update

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.action == 'apply')
    
    strategy:
      matrix:
        environment:
          - ${{ github.event_name == 'push' && 'dev' || inputs.environment }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=pyairtable/eks/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
        working-directory: infrastructure/aws-eks

      - name: Download Plan Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/aws-eks/

      - name: Terraform Apply
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            terraform apply -auto-approve tfplan
          else
            terraform apply -auto-approve -var-file="environments/${{ matrix.environment }}.tfvars"
          fi
        working-directory: infrastructure/aws-eks

      - name: Update kubeconfig
        if: success()
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name pyairtable-${{ matrix.environment }}-eks

      - name: Verify deployment
        if: success()
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces
          helm list --all-namespaces

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'push') {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                description: 'EKS infrastructure deployed successfully',
                context: 'terraform/apply'
              })
            }

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'destroy'
    
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=pyairtable/eks/${{ inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
        working-directory: infrastructure/aws-eks

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -var-file="environments/${{ inputs.environment }}.tfvars"
        working-directory: infrastructure/aws-eks

  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event.schedule
    
    strategy:
      matrix:
        environment: [dev, staging, production]
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=pyairtable/eks/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
        working-directory: infrastructure/aws-eks

      - name: Check for drift
        id: drift
        run: |
          terraform plan -var-file="environments/${{ matrix.environment }}.tfvars" -detailed-exitcode
        working-directory: infrastructure/aws-eks
        continue-on-error: true

      - name: Create drift issue
        if: steps.drift.outputs.exitcode == '2'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Infrastructure Drift Detected - ${{ matrix.environment }}`;
            const body = `
            ## Infrastructure Drift Detected
            
            **Environment:** \`${{ matrix.environment }}\`
            **Detection Time:** ${{ github.run_started_at }}
            
            Terraform has detected changes in the infrastructure that are not reflected in the current state.
            
            ### Next Steps
            1. Review the drift details in the workflow logs
            2. Determine if changes are expected or if manual intervention occurred
            3. Either update the Terraform configuration or apply to restore desired state
            
            ### Workflow Run
            [View drift detection run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'drift-detection', '${{ matrix.environment }}']
            })

# Schedule drift detection to run daily at 6 AM UTC
on:
  schedule:
    - cron: '0 6 * * *'