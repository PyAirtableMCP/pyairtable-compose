# PyAirtable Platform Prometheus Configuration
# Comprehensive monitoring with service discovery and auto-scaling awareness

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'pyairtable-platform'
    environment: '${ENVIRONMENT:-development}'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules for alerting
rule_files:
  - "alert_rules.yml"

# Scrape configuration with service discovery
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 15s

  # === APPLICATION SERVICES ===
  
  # API Gateway (Main entry point)
  - job_name: 'api-gateway'
    static_configs:
      - targets: ['api-gateway:8000']
    metrics_path: '/metrics'
    scrape_interval: 10s
    scrape_timeout: 5s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'api-gateway'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'gateway'

  # LLM Orchestrator (AI/ML service)
  - job_name: 'llm-orchestrator'
    static_configs:
      - targets: ['llm-orchestrator:8003']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'llm-orchestrator'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'ai-ml'
      - source_labels: [__address__]
        target_label: cost_center
        replacement: 'ai-compute'

  # MCP Server (Protocol implementation)
  - job_name: 'mcp-server'
    static_configs:
      - targets: ['mcp-server:8001']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'mcp-server'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'protocol'

  # Airtable Gateway (External API integration)
  - job_name: 'airtable-gateway'
    static_configs:
      - targets: ['airtable-gateway:8002']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'airtable-gateway'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'integration'

  # Platform Services (Auth, Analytics)
  - job_name: 'platform-services'
    static_configs:
      - targets: ['platform-services:8007']
    metrics_path: '/metrics'
    scrape_interval: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'platform-services'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'platform'

  # Automation Services (Workflows, Files)
  - job_name: 'automation-services'
    static_configs:
      - targets: ['automation-services:8006']
    metrics_path: '/metrics'
    scrape_interval: 20s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'automation-services'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'automation'

  # SAGA Orchestrator (Distributed transactions)
  - job_name: 'saga-orchestrator'
    static_configs:
      - targets: ['saga-orchestrator:8008']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'saga-orchestrator'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'orchestration'
      - source_labels: [__address__]
        target_label: component
        replacement: 'saga-engine'

  # Frontend (Next.js)
  - job_name: 'frontend'
    static_configs:
      - targets: ['frontend:3000']
    metrics_path: '/api/metrics'
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'frontend'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'frontend'

  # === INFRASTRUCTURE SERVICES ===
  
  # PostgreSQL Database
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'postgres'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'database'

  # Redis Cache
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 20s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'redis'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'cache'

  # === OBSERVABILITY STACK ===
  
  # OpenTelemetry Collector
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8888']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'otel-collector'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'observability'

  # Jaeger (Tracing)
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger-all-in-one:14269']
    metrics_path: '/metrics'
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'jaeger'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'observability'

  # Elasticsearch (Logging)
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']
    metrics_path: '/_prometheus/metrics'
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'elasticsearch'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'logging'

  # === SYSTEM MONITORING ===
  
  # Node/Host metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'node-exporter'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'system'

  # Container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'cadvisor'
      - source_labels: [__address__]
        target_label: tier
        replacement: 'system'

  # === DOCKER SERVICE DISCOVERY ===
  # Automatic discovery of services with proper labels
  - job_name: 'docker-services'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 30s
        port: 8080
    relabel_configs:
      # Only scrape containers with prometheus.scrape=true label
      - source_labels: [__meta_docker_container_label_prometheus_scrape]
        regex: true
        action: keep
      # Use custom port if specified
      - source_labels: [__meta_docker_container_label_prometheus_port]
        regex: (.+)
        target_label: __address__
        replacement: '${1}'
      # Use custom path if specified
      - source_labels: [__meta_docker_container_label_prometheus_path]
        regex: (.+)
        target_label: __metrics_path__
        replacement: '${1}'
      # Use container name as instance
      - source_labels: [__meta_docker_container_name]
        regex: /(.*)
        target_label: instance
        replacement: '${1}'
      # Add service label from container label
      - source_labels: [__meta_docker_container_label_service]
        target_label: service
      # Add tier label from container label
      - source_labels: [__meta_docker_container_label_tier]
        target_label: tier
      # Add version label from container label
      - source_labels: [__meta_docker_container_label_version]
        target_label: version

# === REMOTE WRITE CONFIGURATION ===
# Uncomment for cloud monitoring integration
# remote_write:
#   - url: "https://prometheus.monitoring.example.com/api/v1/write"
#     basic_auth:
#       username: "${REMOTE_WRITE_USERNAME}"
#       password: "${REMOTE_WRITE_PASSWORD}"
#     queue_config:
#       capacity: 10000
#       max_shards: 200
#       min_shards: 1
#       max_samples_per_send: 5000
#       batch_send_deadline: 5s