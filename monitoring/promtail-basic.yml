server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # PyAirtable service logs
  - job_name: pyairtable-services
    static_configs:
      - targets:
          - localhost
        labels:
          job: pyairtable-logs
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      # Parse Docker JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            attrs: attrs
            timestamp: time

      # Extract container info from path
      - regex:
          expression: '^/var/lib/docker/containers/(?P<container_id>[^/]+)/.*'
          source: __path__

      # Parse timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano

      # Add service labels based on container names
      - match:
          selector: '{attrs="api-gateway"}'
          stages:
            - labels:
                service: api-gateway
                team: platform
                priority: critical

      - match:
          selector: '{attrs="airtable-gateway"}'
          stages:
            - labels:
                service: airtable-gateway
                team: data
                priority: critical

      - match:
          selector: '{attrs="mcp-server"}'
          stages:
            - labels:
                service: mcp-server
                team: platform
                priority: critical

      - match:
          selector: '{attrs="llm-orchestrator"}'
          stages:
            - labels:
                service: llm-orchestrator
                team: ai
                priority: critical

      - match:
          selector: '{attrs="redis"}'
          stages:
            - labels:
                service: redis
                team: infrastructure
                priority: high

      - match:
          selector: '{attrs="postgres"}'
          stages:
            - labels:
                service: postgres
                team: database
                priority: high

      # Filter out noise
      - match:
          selector: '{stream="stderr"}'
          stages:
            - labels:
                log_type: error

      - match:
          selector: '{stream="stdout"}'
          stages:
            - labels:
                log_type: info

      # Extract log levels
      - regex:
          expression: '(?i)(?P<level>debug|info|warn|warning|error|fatal|critical)'
          source: output

      - labels:
          level:

      # Filter critical errors
      - match:
          selector: '{level="error"}'
          stages:
            - labels:
                alert: true

      - match:
          selector: '{level="fatal"}'
          stages:
            - labels:
                alert: true
                severity: critical

      # Output final log line
      - output:
          source: output

  # System logs
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system-logs
          __path__: /var/log/syslog

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+):\s+(?P<message>.*)'

      - labels:
          service:
          hostname:

      - timestamp:
          source: timestamp
          format: Jan 2 15:04:05

      - output:
          source: message