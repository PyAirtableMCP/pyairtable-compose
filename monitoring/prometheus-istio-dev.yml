# Prometheus Configuration for Istio Development
# Scrapes metrics from services with Istio mesh simulation

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'pyairtable-dev'
    region: 'local'

rule_files:
  - "istio_rules.yml"
  - "pyairtable_rules.yml"

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Envoy proxy metrics (simulating Istio sidecars)
  - job_name: 'istio-proxy'
    static_configs:
      - targets: ['istio-proxy-simulator:9901']
    metrics_path: /stats/prometheus
    scrape_interval: 15s

  # PyAirtable services
  - job_name: 'pyairtable-services'
    static_configs:
      - targets: 
        - 'api-gateway:8080'
        - 'auth-service:8001'
        - 'user-service:8002'
        - 'airtable-gateway:8002'
        - 'llm-orchestrator:8003'
        - 'platform-services:8007'
    metrics_path: /metrics
    scrape_interval: 15s
    relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 'istio-proxy-simulator:8080'
    - source_labels: [__meta_docker_container_label_istio_io_app]
      target_label: app
    - source_labels: [__meta_docker_container_label_istio_io_version]
      target_label: version
    - source_labels: [__meta_docker_container_label_pyairtable_io_component]
      target_label: component
    - source_labels: [__meta_docker_container_label_pyairtable_io_tier]
      target_label: tier

  # Infrastructure services
  - job_name: 'infrastructure'
    static_configs:
      - targets: ['postgres:5432', 'redis:6379']
    metrics_path: /metrics
    scrape_interval: 30s

  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    metrics_path: /metrics
    scrape_interval: 30s

  # Service discovery simulation (Consul)
  - job_name: 'consul'
    consul_sd_configs:
      - server: 'consul:8500'
        datacenter: 'pyairtable-dev'
    relabel_configs:
    - source_labels: [__meta_consul_service]
      target_label: service
    - source_labels: [__meta_consul_node]
      target_label: node
    - source_labels: [__meta_consul_tags]
      target_label: tags
      regex: '(.+)'

  # Custom business metrics
  - job_name: 'pyairtable-custom-metrics'
    static_configs:
      - targets: ['api-gateway:8080']
    metrics_path: /api/v1/metrics
    scrape_interval: 30s
    params:
      format: ['prometheus']

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Recording rules for Istio-like metrics
recording_rules:
  # Request rate
  - name: pyairtable.istio.request_rate
    rules:
    - record: pyairtable:istio_request_total:rate5m
      expr: sum(rate(envoy_http_downstream_rq_completed[5m])) by (service, method, status_code)
    
    # Error rate
    - record: pyairtable:istio_error_rate:rate5m
      expr: |
        sum(rate(envoy_http_downstream_rq_completed{status_code!~"2.."}[5m])) by (service) /
        sum(rate(envoy_http_downstream_rq_completed[5m])) by (service)
    
    # Latency percentiles
    - record: pyairtable:istio_request_duration:p99
      expr: histogram_quantile(0.99, sum(rate(envoy_http_downstream_rq_time_bucket[5m])) by (le, service))
    
    - record: pyairtable:istio_request_duration:p95
      expr: histogram_quantile(0.95, sum(rate(envoy_http_downstream_rq_time_bucket[5m])) by (le, service))
    
    - record: pyairtable:istio_request_duration:p50
      expr: histogram_quantile(0.50, sum(rate(envoy_http_downstream_rq_time_bucket[5m])) by (le, service))

# Mesh-specific metrics
mesh_metrics:
  # Service-to-service communication
  - name: pyairtable.mesh.communication
    rules:
    - record: pyairtable:mesh_requests_total:rate5m
      expr: |
        sum(rate(envoy_cluster_upstream_rq_total[5m])) by (
          source_service, destination_service, source_version, destination_version
        )
    
    # mTLS success rate
    - record: pyairtable:mesh_mtls_success_rate:rate5m
      expr: |
        sum(rate(envoy_server_ssl_handshake_success[5m])) by (service) /
        (
          sum(rate(envoy_server_ssl_handshake_success[5m])) by (service) +
          sum(rate(envoy_server_ssl_handshake_failure[5m])) by (service)
        )
    
    # Circuit breaker status
    - record: pyairtable:mesh_circuit_breaker_open
      expr: envoy_cluster_circuit_breakers_default_remaining{circuit_breaker="open"} > 0
    
    # Connection pool utilization
    - record: pyairtable:mesh_connection_pool_utilization
      expr: |
        envoy_cluster_upstream_cx_active / 
        envoy_cluster_circuit_breakers_default_max_connections * 100