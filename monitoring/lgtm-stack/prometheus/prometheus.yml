# PyAirtable LGTM Stack Prometheus Configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'pyairtable-local'
    environment: 'development'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Rule files - for alerts and recording rules
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Grafana
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']

  # Loki
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']

  # Tempo
  - job_name: 'tempo'
    static_configs:
      - targets: ['tempo:3200']

  # Mimir
  - job_name: 'mimir'
    static_configs:
      - targets: ['mimir:8080']

  # AlertManager
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']

  # OpenTelemetry Collector
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8889']

  # MinIO (if exposing metrics)
  - job_name: 'minio'
    static_configs:
      - targets: ['minio:9000']

  # Docker containers (if Docker metrics are available)
  - job_name: 'docker'
    static_configs:
      - targets: ['host.docker.internal:9323']
    scrape_interval: 30s
    metrics_path: '/metrics'

# Remote write configuration (optional - for long-term storage in Mimir)
remote_write:
  - url: http://mimir:8080/api/v1/push
    headers:
      X-Scope-OrgID: pyairtable

# Note: Storage configuration is handled via command line flags