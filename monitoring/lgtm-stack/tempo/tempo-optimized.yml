# Optimized Tempo Configuration for PyAirtable LGTM Stack
# Focus: Resource efficiency, intelligent sampling, cost optimization

server:
  http_listen_port: 3200
  log_level: info
  log_format: logfmt

# Distributor configuration - handles trace ingestion
distributor:
  receivers:
    # Jaeger compatibility
    jaeger:
      protocols:
        thrift_http:
          endpoint: 0.0.0.0:14268
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_binary:
          endpoint: 0.0.0.0:6832
        thrift_compact:
          endpoint: 0.0.0.0:6831
    
    # OTLP receivers
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    
    # Zipkin compatibility (if needed)
    zipkin:
      endpoint: 0.0.0.0:9411

  # Rate limiting and load balancing
  ring:
    kvstore:
      store: inmemory

# Ingester configuration - writes traces to storage
ingester:
  # Lifecycle management
  lifecycler:
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
    num_tokens: 128
    heartbeat_period: 5s
    observe_period: 10s
    join_after: 10s
    min_ready_duration: 10s
    final_sleep: 30s
  
  # Trace cutting configuration
  max_block_duration: 5m       # Cut blocks every 5 minutes
  max_block_bytes: 100000000   # 100MB max block size
  complete_block_timeout: 32m   # Wait 32min for late arriving spans
  
  # Flush settings
  flush_check_period: 10s
  flush_op_timeout: 10s

# Querier configuration
querier:
  # Frontend worker configuration
  frontend_worker:
    frontend_address: 127.0.0.1:9095
    parallelism: 20
    match_max_concurrent: true
  
  # Query timeout
  query_timeout: 30s
  
  # Trace by ID configuration
  trace_by_id:
    query_timeout: 10s
  
  # Search configuration
  search:
    # Search query timeout
    query_timeout: 30s
    # Prefer recent data for search
    prefer_self: 10
    # Default result limit
    default_result_limit: 20
    # Max result limit
    max_result_limit: 1000
    # Max duration for search queries
    max_duration: 168h  # 7 days

# Query frontend configuration
query_frontend:
  # Query sharding
  search:
    # Duration shard size for search queries
    duration_shard_size: 5m
    # Concurrent shards
    concurrent_jobs: 1000
    # Target bytes per job
    target_bytes_per_job: 104857600  # 100MB
  
  # Trace by ID configuration
  trace_by_id:
    # Query shards
    query_shards: 50
    # Hedge requests after this duration
    hedge_requests_at: 2s
    # Hedge requests up to this percentage
    hedge_requests_up_to: 2
  
  # Metrics query configuration
  metrics:
    # Duration shard size
    duration_shard_size: 5m
    # Concurrent jobs
    concurrent_jobs: 1000
    # Target bytes per job
    target_bytes_per_job: 104857600

# Compactor configuration - manages data lifecycle
compactor:
  # Compaction configuration
  compaction:
    # How often to run compaction
    compaction_window: 1h
    # Max compaction objects
    max_compaction_objects: 1000000
    # Max block size after compaction
    max_block_bytes: 100000000
    # Block retention - 7 days for cost optimization
    block_retention: 168h
    # Compacted block retention
    compacted_block_retention: 1h
    # Retention concurrency
    retention_concurrency: 10
    # Max time per tenant
    max_time_per_tenant: 5m
    # Compaction cycle
    compaction_cycle: 30s
  
  # Ring configuration
  ring:
    kvstore:
      store: inmemory

# Storage configuration - S3 compatible
storage:
  trace:
    # Backend configuration
    backend: s3
    # WAL configuration
    wal:
      path: /var/tempo/wal
      # Reduce WAL size for resource optimization
      completedfilepath: /var/tempo/wal/completed
      # Reduce wal replay memory
      replay_memory_ceiling: 1073741824  # 1GB
    
    # S3 configuration using MinIO
    s3:
      bucket: tempo-data
      endpoint: minio:9000
      access_key: minioadmin
      secret_key: minioadmin123
      insecure: true
      # Reduce part size for better memory usage
      part_size: 5242880  # 5MB
      # Reduce hedge requests
      hedge_requests_at: 500ms
      hedge_requests_up_to: 2
    
    # Block configuration
    block:
      # Encoding for better compression
      encoding: zstd
      # Index downsampling for cost optimization
      index_downsample_bytes: 1000000  # 1MB
      # Bloom filter configuration
      bloom_filter_false_positive: 0.01
      # Index page size
      index_page_size_bytes: 250000  # 250KB
      # How often to cut new blocks
      cut_block_immediately: false
    
    # Local storage for caching
    local:
      path: /var/tempo/blocks
    
    # Pool configuration
    pool:
      max_workers: 100
      queue_depth: 10000

# Memberlist configuration (for clustering)
memberlist:
  abort_if_cluster_join_fails: false
  bind_port: 7946
  join_members: []
  max_join_backoff: 1m
  max_join_retries: 10
  min_join_backoff: 1s

# Override configuration
overrides:
  # Per-tenant overrides
  defaults:
    # Ingestion settings
    ingestion_rate_strategy: global
    ingestion_rate_limit_bytes: 20000000    # 20MB/s per tenant
    ingestion_burst_size_bytes: 40000000    # 40MB burst
    
    # Search settings
    max_search_duration: 168h  # 7 days max search
    
    # Trace retention
    block_retention: 168h  # 7 days retention for cost optimization
    
    # Max traces per user
    max_traces_per_user: 10000000  # 10M traces
    
    # Max bytes per trace
    max_bytes_per_trace: 50000000  # 50MB max trace size
    
    # Max bytes per tag values query
    max_bytes_per_tag_values_query: 50000000  # 50MB
    
    # Forwarders
    forwarders: []
    
    # Metrics generator (optional)
    metrics_generator:
      # Disable to save resources initially
      processor:
        service_graphs:
          enabled: false
        span_metrics:
          enabled: false
      
      # If enabled, configure for efficiency
      registry:
        collection_interval: 15s
      
      storage:
        path: /var/tempo/generator/wal
        remote_write_flush_deadline: 1m

# Usage report (disable for privacy)
usage_report:
  reporting_enabled: false

# Analytics (disable)
analytics:
  reporting_enabled: false