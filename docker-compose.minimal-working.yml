version: '3.8'

services:
  # API Gateway - Main entry point
  api-gateway:
    image: ghcr.io/reg-kris/pyairtable-api-gateway:latest
    ports:
      - "8000:8000"
    environment:
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - MCP_SERVER_URL=http://mcp-server:8001
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator:8003
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - airtable-gateway
      - mcp-server
      - llm-orchestrator
    restart: unless-stopped
    networks:
      - pyairtable-network

  # LLM Orchestrator - Gemini 2.5 Flash integration
  llm-orchestrator:
    image: llm-orchestrator:latest
    ports:
      - "8003:8003"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MCP_SERVER_HTTP_URL=http://mcp-server:8001
      - USE_HTTP_MCP=true
      # Airtable configuration
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      # Redis session storage
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - USE_REDIS_SESSIONS=true
      # Legacy stdio config (fallback)
      - MCP_SERVER_STDIO_COMMAND=python -m src.server
      - MCP_SERVER_WORKING_DIR=/app/mcp-server
      - THINKING_BUDGET=${THINKING_BUDGET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - mcp-server
      - redis
    restart: unless-stopped
    networks:
      - pyairtable-network

  # MCP Server - Protocol implementation (HTTP mode for performance)
  mcp-server:
    image: mcp-server:latest
    ports:
      - "8001:8001"
    environment:
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - AIRTABLE_GATEWAY_API_KEY=${API_KEY}
      - MCP_SERVER_MODE=http
      - MCP_SERVER_PORT=8001
      # Airtable configuration
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - airtable-gateway
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Airtable Gateway - Direct Airtable API integration
  airtable-gateway:
    image: ghcr.io/reg-kris/airtable-gateway-py:latest
    ports:
      - "8002:8002"
    environment:
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - AIRTABLE_PAT=${AIRTABLE_TOKEN}
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pyairtable-network

  # PostgreSQL - Database for sessions and metadata
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    restart: unless-stopped
    networks:
      - pyairtable-network

networks:
  pyairtable-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local