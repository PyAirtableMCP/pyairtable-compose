version: '3.8'

services:
  # Core Infrastructure Services
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "redis-cli --no-auth-warning -a $$REDIS_PASSWORD ping | grep PONG"
      ]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 15s

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost -p 5432"
      ]
      interval: 10s
      timeout: 8s
      retries: 8
      start_period: 45s

  # Python Services
  airtable-gateway:
    build:
      context: ./python-services/airtable-gateway
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - AIRTABLE_PAT=${AIRTABLE_TOKEN}
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -f http://localhost:8002/health || exit 1"
      ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s

  mcp-server:
    build:
      context: ./python-services/mcp-server
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - AIRTABLE_GATEWAY_API_KEY=${API_KEY}
      - MCP_SERVER_MODE=http
      - MCP_SERVER_PORT=8001
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      airtable-gateway:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -f http://localhost:8001/health || exit 1"
      ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  llm-orchestrator:
    build:
      context: ./python-services/llm-orchestrator
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MCP_SERVER_HTTP_URL=http://mcp-server:8001
      - USE_HTTP_MCP=true
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - USE_REDIS_SESSIONS=true
      - THINKING_BUDGET=${THINKING_BUDGET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -f http://localhost:8003/health || exit 1"
      ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  pyairtable-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local