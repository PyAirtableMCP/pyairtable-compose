# Service Certificate Generation for mTLS
# Automated certificate provisioning for all PyAirtable services

apiVersion: v1
kind: ConfigMap
metadata:
  name: service-cert-config
  namespace: pyairtable-system
data:
  generate-service-certs.sh: |
    #!/bin/bash
    set -e
    
    # Service list for certificate generation
    SERVICES=(
      "api-gateway"
      "auth-service"
      "user-service" 
      "permission-service"
      "notification-service"
      "file-service"
      "workspace-service"
      "webhook-service"
      "web-bff"
      "mobile-bff"
      "ai-service"
      "llm-orchestrator"
      "airtable-gateway"
      "analytics-service"
      "chat-service"
      "audit-service"
      "embedding-service"
      "formula-engine"
      "mcp-server"
      "schema-service"
      "semantic-search"
      "workflow-engine"
    )
    
    cd /certs
    
    for service in "${SERVICES[@]}"; do
      echo "Generating certificate for ${service}..."
      
      # Create CSR configuration
      cat > ${service}-csr.json <<EOF
    {
      "CN": "${service}.pyairtable-system.svc.cluster.local",
      "key": {
        "algo": "ecdsa",
        "size": 256
      },
      "names": [
        {
          "C": "US",
          "ST": "CA", 
          "L": "San Francisco",
          "O": "3vantage",
          "OU": "PyAirtable Services"
        }
      ],
      "hosts": [
        "${service}",
        "${service}.pyairtable-system",
        "${service}.pyairtable-system.svc",
        "${service}.pyairtable-system.svc.cluster.local",
        "localhost",
        "127.0.0.1"
      ]
    }
    EOF
      
      # Generate service certificate
      cfssl gencert \
        -ca=ca.pem \
        -ca-key=ca-key.pem \
        -config=/config/ca-config.json \
        -profile=peer \
        ${service}-csr.json | cfssljson -bare ${service}
      
      # Set permissions
      chmod 600 ${service}-key.pem
      chmod 644 ${service}.pem
      
      # Create Kubernetes secret
      kubectl create secret tls ${service}-tls \
        --cert=${service}.pem \
        --key=${service}-key.pem \
        --namespace=pyairtable-system || true
      
      echo "Certificate created for ${service}"
    done
    
    echo "All service certificates generated successfully"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-service-certificates
  namespace: pyairtable-system
  labels:
    app: certificate-generator
spec:
  template:
    spec:
      serviceAccountName: cert-manager
      containers:
      - name: cfssl
        image: cfssl/cfssl:1.6.4
        command:
        - /bin/sh
        - /certs/generate-service-certs.sh
        volumeMounts:
        - name: config
          mountPath: /config
        - name: script
          mountPath: /certs/generate-service-certs.sh
          subPath: generate-service-certs.sh
        - name: ca-certs
          mountPath: /certs/ca.pem
          subPath: tls.crt
        - name: ca-certs
          mountPath: /certs/ca-key.pem
          subPath: tls.key
        - name: workspace
          mountPath: /certs
      volumes:
      - name: config
        configMap:
          name: ca-config
      - name: script
        configMap:
          name: service-cert-config
          defaultMode: 0755
      - name: ca-certs
        secret:
          secretName: pyairtable-ca-key-pair
      - name: workspace
        emptyDir: {}
      restartPolicy: OnFailure