# Certificate Authority Configuration for PyAirtable mTLS
# Production-ready CA setup for 3vantage organization

apiVersion: v1
kind: ConfigMap
metadata:
  name: ca-config
  namespace: pyairtable-system
data:
  ca-config.json: |
    {
      "signing": {
        "default": {
          "expiry": "8760h",
          "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
          ]
        },
        "profiles": {
          "server": {
            "expiry": "8760h",
            "usages": [
              "signing",
              "key encipherment",
              "server auth"
            ]
          },
          "client": {
            "expiry": "8760h",
            "usages": [
              "signing",
              "key encipherment",
              "client auth"
            ]
          },
          "peer": {
            "expiry": "8760h",
            "usages": [
              "signing",
              "key encipherment",
              "server auth",
              "client auth"
            ]
          }
        }
      }
    }
  ca-csr.json: |
    {
      "CN": "PyAirtable Root CA",
      "key": {
        "algo": "ecdsa",
        "size": 256
      },
      "names": [
        {
          "C": "US",
          "ST": "CA",
          "L": "San Francisco",
          "O": "3vantage",
          "OU": "Security"
        }
      ],
      "ca": {
        "expiry": "87600h"
      }
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-ca-certificates
  namespace: pyairtable-system
spec:
  template:
    spec:
      serviceAccountName: cert-manager
      containers:
      - name: cfssl
        image: cfssl/cfssl:1.6.4
        command:
        - /bin/sh
        - -c
        - |
          cd /certs
          echo "Generating Root CA..."
          cfssl gencert -initca /config/ca-csr.json | cfssljson -bare ca
          
          echo "Setting appropriate permissions..."
          chmod 600 ca-key.pem
          chmod 644 ca.pem
          
          echo "Creating CA certificate secret..."
          kubectl create secret tls pyairtable-ca-key-pair \
            --cert=ca.pem \
            --key=ca-key.pem \
            --namespace=pyairtable-system || true
          
          echo "CA certificates generated successfully"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: certs
          mountPath: /certs
      volumes:
      - name: config
        configMap:
          name: ca-config
      - name: certs
        emptyDir: {}
      restartPolicy: OnFailure