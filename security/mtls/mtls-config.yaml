# mTLS Configuration for PyAirtable Services
# Production-ready mutual TLS configuration for service-to-service communication

apiVersion: v1
kind: ConfigMap
metadata:
  name: mtls-config
  namespace: pyairtable-system
  labels:
    app: mtls-config
    security.3vantage.com/type: mtls
data:
  # Nginx mTLS configuration for Go services
  nginx-mtls.conf: |
    upstream backend {
        server 127.0.0.1:8080;
    }
    
    server {
        listen 443 ssl http2;
        server_name _;
        
        # Server certificate
        ssl_certificate /etc/certs/tls.crt;
        ssl_certificate_key /etc/certs/tls.key;
        
        # Client certificate verification
        ssl_client_certificate /etc/certs/ca.crt;
        ssl_verify_client on;
        ssl_verify_depth 2;
        
        # TLS configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=63072000" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        location / {
            # Pass client certificate info to backend
            proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
            proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

  # Envoy mTLS configuration for service mesh
  envoy-mtls.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15001
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: service_cluster
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: "/etc/certs/tls.crt"
                  private_key:
                    filename: "/etc/certs/tls.key"
                validation_context:
                  trusted_ca:
                    filename: "/etc/certs/ca.crt"
                  verify_certificate_spki: []
                  verify_certificate_hash: []
              require_client_certificate: true
      clusters:
      - name: service_cluster
        connect_timeout: 30s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: service_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8080
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificates:
              - certificate_chain:
                  filename: "/etc/certs/tls.crt"
                private_key:
                  filename: "/etc/certs/tls.key"
              validation_context:
                trusted_ca:
                  filename: "/etc/certs/ca.crt"

  # Go service mTLS client configuration
  go-mtls-client.yaml: |
    tls:
      enabled: true
      cert_file: "/etc/certs/tls.crt"
      key_file: "/etc/certs/tls.key"
      ca_file: "/etc/certs/ca.crt"
      min_version: "1.2"
      max_version: "1.3"
      cipher_suites:
        - "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
        - "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
      verify_peer: true
      verify_hostname: true

  # Python service mTLS configuration
  python-mtls-config.yaml: |
    ssl:
      enabled: true
      certfile: "/etc/certs/tls.crt"
      keyfile: "/etc/certs/tls.key"
      ca_certs: "/etc/certs/ca.crt"
      cert_reqs: "CERT_REQUIRED"
      ssl_version: "PROTOCOL_TLS"
      ciphers: "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS"
      verify_mode: true
      check_hostname: true

---
# Service Account for certificate management
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager
  namespace: pyairtable-system

---
# RBAC for certificate management
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: pyairtable-system