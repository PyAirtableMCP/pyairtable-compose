version: '3.8'

services:
  # Security Event Monitor
  security-event-monitor:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
      args:
        - MONITOR_TYPE=event
    image: pyairtable/security-event-monitor:latest
    container_name: security-event-monitor
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=pyairtable_security
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - DATABASE_NAME=pyairtable_security
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - METRICS_PORT=8090
      - PYTHONPATH=/app
    ports:
      - "8090:8090"  # Prometheus metrics
    volumes:
      - ./security-event-monitor.py:/app/security-event-monitor.py:ro
      - security-logs:/var/log/security
    secrets:
      - db_password
      - redis_password
    depends_on:
      - postgres
      - redis
    networks:
      - security-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Access Control Monitor
  access-control-monitor:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
      args:
        - MONITOR_TYPE=access
    image: pyairtable/access-control-monitor:latest
    container_name: access-control-monitor
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=pyairtable_security
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - DATABASE_NAME=pyairtable_security
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - METRICS_PORT=8091
      - MAX_CONCURRENT_SESSIONS=5
    ports:
      - "8091:8091"  # Prometheus metrics
    volumes:
      - ./access-control-monitor.py:/app/access-control-monitor.py:ro
      - security-logs:/var/log/security
    secrets:
      - db_password
      - redis_password
    depends_on:
      - postgres
      - redis
    networks:
      - security-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Infrastructure Security Monitor
  infrastructure-monitor:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
      args:
        - MONITOR_TYPE=infrastructure
    image: pyairtable/infrastructure-monitor:latest
    container_name: infrastructure-monitor
    restart: unless-stopped
    privileged: true  # Required for container and network monitoring
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=pyairtable_security
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - DATABASE_NAME=pyairtable_security
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - METRICS_PORT=8092
    ports:
      - "8092:8092"  # Prometheus metrics
    volumes:
      - ./infrastructure-security-monitor.py:/app/infrastructure-security-monitor.py:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - security-logs:/var/log/security
    secrets:
      - db_password
      - redis_password
    depends_on:
      - postgres
      - redis
    networks:
      - security-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Security Alerting System
  security-alerting:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
      args:
        - MONITOR_TYPE=alerting
    image: pyairtable/security-alerting:latest
    container_name: security-alerting
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=pyairtable_security
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - DATABASE_NAME=pyairtable_security
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - METRICS_PORT=8093
      - RETENTION_DAYS=90
      # Email notifications
      - EMAIL_ENABLED=true
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - EMAIL_FROM=security@pyairtable.com
      - EMAIL_TO=admin@pyairtable.com,security-team@pyairtable.com
      - EMAIL_USERNAME=security@pyairtable.com
      - EMAIL_PASSWORD_FILE=/run/secrets/email_password
      # Slack notifications
      - SLACK_ENABLED=true
      - SLACK_WEBHOOK_URL_FILE=/run/secrets/slack_webhook
      - SLACK_CHANNEL=#security-alerts
      # PagerDuty notifications
      - PAGERDUTY_ENABLED=true
      - PAGERDUTY_INTEGRATION_KEY_FILE=/run/secrets/pagerduty_key
    ports:
      - "8093:8093"  # Prometheus metrics
    volumes:
      - ./security-alerting-system.py:/app/security-alerting-system.py:ro
      - security-logs:/var/log/security
    secrets:
      - db_password
      - redis_password
      - email_password
      - slack_webhook
      - pagerduty_key
    depends_on:
      - postgres
      - redis
    networks:
      - security-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Security Dashboard API
  security-dashboard-api:
    build:
      context: .
      dockerfile: Dockerfile.dashboard-api
    image: pyairtable/security-dashboard-api:latest
    container_name: security-dashboard-api
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=pyairtable_security
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - DATABASE_NAME=pyairtable_security
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - API_PORT=8080
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - CORS_ORIGINS=https://dashboard.pyairtable.com,https://security.pyairtable.com
    ports:
      - "8080:8080"  # Dashboard API
    volumes:
      - ./dashboard-api:/app:ro
      - security-logs:/var/log/security
    secrets:
      - db_password
      - redis_password
      - jwt_secret
    depends_on:
      - postgres
      - redis
    networks:
      - security-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Log Aggregator for Security Events
  security-log-aggregator:
    image: fluent/fluent-bit:2.1.4
    container_name: security-log-aggregator
    restart: unless-stopped
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - security-logs:/var/log/security
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"  # Forward protocol
      - "24224:24224/udp"
    networks:
      - security-network
      - monitoring-network
    depends_on:
      - redis

  # Redis for caching and pub/sub
  redis:
    image: redis:7.0-alpine
    container_name: security-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    secrets:
      - redis_password
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL for security data storage
  postgres:
    image: postgres:15-alpine
    container_name: security-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pyairtable_security
      - POSTGRES_USER=pyairtable_security
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-security-db.sql:/docker-entrypoint-initdb.d/init-security-db.sql:ro
    secrets:
      - db_password
    networks:
      - security-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pyairtable_security -d pyairtable_security"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: security-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana for security dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: security-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./security-dashboard.json:/var/lib/grafana/dashboards/security-dashboard.json:ro
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: security-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  security-logs:
    driver: local

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  email_password:
    file: ./secrets/email_password.txt
  slack_webhook:
    file: ./secrets/slack_webhook.txt
  pagerduty_key:
    file: ./secrets/pagerduty_key.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt