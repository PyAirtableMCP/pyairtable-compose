syntax = "proto3";

package pyairtable.gateway.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "pyairtable/common/v1/common.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/gateway/v1;gatewayv1";

// HTTP method enum
enum HttpMethod {
  HTTP_METHOD_UNSPECIFIED = 0;
  HTTP_METHOD_GET = 1;
  HTTP_METHOD_POST = 2;
  HTTP_METHOD_PUT = 3;
  HTTP_METHOD_PATCH = 4;
  HTTP_METHOD_DELETE = 5;
  HTTP_METHOD_HEAD = 6;
  HTTP_METHOD_OPTIONS = 7;
}

// Request routing info
message RouteInfo {
  string service = 1;
  string method = 2;
  string path = 3;
  HttpMethod http_method = 4;
  bool requires_auth = 5;
  repeated string required_permissions = 6;
  map<string, string> metadata = 7;
}

// Proxy request
message ProxyRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  RouteInfo route = 2;
  map<string, string> headers = 3;
  map<string, string> query_params = 4;
  map<string, string> path_params = 5;
  google.protobuf.Any body = 6;
}

// Proxy response
message ProxyResponse {
  int32 status_code = 1;
  map<string, string> headers = 2;
  google.protobuf.Any body = 3;
  pyairtable.common.v1.ErrorDetail error = 4;
}

// Rate limit info
message RateLimitInfo {
  int32 limit = 1;
  int32 remaining = 2;
  google.protobuf.Timestamp reset_time = 3;
  string window = 4;
}

// Check rate limit request
message CheckRateLimitRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string identifier = 2;
  string resource = 3;
  int32 cost = 4;
}

// Check rate limit response
message CheckRateLimitResponse {
  bool allowed = 1;
  RateLimitInfo rate_limit = 2;
  optional string retry_after = 3;
}

// API metrics
message APIMetrics {
  string endpoint = 1;
  HttpMethod method = 2;
  int32 status_code = 3;
  int64 response_time_ms = 4;
  int64 request_size_bytes = 5;
  int64 response_size_bytes = 6;
  google.protobuf.Timestamp timestamp = 7;
  string user_id = 8;
  string tenant_id = 9;
  map<string, string> labels = 10;
}

// Log request metrics
message LogMetricsRequest {
  repeated APIMetrics metrics = 1;
}

// Log request metrics response
message LogMetricsResponse {
  bool success = 1;
  int32 recorded_count = 2;
}

// Service health status
message ServiceHealth {
  string service_name = 1;
  pyairtable.common.v1.HealthStatus status = 2;
  google.protobuf.Timestamp last_check = 3;
  optional string error_message = 4;
  map<string, string> metadata = 5;
}

// Get service health request
message GetServiceHealthRequest {
  optional string service_name = 1;
}

// Get service health response
message GetServiceHealthResponse {
  repeated ServiceHealth services = 1;
  pyairtable.common.v1.HealthStatus overall_status = 2;
}

// Circuit breaker state
enum CircuitBreakerState {
  CIRCUIT_BREAKER_STATE_UNSPECIFIED = 0;
  CIRCUIT_BREAKER_STATE_CLOSED = 1;
  CIRCUIT_BREAKER_STATE_OPEN = 2;
  CIRCUIT_BREAKER_STATE_HALF_OPEN = 3;
}

// Circuit breaker info
message CircuitBreakerInfo {
  string service = 1;
  CircuitBreakerState state = 2;
  int32 failure_count = 3;
  int32 success_count = 4;
  google.protobuf.Timestamp last_failure = 5;
  google.protobuf.Timestamp next_attempt = 6;
}

// Get circuit breaker status request
message GetCircuitBreakerStatusRequest {
  optional string service = 1;
}

// Get circuit breaker status response
message GetCircuitBreakerStatusResponse {
  repeated CircuitBreakerInfo circuit_breakers = 1;
}

// Gateway Service
service GatewayService {
  // Proxy requests to backend services
  rpc ProxyRequest(ProxyRequest) returns (ProxyResponse);
  
  // Check rate limits
  rpc CheckRateLimit(CheckRateLimitRequest) returns (CheckRateLimitResponse);
  
  // Log API metrics
  rpc LogMetrics(LogMetricsRequest) returns (LogMetricsResponse);
  
  // Get service health
  rpc GetServiceHealth(GetServiceHealthRequest) returns (GetServiceHealthResponse);
  
  // Get circuit breaker status
  rpc GetCircuitBreakerStatus(GetCircuitBreakerStatusRequest) returns (GetCircuitBreakerStatusResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (pyairtable.common.v1.HealthCheckResponse);
}