syntax = "proto3";

package pyairtable.user.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "pyairtable/common/v1/common.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/user/v1;userv1";

// User status enum
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_PENDING_VERIFICATION = 4;
  USER_STATUS_DELETED = 5;
}

// User preferences
message UserPreferences {
  string timezone = 1;
  string language = 2;
  string date_format = 3;
  string time_format = 4;
  bool notifications_enabled = 5;
  bool email_notifications = 6;
  bool push_notifications = 7;
  map<string, string> custom_settings = 8;
}

// User profile
message UserProfile {
  string first_name = 1;
  string last_name = 2;
  optional string display_name = 3;
  optional string avatar_url = 4;
  optional string bio = 5;
  optional string job_title = 6;
  optional string department = 7;
  optional string company = 8;
  optional string phone = 9;
  map<string, string> custom_fields = 10;
}

// User model
message User {
  pyairtable.common.v1.BaseMetadata metadata = 1;
  string email = 2;
  UserStatus status = 3;
  UserProfile profile = 4;
  UserPreferences preferences = 5;
  optional google.protobuf.Timestamp last_login_at = 6;
  optional google.protobuf.Timestamp email_verified_at = 7;
  repeated string roles = 8;
  map<string, string> attributes = 9;
  string tenant_id = 10;
}

// Create user request
message CreateUserRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string email = 2;
  UserProfile profile = 3;
  optional UserPreferences preferences = 4;
  repeated string roles = 5;
  map<string, string> attributes = 6;
  optional string tenant_id = 7;
}

// Create user response
message CreateUserResponse {
  User user = 1;
}

// Get user request
message GetUserRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
}

// Get user response
message GetUserResponse {
  User user = 1;
}

// Get user by email request
message GetUserByEmailRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string email = 2;
}

// Get user by email response
message GetUserByEmailResponse {
  User user = 1;
}

// Update user request
message UpdateUserRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  optional UserProfile profile = 3;
  optional UserPreferences preferences = 4;
  optional UserStatus status = 5;
  map<string, string> attributes = 6;
}

// Update user response
message UpdateUserResponse {
  User user = 1;
}

// Delete user request
message DeleteUserRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  bool hard_delete = 3;
}

// Delete user response
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

// List users request
message ListUsersRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  pyairtable.common.v1.PaginationRequest pagination = 2;
  repeated pyairtable.common.v1.Filter filters = 3;
  repeated pyairtable.common.v1.SortCriteria sort = 4;
  optional string tenant_id = 5;
}

// List users response
message ListUsersResponse {
  repeated User users = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Search users request
message SearchUsersRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string query = 2;
  pyairtable.common.v1.PaginationRequest pagination = 3;
  repeated string fields = 4;
  optional string tenant_id = 5;
}

// Search users response
message SearchUsersResponse {
  repeated User users = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Update user status request
message UpdateUserStatusRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  UserStatus status = 3;
  optional string reason = 4;
}

// Update user status response
message UpdateUserStatusResponse {
  User user = 1;
}

// Verify email request
message VerifyEmailRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string verification_token = 3;
}

// Verify email response
message VerifyEmailResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Resend verification email request
message ResendVerificationEmailRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
}

// Resend verification email response
message ResendVerificationEmailResponse {
  bool success = 1;
  string message = 2;
}

// Update last login request
message UpdateLastLoginRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  google.protobuf.Timestamp login_time = 3;
  optional string login_source = 4;
}

// Update last login response
message UpdateLastLoginResponse {
  bool success = 1;
}

// Batch get users request
message BatchGetUsersRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  repeated string user_ids = 2;
}

// Batch get users response
message BatchGetUsersResponse {
  map<string, User> users = 1;
  repeated string not_found = 2;
}

// User Service
service UserService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // Get user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // Get user by email
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);
  
  // Update user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // Delete user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  
  // List users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Search users
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
  
  // Update user status
  rpc UpdateUserStatus(UpdateUserStatusRequest) returns (UpdateUserStatusResponse);
  
  // Verify email
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse);
  
  // Resend verification email
  rpc ResendVerificationEmail(ResendVerificationEmailRequest) returns (ResendVerificationEmailResponse);
  
  // Update last login
  rpc UpdateLastLogin(UpdateLastLoginRequest) returns (UpdateLastLoginResponse);
  
  // Batch get users
  rpc BatchGetUsers(BatchGetUsersRequest) returns (BatchGetUsersResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (pyairtable.common.v1.HealthCheckResponse);
}