# Envoy Proxy Configuration for Service Mesh Observability
# Lightweight alternative to Istio for local development

admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901

stats_config:
  stats_tags:
    - tag_name: service_name
      regex: "^cluster\\.((.+?)\\.).*"
    - tag_name: method
      regex: "_method=([^\\s]+)"
    - tag_name: status_code
      regex: "_status=([^\\s]+)"

static_resources:
  listeners:
  # Main proxy listener
  - name: main_listener
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8000
    
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          
          # Enable tracing
          tracing:
            provider:
              name: envoy.tracers.jaeger
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.JaegerConfig
                collector_cluster: jaeger_cluster
                collector_endpoint: "/api/traces"
          
          # Request ID configuration
          request_id_extension:
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig
          
          codec_type: AUTO
          stat_prefix: ingress_http
          
          # Route configuration
          route_config:
            name: pyairtable_routes
            virtual_hosts:
            - name: pyairtable_services
              domains: ["*"]
              
              routes:
              # API Gateway routes
              - match:
                  prefix: "/api/"
                route:
                  cluster: api_gateway_cluster
                  retry_policy:
                    retry_on: "5xx,reset,connect-failure,refused-stream"
                    num_retries: 3
                    per_try_timeout: 10s
                  timeout: 30s
                decorator:
                  operation: "api_gateway_request"
              
              # LLM Orchestrator routes
              - match:
                  prefix: "/llm/"
                route:
                  cluster: llm_orchestrator_cluster
                  timeout: 60s  # Longer timeout for AI operations
                decorator:
                  operation: "llm_request"
              
              # Platform Services routes
              - match:
                  prefix: "/platform/"
                route:
                  cluster: platform_services_cluster
                  timeout: 30s
                decorator:
                  operation: "platform_request"
              
              # Automation Services routes
              - match:
                  prefix: "/automation/"
                route:
                  cluster: automation_services_cluster
                  timeout: 45s
                decorator:
                  operation: "automation_request"
              
              # Frontend routes (catch-all)
              - match:
                  prefix: "/"
                route:
                  cluster: frontend_cluster
                  timeout: 10s
                decorator:
                  operation: "frontend_request"
          
          # HTTP filters
          http_filters:
          # CORS filter
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          
          # Request headers filter (add correlation ID)
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  -- Add correlation ID if not present
                  local correlation_id = request_handle:headers():get("x-correlation-id")
                  if not correlation_id then
                    correlation_id = request_handle:headers():get(":request-id")
                    if correlation_id then
                      request_handle:headers():add("x-correlation-id", correlation_id)
                    end
                  end
                  
                  -- Add platform headers
                  request_handle:headers():add("x-platform", "pyairtable")
                  request_handle:headers():add("x-envoy-proxy", "true")
                  
                  -- Add service tier based on path
                  local path = request_handle:headers():get(":path")
                  if string.match(path, "^/api/") then
                    request_handle:headers():add("x-service-tier", "gateway")
                  elseif string.match(path, "^/llm/") then
                    request_handle:headers():add("x-service-tier", "ai-ml")
                  elseif string.match(path, "^/platform/") then
                    request_handle:headers():add("x-service-tier", "platform")
                  elseif string.match(path, "^/automation/") then
                    request_handle:headers():add("x-service-tier", "automation")
                  else
                    request_handle:headers():add("x-service-tier", "frontend")
                  end
                end
                
                function envoy_on_response(response_handle)
                  -- Add response headers for observability
                  local correlation_id = response_handle:headers():get("x-correlation-id")
                  if correlation_id then
                    response_handle:headers():add("x-correlation-id", correlation_id)
                  end
                end
          
          # Rate limiting filter
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/udpa.type.v1.TypedStruct
              type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              value:
                stat_prefix: rate_limiter
                token_bucket:
                  max_tokens: 1000
                  tokens_per_fill: 100
                  fill_interval: 1s
                filter_enabled:
                  runtime_key: rate_limit_enabled
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
                filter_enforced:
                  runtime_key: rate_limit_enforced
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
          
          # Health check filter
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/health"
          
          # Router filter (must be last)
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          
          # Access logging
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              format: |
                {
                  "timestamp": "%START_TIME%",
                  "method": "%REQ(:METHOD)%",
                  "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
                  "protocol": "%PROTOCOL%",
                  "response_code": "%RESPONSE_CODE%",
                  "response_flags": "%RESPONSE_FLAGS%",
                  "bytes_received": "%BYTES_RECEIVED%",
                  "bytes_sent": "%BYTES_SENT%",
                  "duration": "%DURATION%",
                  "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
                  "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
                  "user_agent": "%REQ(USER-AGENT)%",
                  "request_id": "%REQ(X-REQUEST-ID)%",
                  "correlation_id": "%REQ(X-CORRELATION-ID)%",
                  "authority": "%REQ(:AUTHORITY)%",
                  "upstream_host": "%UPSTREAM_HOST%",
                  "upstream_cluster": "%UPSTREAM_CLUSTER%",
                  "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
                  "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
                  "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
                  "requested_server_name": "%REQUESTED_SERVER_NAME%",
                  "route_name": "%ROUTE_NAME%"
                }

  clusters:
  # API Gateway cluster
  - name: api_gateway_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/health"
    load_assignment:
      cluster_name: api_gateway_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: api-gateway
                port_value: 8000
    
    # Circuit breaker settings
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 100
        max_pending_requests: 100
        max_requests: 100
        max_retries: 10
  
  # LLM Orchestrator cluster
  - name: llm_orchestrator_cluster
    connect_timeout: 10s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 10s
      interval: 15s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/health"
    load_assignment:
      cluster_name: llm_orchestrator_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: llm-orchestrator
                port_value: 8003
    
    # Circuit breaker settings (more lenient for AI services)
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 50
        max_pending_requests: 50
        max_requests: 50
        max_retries: 5
  
  # Platform Services cluster
  - name: platform_services_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/health"
    load_assignment:
      cluster_name: platform_services_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: platform-services
                port_value: 8007
    
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 100
        max_pending_requests: 100
        max_requests: 100
        max_retries: 10
  
  # Automation Services cluster
  - name: automation_services_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/health"
    load_assignment:
      cluster_name: automation_services_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: automation-services
                port_value: 8006
    
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 50
        max_pending_requests: 50
        max_requests: 50
        max_retries: 5
  
  # Frontend cluster
  - name: frontend_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/api/health"
    load_assignment:
      cluster_name: frontend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: frontend
                port_value: 3000
    
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 200
        max_pending_requests: 200
        max_requests: 200
        max_retries: 10
  
  # Jaeger cluster for tracing
  - name: jaeger_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: jaeger_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: jaeger-all-in-one
                port_value: 14268