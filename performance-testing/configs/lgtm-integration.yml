# LGTM Stack Integration Configuration for Performance Testing
# Loki (Logs) + Grafana (Visualization) + Tempo (Traces) + Mimir (Metrics)

version: '3.8'

services:
  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yml:/etc/loki/local-config.yaml
      - loki-data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=performance123
      - GF_FEATURE_TOGGLES_ENABLE=tracing
      - GF_INSTALL_PLUGINS=grafana-pyroscope-datasource
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - lgtm-monitoring
    restart: unless-stopped
    depends_on:
      - loki
      - tempo
      - mimir

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:2.3.0
    command: 
      - "-config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo/config.yml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "14268:14268" # Jaeger ingest
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # Mimir - Metrics storage (Prometheus-compatible)
  mimir:
    image: grafana/mimir:2.10.0
    command:
      - "-config.file=/etc/mimir.yaml"
      - "-target=all"
    volumes:
      - ./mimir/config.yml:/etc/mimir.yaml
      - mimir-data:/data
    ports:
      - "9009:9009"
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # Prometheus - Metrics collection (feeding into Mimir)
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--remote-write-receiver'
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # Promtail - Log shipper for Loki
  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - lgtm-monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # OpenTelemetry Collector - Traces and metrics collection
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel/collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    networks:
      - lgtm-monitoring
    restart: unless-stopped
    depends_on:
      - tempo
      - mimir

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - lgtm-monitoring
    restart: unless-stopped

  # K6 with LGTM integration
  k6-performance:
    image: grafana/k6:0.46.0
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
      - K6_TRACING_ENABLED=true
      - K6_TRACING_ENDPOINT=http://tempo:4317
    volumes:
      - ../k6:/scripts
      - ../test-data:/test-data
      - ../reports:/reports
    networks:
      - lgtm-monitoring
      - pyairtable-network
    depends_on:
      - tempo
      - mimir
      - loki

  # Performance Test Dashboard
  performance-dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_URL=http://prometheus:9090
      - LOKI_URL=http://loki:3100
      - TEMPO_URL=http://tempo:3200
    volumes:
      - ../dashboard:/app
      - ../reports:/reports
    networks:
      - lgtm-monitoring
    depends_on:
      - grafana
      - prometheus
      - loki
      - tempo

networks:
  lgtm-monitoring:
    driver: bridge
  pyairtable-network:
    external: true

volumes:
  grafana-data:
  loki-data:
  tempo-data:
  mimir-data:
  prometheus-data: