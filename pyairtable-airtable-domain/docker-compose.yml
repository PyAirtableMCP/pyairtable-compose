version: '3.8'

services:
  # Main application service
  airtable-domain:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/pyairtable_dev
      - REDIS_URL=redis://redis:6379/0
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN:-}
      - SECURITY_INTERNAL_API_KEY=${INTERNAL_API_KEY:-dev_internal_key}
      - SECURITY_JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret}
      - OBSERVABILITY_LOG_LEVEL=DEBUG
      - OBSERVABILITY_ENABLE_METRICS=true
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./migrations:/app/migrations
    restart: unless-stopped
    networks:
      - pyairtable-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=pyairtable_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - pyairtable-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - pyairtable-network
    profiles:
      - monitoring

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: celery -A src.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/pyairtable_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN:-}
      - OBSERVABILITY_LOG_LEVEL=DEBUG
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    restart: unless-stopped
    networks:
      - pyairtable-network
    profiles:
      - workers

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: celery -A src.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/pyairtable_dev
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN:-}
      - OBSERVABILITY_LOG_LEVEL=DEBUG
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    restart: unless-stopped
    networks:
      - pyairtable-network
    profiles:
      - workers

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  pyairtable-network:
    driver: bridge