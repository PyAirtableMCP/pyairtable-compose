# Universal Blue-Green Deployment Template for PyAirtable Services
# This template provides zero-downtime deployments with comprehensive health checks and rollback capabilities

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{SERVICE_NAME}}-blue-green-config"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    deployment-strategy: blue-green
data:
  active_color: "blue"
  traffic_split: "100"
  rollback_enabled: "true"
  health_check_path: "/health"
  readiness_check_path: "/ready"
  health_check_timeout: "30s"
  deployment_timeout: "600s"
  rollback_timeout: "300s"

---
# Blue Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{SERVICE_NAME}}-blue"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: blue
    deployment-strategy: blue-green
    tier: "{{TIER}}"
spec:
  replicas: "{{BLUE_REPLICAS}}"
  selector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
      version: blue
  template:
    metadata:
      labels:
        app: "{{SERVICE_NAME}}"
        version: blue
        deployment-strategy: blue-green
        tier: "{{TIER}}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{METRICS_PORT}}"
        prometheus.io/path: "/metrics"
        deployment.timestamp: "{{TIMESTAMP}}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: "{{SERVICE_NAME}}"
        image: "{{IMAGE_REGISTRY}}/{{SERVICE_NAME}}:{{IMAGE_TAG}}"
        imagePullPolicy: Always
        ports:
        - containerPort: "{{SERVICE_PORT}}"
          name: http
          protocol: TCP
        - containerPort: "{{METRICS_PORT}}"
          name: metrics
          protocol: TCP
        env:
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: ENVIRONMENT
          value: "{{ENVIRONMENT}}"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: "{{SERVICE_NAME}}-config"
        - secretRef:
            name: "{{SERVICE_NAME}}-secrets"
        livenessProbe:
          httpGet:
            path: "{{HEALTH_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: "{{READINESS_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "{{HEALTH_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
          successThreshold: 1
        resources:
          requests:
            cpu: "{{CPU_REQUEST}}"
            memory: "{{MEMORY_REQUEST}}"
          limits:
            cpu: "{{CPU_LIMIT}}"
            memory: "{{MEMORY_LIMIT}}"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Green Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{SERVICE_NAME}}-green"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: green
    deployment-strategy: blue-green
    tier: "{{TIER}}"
spec:
  replicas: "{{GREEN_REPLICAS}}"
  selector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
      version: green
  template:
    metadata:
      labels:
        app: "{{SERVICE_NAME}}"
        version: green
        deployment-strategy: blue-green
        tier: "{{TIER}}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{METRICS_PORT}}"
        prometheus.io/path: "/metrics"
        deployment.timestamp: "{{TIMESTAMP}}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: "{{SERVICE_NAME}}"
        image: "{{IMAGE_REGISTRY}}/{{SERVICE_NAME}}:{{NEW_IMAGE_TAG}}"
        imagePullPolicy: Always
        ports:
        - containerPort: "{{SERVICE_PORT}}"
          name: http
          protocol: TCP
        - containerPort: "{{METRICS_PORT}}"
          name: metrics
          protocol: TCP
        env:
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: ENVIRONMENT
          value: "{{ENVIRONMENT}}"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: "{{SERVICE_NAME}}-config"
        - secretRef:
            name: "{{SERVICE_NAME}}-secrets"
        livenessProbe:
          httpGet:
            path: "{{HEALTH_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: "{{READINESS_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "{{HEALTH_CHECK_PATH}}"
            port: "{{SERVICE_PORT}}"
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
          successThreshold: 1
        resources:
          requests:
            cpu: "{{CPU_REQUEST}}"
            memory: "{{MEMORY_REQUEST}}"
          limits:
            cpu: "{{CPU_LIMIT}}"
            memory: "{{MEMORY_LIMIT}}"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: "{{SERVICE_NAME}}-blue"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: blue
    deployment-strategy: blue-green
spec:
  selector:
    app: "{{SERVICE_NAME}}"
    version: blue
  ports:
  - name: http
    port: "{{SERVICE_PORT}}"
    targetPort: "{{SERVICE_PORT}}"
    protocol: TCP
  - name: metrics
    port: "{{METRICS_PORT}}"
    targetPort: "{{METRICS_PORT}}"
    protocol: TCP
  type: ClusterIP

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: "{{SERVICE_NAME}}-green"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: green
    deployment-strategy: blue-green
spec:
  selector:
    app: "{{SERVICE_NAME}}"
    version: green
  ports:
  - name: http
    port: "{{SERVICE_PORT}}"
    targetPort: "{{SERVICE_PORT}}"
    protocol: TCP
  - name: metrics
    port: "{{METRICS_PORT}}"
    targetPort: "{{METRICS_PORT}}"
    protocol: TCP
  type: ClusterIP

---
# Active Service (routes to active color)
apiVersion: v1
kind: Service
metadata:
  name: "{{SERVICE_NAME}}-active"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    service-type: active
    deployment-strategy: blue-green
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  selector:
    app: "{{SERVICE_NAME}}"
    version: "{{ACTIVE_VERSION}}"
  ports:
  - name: http
    port: "{{SERVICE_PORT}}"
    targetPort: "{{SERVICE_PORT}}"
    protocol: TCP
  type: "{{SERVICE_TYPE}}"

---
# HorizontalPodAutoscaler for Blue
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: "{{SERVICE_NAME}}-blue-hpa"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: blue
    deployment-strategy: blue-green
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{SERVICE_NAME}}-blue"
  minReplicas: "{{MIN_REPLICAS}}"
  maxReplicas: "{{MAX_REPLICAS}}"
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# HorizontalPodAutoscaler for Green
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: "{{SERVICE_NAME}}-green-hpa"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: green
    deployment-strategy: blue-green
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{SERVICE_NAME}}-green"
  minReplicas: 0
  maxReplicas: "{{MAX_REPLICAS}}"
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: "{{SERVICE_NAME}}-blue-green"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    monitoring: prometheus
    deployment-strategy: blue-green
spec:
  selector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# PodDisruptionBudget for Blue
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "{{SERVICE_NAME}}-blue-pdb"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: blue
    deployment-strategy: blue-green
spec:
  minAvailable: "{{PDB_MIN_AVAILABLE}}"
  selector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
      version: blue

---
# PodDisruptionBudget for Green
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "{{SERVICE_NAME}}-green-pdb"  
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    version: green
    deployment-strategy: blue-green
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
      version: green

---
# NetworkPolicy for Blue-Green deployments
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: "{{SERVICE_NAME}}-blue-green-netpol"
  namespace: "{{NAMESPACE}}"
  labels:
    app: "{{SERVICE_NAME}}"
    deployment-strategy: blue-green
spec:
  podSelector:
    matchLabels:
      app: "{{SERVICE_NAME}}"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: "{{NAMESPACE}}"
    ports:
    - protocol: TCP
      port: "{{SERVICE_PORT}}"
    - protocol: TCP
      port: "{{METRICS_PORT}}"
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: "{{NAMESPACE}}"
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []  # Allow external traffic
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80