# Blue-Green Deployment Configuration for PyAirtable
# Provides zero-downtime deployments with instant rollback capability

apiVersion: v1
kind: ConfigMap
metadata:
  name: blue-green-config
  namespace: pyairtable-prod
data:
  active_color: "blue"
  traffic_split: "100"
  rollback_enabled: "true"
  health_check_path: "/health"
  health_check_timeout: "30s"
  
---
# Blue Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-blue
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: blue
    deployment-strategy: blue-green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
      version: blue
  template:
    metadata:
      labels:
        app: api-gateway
        version: blue
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: ghcr.io/reg-kris/pyairtable-compose/api-gateway:stable
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: ENVIRONMENT
          value: "prod"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL

---
# Green Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-green
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: green
    deployment-strategy: blue-green
spec:
  replicas: 0  # Initially scaled to 0
  selector:
    matchLabels:
      app: api-gateway
      version: green
  template:
    metadata:
      labels:
        app: api-gateway
        version: green
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: ghcr.io/reg-kris/pyairtable-compose/api-gateway:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: ENVIRONMENT
          value: "prod"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-blue
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: blue
spec:
  selector:
    app: api-gateway
    version: blue
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-green
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: green
spec:
  selector:
    app: api-gateway
    version: green
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Active Service (routes to active color)
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-active
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    service-type: active
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  selector:
    app: api-gateway
    version: blue  # Initially points to blue
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: LoadBalancer

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: pyairtable-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  tls:
  - hosts:
    - pyairtable.com
    secretName: api-gateway-tls
  rules:
  - host: pyairtable.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: api-gateway-active
            port:
              number: 8000

---
# HorizontalPodAutoscaler for Blue
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-blue-hpa
  namespace: pyairtable-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway-blue
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# HorizontalPodAutoscaler for Green
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-green-hpa
  namespace: pyairtable-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway-green
  minReplicas: 0
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: api-gateway-blue-green
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: api-gateway
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# PodDisruptionBudget for Blue
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-blue-pdb
  namespace: pyairtable-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway
      version: blue

---
# PodDisruptionBudget for Green
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-green-pdb
  namespace: pyairtable-prod
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: api-gateway
      version: green

---
# NetworkPolicy for Blue-Green deployments
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-blue-green-netpol
  namespace: pyairtable-prod
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pyairtable-prod
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []  # Allow external traffic
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80