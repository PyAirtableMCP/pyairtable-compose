version: '3.8'

services:
  # Go API Gateway - High-performance reverse proxy
  api-gateway-go:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Server configuration
      - PORT=8080
      - HOST=0.0.0.0
      - ENVIRONMENT=development
      
      # Service URLs (pointing to existing Python services)
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator:8003
      - MCP_SERVER_URL=http://mcp-server:8001
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - PLATFORM_SERVICES_URL=http://platform-services-go:8081
      - AUTOMATION_SERVICES_URL=http://automation-services-go:8082
      - PERMISSION_SERVICE_URL=http://permission-service:8085
      
      # Authentication
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - API_KEY=${API_KEY}
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-true}
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Rate limiting
      - RATE_LIMIT_RPM=1000
      - RATE_LIMIT_BURST=50
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_NAMESPACE=pyairtable
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Go Platform Services - Auth + Analytics
  platform-services-go:
    build:
      context: .
      dockerfile: cmd/platform-services/Dockerfile
    ports:
      - "8081:8081"
    environment:
      # Server configuration
      - PORT=8081
      - HOST=0.0.0.0
      - ENVIRONMENT=development
      
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      - DB_CONN_MAX_LIFETIME=300
      
      # Redis
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      
      # JWT
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - JWT_ISSUER=pyairtable
      - JWT_EXPIRES_IN=86400
      
      # Auth
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-true}
      - API_KEY=${API_KEY}
      - PASSWORD_MIN_LENGTH=8
      - PASSWORD_HASH_ROUNDS=12
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Analytics
      - ANALYTICS_RETENTION_DAYS=90
      - METRICS_BATCH_SIZE=100
      - METRICS_FLUSH_INTERVAL=10
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_NAMESPACE=pyairtable
      
      # Rate limiting
      - RATE_LIMIT_RPM=500
      - RATE_LIMIT_BURST=25
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Go Automation Services - File processing + Workflows
  automation-services-go:
    build:
      context: .
      dockerfile: cmd/automation-services/Dockerfile
    ports:
      - "8082:8082"
    environment:
      # Server configuration
      - PORT=8082
      - HOST=0.0.0.0
      - ENVIRONMENT=development
      
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      
      # Redis
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=1
      
      # JWT
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - JWT_ISSUER=pyairtable
      
      # Auth
      - API_KEY=${API_KEY}
      - REQUIRE_API_KEY=${REQUIRE_API_KEY:-true}
      
      # File processing
      - MAX_FILE_SIZE=10485760  # 10MB
      - ALLOWED_EXTENSIONS=pdf,doc,docx,txt,csv,xlsx,json
      - UPLOAD_DIR=/tmp/uploads
      
      # Workflow configuration
      - DEFAULT_WORKFLOW_TIMEOUT=300
      - MAX_WORKFLOW_RETRIES=3
      - SCHEDULER_CHECK_INTERVAL=30
      - WORKER_POOL_SIZE=100
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_NAMESPACE=pyairtable
      
      # Rate limiting
      - RATE_LIMIT_RPM=200
      - RATE_LIMIT_BURST=10
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - pyairtable-network
    volumes:
      - file-uploads:/tmp/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Go Permission Service - RBAC and permissions management
  permission-service:
    build:
      context: ./permission-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      # Server configuration
      - PORT=8085
      - HOST=0.0.0.0
      - ENVIRONMENT=development
      
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=pyairtable_permissions
      - DB_SSLMODE=disable
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=2
      
      # Auth Service Integration
      - AUTH_SERVICE_URL=http://platform-services-go:8081
      
      # JWT (for backward compatibility)
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    depends_on:
      - redis
      - postgres
      - platform-services-go
    restart: unless-stopped
    networks:
      - pyairtable-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Existing Python services (keep the ones we're not migrating)
  
  # LLM Orchestrator - KEEP PYTHON (AI/ML ecosystem advantage)
  llm-orchestrator:
    image: ghcr.io/reg-kris/llm-orchestrator-py:latest
    build:
      context: ../llm-orchestrator-py
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MCP_SERVER_HTTP_URL=http://mcp-server:8001
      - USE_HTTP_MCP=true
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - USE_REDIS_SESSIONS=true
      - THINKING_BUDGET=${THINKING_BUDGET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - mcp-server
      - redis
    restart: unless-stopped
    networks:
      - pyairtable-network

  # MCP Server - KEEP PYTHON (business logic complexity)
  mcp-server:
    image: ghcr.io/reg-kris/mcp-server-py:latest
    build:
      context: ../mcp-server-py
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - AIRTABLE_GATEWAY_API_KEY=${API_KEY}
      - MCP_SERVER_MODE=http
      - MCP_SERVER_PORT=8001
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - airtable-gateway
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Airtable Gateway - COULD MIGRATE TO GO (but lower priority)
  airtable-gateway:
    image: ghcr.io/reg-kris/airtable-gateway-py:latest
    build:
      context: ../airtable-gateway-py
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Infrastructure services
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pyairtable-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Frontend - KEEP (Next.js)
  frontend:
    image: ghcr.io/reg-kris/pyairtable-frontend:latest
    build:
      context: ../pyairtable-frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      # Point to Go API Gateway
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_API_GATEWAY_URL=http://api-gateway-go:8080
      
      # Internal service URLs
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator:8003
      - MCP_SERVER_URL=http://mcp-server:8001
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - PLATFORM_SERVICES_URL=http://platform-services-go:8081
      - AUTOMATION_SERVICES_URL=http://automation-services-go:8082
      
      # Auth
      - API_KEY=${API_KEY}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-default-secret-change-in-production}
      - NEXTAUTH_URL=http://localhost:3000
      
      # Config
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - NEXT_PUBLIC_ENABLE_DEBUG=${ENABLE_DEBUG:-false}
      - NEXT_PUBLIC_SHOW_COST_TRACKING=${SHOW_COST_TRACKING:-true}
    volumes:
      - ../pyairtable-frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-gateway-go
      - llm-orchestrator
      - platform-services-go
      - automation-services-go
    restart: unless-stopped
    networks:
      - pyairtable-network

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - pyairtable-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - pyairtable-network

networks:
  pyairtable-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  file-uploads:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local