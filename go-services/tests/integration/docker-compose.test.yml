version: '3.8'

# Integration Test Environment
# This compose file spins up all services in test mode with test databases

services:
  # Test infrastructure
  redis-test:
    image: redis:7-alpine
    command: redis-server --requirepass testpassword
    environment:
      - REDIS_PASSWORD=testpassword
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres-test:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=pyairtable_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    volumes:
      - ../../../migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./fixtures/test-data.sql:/docker-entrypoint-initdb.d/99-test-data.sql:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d pyairtable_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Core Go services
  api-gateway-test:
    build:
      context: ../../
      dockerfile: cmd/api-gateway/Dockerfile
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - ENVIRONMENT=test
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator-test:8003
      - MCP_SERVER_URL=http://mcp-server-test:8001
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway-test:8002
      - PLATFORM_SERVICES_URL=http://platform-services-test:8081
      - AUTOMATION_SERVICES_URL=http://automation-services-test:8082
      - PERMISSION_SERVICE_URL=http://permission-service-test:8085
      - JWT_SECRET=test-jwt-secret-for-testing-only
      - API_KEY=test-api-key-12345
      - REQUIRE_API_KEY=true
      - CORS_ORIGINS=*
      - RATE_LIMIT_RPM=10000
      - RATE_LIMIT_BURST=500
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
    depends_on:
      redis-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  platform-services-test:
    build:
      context: ../../
      dockerfile: cmd/platform-services/Dockerfile
    environment:
      - PORT=8081
      - HOST=0.0.0.0
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://redis-test:6379
      - REDIS_PASSWORD=testpassword
      - REDIS_DB=0
      - JWT_SECRET=test-jwt-secret-for-testing-only
      - JWT_ISSUER=pyairtable-test
      - JWT_EXPIRES_IN=86400
      - API_KEY=test-api-key-12345
      - REQUIRE_API_KEY=true
      - PASSWORD_MIN_LENGTH=6
      - PASSWORD_HASH_ROUNDS=4  # Faster for tests
      - CORS_ORIGINS=*
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
    depends_on:
      redis-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  automation-services-test:
    build:
      context: ../../
      dockerfile: cmd/automation-services/Dockerfile
    environment:
      - PORT=8082
      - HOST=0.0.0.0
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://redis-test:6379
      - REDIS_PASSWORD=testpassword
      - REDIS_DB=1
      - JWT_SECRET=test-jwt-secret-for-testing-only
      - API_KEY=test-api-key-12345
      - REQUIRE_API_KEY=true
      - MAX_FILE_SIZE=1048576  # 1MB for tests
      - ALLOWED_EXTENSIONS=txt,json,csv
      - UPLOAD_DIR=/tmp/test-uploads
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
    depends_on:
      redis-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - test-uploads:/tmp/test-uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  permission-service-test:
    build:
      context: ../../permission-service
      dockerfile: Dockerfile
    environment:
      - PORT=8085
      - HOST=0.0.0.0
      - ENVIRONMENT=test
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - DB_NAME=pyairtable_test
      - DB_SSLMODE=disable
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - REDIS_PASSWORD=testpassword
      - REDIS_DB=2
      - AUTH_SERVICE_URL=http://platform-services-test:8081
      - JWT_SECRET=test-jwt-secret-for-testing-only
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - CORS_ORIGINS=*
    depends_on:
      redis-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      platform-services-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Python services for integration testing
  airtable-gateway-test:
    image: nginx:alpine
    volumes:
      - ./mocks/airtable-gateway:/usr/share/nginx/html:ro
      - ./mocks/airtable-gateway.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  mcp-server-test:
    image: nginx:alpine
    volumes:
      - ./mocks/mcp-server:/usr/share/nginx/html:ro
      - ./mocks/mcp-server.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  llm-orchestrator-test:
    image: nginx:alpine
    volumes:
      - ./mocks/llm-orchestrator:/usr/share/nginx/html:ro
      - ./mocks/llm-orchestrator.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  test-network:
    driver: bridge

volumes:
  test-uploads:
    driver: local