version: '3.8'

services:
  # Enhanced API Gateway
  api-gateway-enhanced:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    ports:
      - "8080:8080"   # API Gateway
      - "9090:9090"   # Metrics
    environment:
      - PORT=8080
      - METRICS_PORT=9090
      - REDIS_URL=redis:6379
      - CORS_ORIGINS=*
      - JWT_ISSUER=https://auth.pyairtable.com
      - JWT_AUDIENCE=api-gateway
      - JWKS_ENDPOINT=https://auth.pyairtable.com/.well-known/jwks.json
      - OAUTH2_ISSUER=https://auth.pyairtable.com
      - SERVICE_DISCOVERY_TYPE=redis
      - ENABLE_SERVICE_DISCOVERY=true
      - LOG_LEVEL=info
      - ENVIRONMENT=development
      - VERSION=2.0.0
    depends_on:
      - redis
      - prometheus
    networks:
      - gateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching, sessions, and service discovery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - gateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - gateway-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - gateway-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP
      - "6831:6831/udp"  # Jaeger UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - gateway-network
    restart: unless-stopped

  # Example backend services for testing
  auth-service:
    image: nginx:alpine
    ports:
      - "8081:80"
    volumes:
      - ./test-services/auth-service.conf:/etc/nginx/conf.d/default.conf
    networks:
      - gateway-network
    restart: unless-stopped

  user-service:
    image: nginx:alpine
    ports:
      - "8082:80"
    volumes:
      - ./test-services/user-service.conf:/etc/nginx/conf.d/default.conf
    networks:
      - gateway-network
    restart: unless-stopped

  airtable-service:
    image: nginx:alpine
    ports:
      - "8083:80"
    volumes:
      - ./test-services/airtable-service.conf:/etc/nginx/conf.d/default.conf
    networks:
      - gateway-network
    restart: unless-stopped

  # ElasticSearch for log aggregation (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - gateway-network
    restart: unless-stopped
    profiles:
      - logging

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gateway-network
    restart: unless-stopped
    profiles:
      - logging

  # Logstash for log processing (optional)
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - gateway-network
    restart: unless-stopped
    profiles:
      - logging

  # AlertManager for alerting (optional)
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - gateway-network
    restart: unless-stopped
    profiles:
      - alerting

networks:
  gateway-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  alertmanager-data:
    driver: local

# Health check configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s