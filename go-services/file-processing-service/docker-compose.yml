version: '3.8'

services:
  file-processing-service:
    build: .
    ports:
      - "8080:8080"  # Application port
      - "9090:9090"  # Metrics port
    environment:
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_MAX_UPLOAD_SIZE=104857600  # 100MB
      
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=file_processing
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL_MODE=disable
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Storage configuration (MinIO)
      - STORAGE_PROVIDER=minio
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=file-processing
      - MINIO_USE_SSL=false
      
      # Processing configuration
      - PROCESSING_WORKER_COUNT=4
      - PROCESSING_QUEUE_SIZE=1000
      - PROCESSING_TIMEOUT=5m
      - PROCESSING_MEMORY_LIMIT=536870912  # 512MB
      - PROCESSING_TEMP_DIR=/app/temp
      
      # Security configuration
      - SECURITY_VIRUS_SCANNING=false
      - CLAMAV_HOST=clamav
      - CLAMAV_PORT=3310
      
      # Monitoring configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - METRICS_PORT=9090
      - TRACING_ENABLED=false
      
      # WebSocket configuration
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_PATH=/ws
      - WEBSOCKET_MAX_CONNECTIONS=1000
      
    volumes:
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - minio
    restart: unless-stopped
    networks:
      - file-processing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=file_processing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - file-processing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - file-processing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - file-processing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: ClamAV for virus scanning
  clamav:
    image: clamav/clamav:latest
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    networks:
      - file-processing-network
    profiles:
      - security
    healthcheck:
      test: ["CMD", "/usr/local/bin/clamd", "--ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - file-processing-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - file-processing-network
    profiles:
      - monitoring

networks:
  file-processing-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  clamav_data:
  prometheus_data:
  grafana_data: