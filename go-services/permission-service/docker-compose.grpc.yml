version: '3.8'

services:
  permission-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: permission-service-grpc
    ports:
      - "8085:8085"    # REST API port
      - "50051:50051"  # gRPC port
      - "9090:9090"    # Prometheus metrics port
    environment:
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=pyairtable_permissions
      - DB_SSLMODE=disable
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Service configuration
      - PORT=8085
      - GRPC_PORT=50051
      - GRPC_REFLECTION=true
      - METRICS_PORT=9090
      
      # Auth service
      - AUTH_SERVICE_URL=http://auth-service:8082
      
      # Observability
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      - SERVICE_NAME=permission-service
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    networks:
      - permission-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: permission-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=pyairtable_permissions
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - permission-network

  redis:
    image: redis:7-alpine
    container_name: permission-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - permission-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: permission-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - permission-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: permission-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - permission-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: permission-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - permission-network

  # gRPC client example
  grpc-client-example:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: permission-grpc-client
    environment:
      - GRPC_SERVER_ADDRESS=permission-service:50051
      - LOG_LEVEL=info
    depends_on:
      - permission-service
    networks:
      - permission-network
    profiles:
      - client

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  permission-network:
    driver: bridge