version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-pyairtable}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ../init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./migrations/init-permissions-db.sql:/docker-entrypoint-initdb.d/02-init-permissions.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - phase1-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis_dev_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - phase1-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      PORT: 8080
      AUTH_SERVICE_URL: http://auth-service:8001
      USER_SERVICE_URL: http://user-service:8002
      AIRTABLE_GATEWAY_URL: http://airtable-gateway:8003
      PERMISSION_SERVICE_URL: http://permission-service:8085
      CORS_ORIGINS: "${CORS_ORIGINS:-*}"
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-100}
      JWT_SECRET: ${JWT_SECRET}
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      airtable-gateway:
        condition: service_started
      permission-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - phase1-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001"
    environment:
      PORT: 8001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_dev_password}@postgres:5432/${POSTGRES_DB:-pyairtable}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      CORS_ORIGINS: "${CORS_ORIGINS:-*}"
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      API_KEY: ${API_KEY}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-8}
      PASSWORD_HASH_ROUNDS: ${PASSWORD_HASH_ROUNDS:-12}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - phase1-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT:-8002}:8002"
    environment:
      PORT: 8002
      # Database connection URL format
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_dev_password}@postgres:5432/${POSTGRES_DB:-pyairtable}?sslmode=disable
      # Individual database variables (fallback for config)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev_password}
      DB_NAME: ${POSTGRES_DB:-pyairtable}
      DB_SSL_MODE: disable
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_password}
      REDIS_DB: 0
      # Auth
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      CORS_ORIGINS: "${CORS_ORIGINS:-*}"
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      API_KEY: ${API_KEY}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-900}
      AUTH_SERVICE_URL: http://auth-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - phase1-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  airtable-gateway:
    build:
      context: ../python-services/airtable-gateway
      dockerfile: Dockerfile
    ports:
      - "${AIRTABLE_GATEWAY_PORT:-8003}:8002"
    environment:
      PORT: 8002
      AIRTABLE_TOKEN: ${AIRTABLE_TOKEN}
      AIRTABLE_BASE: ${AIRTABLE_BASE}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379/0
      API_KEY: ${API_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY:-${API_KEY}}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-3600}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - phase1-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  permission-service:
    build:
      context: ./permission-service
      dockerfile: Dockerfile
    ports:
      - "${PERMISSION_SERVICE_PORT:-8085}:8085"
    environment:
      PORT: 8085
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev_password}
      DB_NAME: pyairtable_permissions
      DB_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_password}
      REDIS_DB: 1
      AUTH_SERVICE_URL: http://auth-service:8001
      JWT_SECRET: ${JWT_SECRET}
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      CORS_ORIGINS: "${CORS_ORIGINS:-*}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - phase1-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  phase1-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local