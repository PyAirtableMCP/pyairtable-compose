version: '3.8'

# Production overrides for PyAirtable Platform
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # =============================================================================
  # PRODUCTION OVERRIDES - SECURITY & PERFORMANCE
  # =============================================================================

  # API Gateway - Production settings
  api-gateway:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://app.pyairtable.com}
      - REQUIRE_API_KEY=true
      - RATE_LIMIT_RPM=${RATE_LIMIT_RPM:-100}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-10}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    volumes: []  # Remove dev volume mounts

  # LLM Orchestrator - Production settings
  llm-orchestrator:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - THINKING_BUDGET=${THINKING_BUDGET:-10000}
      - USE_REDIS_SESSIONS=true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    volumes: []

  # MCP Server - Production settings
  mcp-server:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes: []

  # Airtable Gateway - Production settings
  airtable-gateway:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - AIRTABLE_RATE_LIMIT=${AIRTABLE_RATE_LIMIT:-5}
      - CACHE_TTL=${AIRTABLE_CACHE_TTL:-3600}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes: []

  # Platform Services - Production settings
  platform-services:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - REQUIRE_API_KEY=true
      - PASSWORD_HASH_ROUNDS=${PASSWORD_HASH_ROUNDS:-12}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - ANALYTICS_RETENTION_DAYS=${ANALYTICS_RETENTION_DAYS:-365}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes: []

  # Automation Services - Production settings
  automation-services:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-50MB}
      - DEFAULT_WORKFLOW_TIMEOUT=${DEFAULT_WORKFLOW_TIMEOUT:-900}
      - MAX_WORKFLOW_RETRIES=${MAX_WORKFLOW_RETRIES:-5}
      - UPLOAD_DIR=/app/uploads
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - file-uploads-prod:/app/uploads

  # SAGA Orchestrator - Production settings
  saga-orchestrator:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - SAGA_TIMEOUT_SECONDS=${SAGA_TIMEOUT_SECONDS:-7200}
      - SAGA_RETRY_ATTEMPTS=${SAGA_RETRY_ATTEMPTS:-5}
      - ENABLE_METRICS=true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes: []

  # Frontend - Production settings
  frontend:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.pyairtable.com}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://app.pyairtable.com}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - NEXT_PUBLIC_ENABLE_DEBUG=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    volumes: []  # Remove dev volume mounts

  # =============================================================================
  # INFRASTRUCTURE - PRODUCTION OPTIMIZATIONS
  # =============================================================================

  # Redis - Production configuration
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    volumes:
      - redis-data-prod:/data

  # PostgreSQL - Production configuration
  postgres:
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c huge_pages=try
      -c max_wal_size=2GB
      -c min_wal_size=1GB
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    volumes:
      - postgres-data-prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro

  # =============================================================================
  # PRODUCTION MONITORING & LOGGING
  # =============================================================================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-monitoring.pyairtable.com}
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY & SSL
  # =============================================================================

  # Nginx - Reverse proxy and SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api-gateway
      - frontend
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped

# =============================================================================
# PRODUCTION NETWORKS - SECURITY HARDENING
# =============================================================================
networks:
  pyairtable-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16

# =============================================================================
# PRODUCTION VOLUMES - PERSISTENT DATA
# =============================================================================
volumes:
  redis-data-prod:
    driver: local
  postgres-data-prod:
    driver: local
  file-uploads-prod:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local