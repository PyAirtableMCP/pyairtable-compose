# Docker Compose for PyAirtable with Istio Service Mesh Development
# Provides local development environment with Istio sidecar simulation

version: '3.8'

services:
  # =============================================================================
  # ISTIO DEVELOPMENT SIMULATION
  # =============================================================================
  
  istio-proxy-simulator:
    image: envoyproxy/envoy:v1.28-latest
    command: ["/usr/local/bin/envoy", "-c", "/etc/envoy/envoy.yaml", "--service-cluster", "pyairtable-dev"]
    volumes:
      - ./service-mesh/dev/envoy.yaml:/etc/envoy/envoy.yaml:ro
    ports:
      - "8080:8080"   # Main proxy port
      - "9901:9901"   # Admin interface
      - "15000:15000" # Envoy admin
    networks:
      - pyairtable-mesh
      - pyairtable-public
    environment:
      ENVOY_LOG_LEVEL: info
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9901/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Simulated Istio Control Plane for development
  istio-pilot-simulator:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:15010'
    volumes:
      - ./service-mesh/dev/pilot-config.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "15010:15010"
    networks:
      - pyairtable-mesh

  # =============================================================================
  # INFRASTRUCTURE WITH MESH LABELS
  # =============================================================================
  
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pyairtable}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - pyairtable-mesh
    labels:
      # Istio mesh labels for development
      - "istio.io/app=postgres"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - pyairtable-mesh
    labels:
      - "istio.io/app=redis"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=cache"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # =============================================================================
  # APPLICATION SERVICES WITH MESH INTEGRATION
  # =============================================================================

  api-gateway:
    build:
      context: ./go-services/api-gateway
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8080
      HOST: 0.0.0.0
      ENVIRONMENT: development
      
      # Service URLs (through mesh)
      AUTH_SERVICE_URL: http://auth-service:8001
      USER_SERVICE_URL: http://user-service:8002
      AIRTABLE_GATEWAY_URL: http://airtable-gateway:8002
      LLM_ORCHESTRATOR_URL: http://llm-orchestrator:8003
      PLATFORM_SERVICES_URL: http://platform-services:8007
      
      # Mesh configuration
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      
      # Development settings
      LOG_LEVEL: debug
      CORS_ORIGINS: "*"
      JWT_SECRET: ${JWT_SECRET}
      API_KEY: ${API_KEY}
    ports:
      - "8000:8080"
    networks:
      - pyairtable-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=api-gateway"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=api-gateway"
      - "pyairtable.io/tier=frontend"
    volumes:
      - ./service-mesh/dev/sidecar-config.json:/app/sidecar-config.json:ro

  auth-service:
    build:
      context: ./go-services/auth-service
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8001
      HOST: 0.0.0.0
      ENVIRONMENT: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: debug
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
    networks:
      - pyairtable-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=auth-service"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=auth-service"
      - "pyairtable.io/tier=backend"

  user-service:
    build:
      context: ./go-services/user-service
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8002
      HOST: 0.0.0.0
      ENVIRONMENT: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: debug
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
    networks:
      - pyairtable-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=user-service"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=user-service"
      - "pyairtable.io/tier=backend"

  airtable-gateway:
    build:
      context: ./python-services/airtable-gateway
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8002
      AIRTABLE_TOKEN: ${AIRTABLE_TOKEN}
      AIRTABLE_BASE: ${AIRTABLE_BASE}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
      LOG_LEVEL: DEBUG
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      - pyairtable-mesh
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=airtable-gateway"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=airtable-gateway"
      - "pyairtable.io/tier=backend"

  llm-orchestrator:
    build:
      context: ./python-services/llm-orchestrator
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8003
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      MCP_SERVER_HTTP_URL: http://mcp-server:8001
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/4
      LOG_LEVEL: DEBUG
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      - pyairtable-mesh
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=llm-orchestrator"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=llm-orchestrator"
      - "pyairtable.io/tier=backend"

  platform-services:
    build:
      context: ./python-services/platform-services
      dockerfile: Dockerfile
      target: development
    environment:
      PORT: 8007
      ENVIRONMENT: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/5
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: DEBUG
      ENABLE_ISTIO_HEADERS: "true"
      ENABLE_TRACING: "true"
    networks:
      - pyairtable-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "istio.io/app=platform-services"
      - "istio.io/version=v1"
      - "security.istio.io/tlsMode=istio"
      - "pyairtable.io/component=platform-services"
      - "pyairtable.io/tier=backend"

  # =============================================================================
  # OBSERVABILITY STACK FOR MESH DEVELOPMENT
  # =============================================================================

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP
      - "14250:14250"  # Jaeger gRPC
    networks:
      - pyairtable-mesh
      - pyairtable-public
    labels:
      - "istio.io/app=jaeger"
      - "pyairtable.io/component=observability"

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus-istio-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pyairtable-mesh
      - pyairtable-public
    labels:
      - "istio.io/app=prometheus"
      - "pyairtable.io/component=observability"

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_FEATURE_TOGGLES_ENABLE: newNavigation
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - pyairtable-mesh
      - pyairtable-public
    depends_on:
      - prometheus
    labels:
      - "istio.io/app=grafana"
      - "pyairtable.io/component=observability"

  # Simulated Istio service discovery
  consul:
    image: consul:1.16
    command: |
      sh -c '
        consul agent -dev -ui -client=0.0.0.0 \
          -datacenter=pyairtable-dev \
          -node=consul-dev \
          -log-level=INFO
      '
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - pyairtable-mesh
    labels:
      - "istio.io/app=consul"
      - "pyairtable.io/component=service-discovery"

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  # Service mesh debugging and testing
  mesh-debug:
    image: curlimages/curl:latest
    command: sleep infinity
    networks:
      - pyairtable-mesh
    environment:
      API_GATEWAY_URL: http://api-gateway:8080
      AUTH_SERVICE_URL: http://auth-service:8001
      USER_SERVICE_URL: http://user-service:8002
    labels:
      - "pyairtable.io/component=debug-tools"

  # Chaos engineering simulator
  chaos-monkey:
    image: alpine/curl:latest
    command: |
      sh -c '
        while true; do
          sleep 300
          echo "Injecting chaos..."
          curl -X POST -H "x-chaos-test: enabled" http://api-gateway:8080/api/v1/airtable/health || true
          sleep 300
        done
      '
    networks:
      - pyairtable-mesh
    profiles:
      - chaos
    labels:
      - "pyairtable.io/component=chaos-engineering"

networks:
  pyairtable-mesh:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: istio-mesh
    labels:
      - "istio.io/network=pyairtable-mesh"
  pyairtable-public:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================================================
# DEVELOPMENT PROFILES
# =============================================================================
# Usage:
# docker-compose -f docker-compose.istio-dev.yml --profile observability up
# docker-compose -f docker-compose.istio-dev.yml --profile chaos up