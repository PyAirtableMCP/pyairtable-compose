version: '3.8'

services:
  # Infrastructure Services - These work
  postgres:
    image: postgres:16-alpine
    container_name: pyairtable-postgres
    environment:
      POSTGRES_DB: pyairtable
      POSTGRES_USER: pyairtable
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pyairtable}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pyairtable"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pyairtable-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-pyairtable}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Working Services - These have been fixed
  airtable-gateway:
    build:
      context: ./python-services
      dockerfile: airtable-gateway/Dockerfile
    container_name: pyairtable-airtable-gateway
    ports:
      - "8002:8002"
    environment:
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - API_KEY=${API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-pyairtable}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  mcp-server:
    build:
      context: ./python-services
      dockerfile: mcp-server/Dockerfile
    container_name: pyairtable-mcp-server
    ports:
      - "8001:8001"
    environment:
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - AIRTABLE_GATEWAY_API_KEY=${API_KEY}
      - MCP_SERVER_MODE=http
      - MCP_SERVER_PORT=8001
      - AIRTABLE_BASE=${AIRTABLE_BASE}
      - AIRTABLE_TOKEN=${AIRTABLE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      airtable-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LLM Orchestrator - This one already works
  llm-orchestrator:
    image: llm-orchestrator-test:latest
    container_name: pyairtable-llm-orchestrator
    ports:
      - "8003:8003"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway:8002
      - MCP_SERVER_URL=http://mcp-server:8001
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      airtable-gateway:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: pyairtable-network