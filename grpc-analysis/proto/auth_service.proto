syntax = "proto3";

package pyairtable.auth.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/pyairtable/auth/v1;authv1";

// Auth Service - Handles authentication and authorization with high performance
service AuthService {
  // Authentication operations
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  
  // Token validation and introspection
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc IntrospectToken(IntrospectTokenRequest) returns (IntrospectTokenResponse);
  
  // User management
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Password management
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  rpc ConfirmPasswordReset(ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);
  
  // Session management
  rpc GetActiveSessions(GetActiveSessionsRequest) returns (GetActiveSessionsResponse);
  rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse);
  rpc RevokeAllSessions(RevokeAllSessionsRequest) returns (RevokeAllSessionsResponse);
  
  // Bulk operations for performance
  rpc BatchValidateTokens(BatchValidateTokensRequest) returns (BatchValidateTokensResponse);
  rpc BatchGetUsers(BatchGetUsersRequest) returns (BatchGetUsersResponse);
  
  // Health and metrics
  rpc GetAuthStats(GetAuthStatsRequest) returns (GetAuthStatsResponse);
}

// Authentication requests/responses
message RegisterRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
  string tenant_id = 5;
  map<string, string> metadata = 6;
  bool email_verified = 7; // for admin registration
}

message RegisterResponse {
  User user = 1;
  Tokens tokens = 2;
  repeated string warnings = 3;
}

message LoginRequest {
  string email = 1;
  string password = 2;
  string tenant_id = 3; // optional, for multi-tenant auth
  bool remember_me = 4;
  ClientInfo client_info = 5;
}

message LoginResponse {
  User user = 1;
  Tokens tokens = 2;
  Session session = 3;
  repeated string warnings = 4;
}

message RefreshTokenRequest {
  string refresh_token = 1;
  ClientInfo client_info = 2;
}

message RefreshTokenResponse {
  Tokens tokens = 1;
  Session session = 2;
}

message LogoutRequest {
  string refresh_token = 1;
  bool revoke_all_sessions = 2;
}

message LogoutResponse {
  bool success = 1;
  string message = 2;
}

// Token validation
message ValidateTokenRequest {
  string access_token = 1;
  repeated string required_scopes = 2;
  string resource = 3; // optional, for resource-specific validation
}

message ValidateTokenResponse {
  bool valid = 1;
  Claims claims = 2;
  string error_message = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message IntrospectTokenRequest {
  string token = 1;
  TokenType token_type = 2;
}

message IntrospectTokenResponse {
  bool active = 1;
  Claims claims = 2;
  repeated string scopes = 3;
  string client_id = 4;
  google.protobuf.Timestamp expires_at = 5;
  google.protobuf.Timestamp issued_at = 6;
}

// User management
message GetUserRequest {
  oneof identifier {
    string user_id = 1;
    string email = 2;
  }
  string tenant_id = 3;
  bool include_sessions = 4;
  bool include_permissions = 5;
}

message GetUserResponse {
  User user = 1;
  repeated Session sessions = 2; // if include_sessions = true
  repeated Permission permissions = 3; // if include_permissions = true
}

message UpdateUserRequest {
  string user_id = 1;
  string tenant_id = 2;
  UserUpdate updates = 3;
  repeated string update_mask = 4; // fields to update
}

message UpdateUserResponse {
  User user = 1;
  repeated string warnings = 2;
}

message DeleteUserRequest {
  string user_id = 1;
  string tenant_id = 2;
  bool hard_delete = 3; // true = permanent, false = soft delete
}

message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

message ListUsersRequest {
  string tenant_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  UserFilter filter = 4;
  repeated UserSort sort = 5;
  bool include_inactive = 6;
}

message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Password management
message ChangePasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
  bool invalidate_sessions = 4;
}

message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
  int32 sessions_invalidated = 3;
}

message ResetPasswordRequest {
  string email = 1;
  string tenant_id = 2;
  string callback_url = 3;
}

message ResetPasswordResponse {
  bool success = 1;
  string message = 2;
  string reset_token = 3; // for testing/admin use
}

message ConfirmPasswordResetRequest {
  string reset_token = 1;
  string new_password = 2;
}

message ConfirmPasswordResetResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Session management
message GetActiveSessionsRequest {
  string user_id = 1;
  string tenant_id = 2;
}

message GetActiveSessionsResponse {
  repeated Session sessions = 1;
  int32 total_count = 2;
}

message RevokeSessionRequest {
  string session_id = 1;
  string user_id = 2; // for authorization
}

message RevokeSessionResponse {
  bool success = 1;
  string message = 2;
}

message RevokeAllSessionsRequest {
  string user_id = 1;
  string tenant_id = 2;
  bool except_current = 3; // keep current session active
  string current_session_id = 4;
}

message RevokeAllSessionsResponse {
  bool success = 1;
  int32 sessions_revoked = 2;
}

// Batch operations
message BatchValidateTokensRequest {
  repeated TokenValidationRequest tokens = 1;
}

message BatchValidateTokensResponse {
  repeated TokenValidationResult results = 1;
  BatchStats stats = 2;
}

message BatchGetUsersRequest {
  repeated string user_ids = 1;
  string tenant_id = 2;
  bool include_inactive = 3;
}

message BatchGetUsersResponse {
  repeated User users = 1;
  repeated string not_found = 2; // user IDs not found
  BatchStats stats = 3;
}

// Stats and metrics
message GetAuthStatsRequest {
  string tenant_id = 1; // optional, for tenant-specific stats
  google.protobuf.Duration time_range = 2;
}

message GetAuthStatsResponse {
  AuthStats stats = 1;
}

// Data models
message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  string tenant_id = 5;
  UserStatus status = 6;
  bool email_verified = 7;
  repeated string roles = 8;
  map<string, string> metadata = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  google.protobuf.Timestamp last_login_at = 12;
  string last_login_ip = 13;
  int32 login_count = 14;
}

message Tokens {
  string access_token = 1;
  string refresh_token = 2;
  string token_type = 3; // usually "Bearer"
  int64 expires_in = 4; // seconds
  repeated string scopes = 5;
}

message Session {
  string id = 1;
  string user_id = 2;
  string device_id = 3;
  string ip_address = 4;
  string user_agent = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp last_accessed = 7;
  google.protobuf.Timestamp expires_at = 8;
  bool active = 9;
  ClientInfo client_info = 10;
}

message Claims {
  string user_id = 1;
  string email = 2;
  string tenant_id = 3;
  repeated string roles = 4;
  repeated string scopes = 5;
  google.protobuf.Timestamp issued_at = 6;
  google.protobuf.Timestamp expires_at = 7;
  string issuer = 8;
  string audience = 9;
  string subject = 10;
  string session_id = 11;
}

message ClientInfo {
  string device_id = 1;
  string device_name = 2;
  string device_type = 3; // mobile, desktop, web, api
  string app_version = 4;
  string os = 5;
  string os_version = 6;
  string ip_address = 7;
  string user_agent = 8;
  map<string, string> custom_data = 9;
}

message Permission {
  string id = 1;
  string resource_type = 2;
  string resource_id = 3;
  string action = 4;
  bool granted = 5;
  google.protobuf.Timestamp granted_at = 6;
  string granted_by = 7;
}

message UserUpdate {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
  UserStatus status = 4;
  bool email_verified = 5;
  repeated string roles = 6;
  map<string, string> metadata = 7;
}

message UserFilter {
  UserStatus status = 1;
  repeated string roles = 2;
  string email_domain = 3;
  google.protobuf.Timestamp created_after = 4;
  google.protobuf.Timestamp created_before = 5;
  string search_query = 6; // search in email, name
}

message UserSort {
  UserSortField field = 1;
  SortDirection direction = 2;
}

message TokenValidationRequest {
  string token = 1;
  repeated string required_scopes = 2;
  string resource = 3;
}

message TokenValidationResult {
  string token = 1; // echo back for correlation
  bool valid = 2;
  Claims claims = 3;
  string error_message = 4;
}

message BatchStats {
  int32 total_requests = 1;
  int32 successful = 2;
  int32 failed = 3;
  double duration_ms = 4;
}

message AuthStats {
  int64 total_users = 1;
  int64 active_users = 2;
  int64 total_sessions = 3;
  int64 active_sessions = 4;
  int64 login_attempts = 5;
  int64 successful_logins = 6;
  int64 failed_logins = 7;
  int64 token_validations = 8;
  int64 token_validation_cache_hits = 9;
  double avg_response_time_ms = 10;
  google.protobuf.Timestamp collected_at = 11;
}

// Enums
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_PENDING_VERIFICATION = 4;
}

enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_ACCESS = 1;
  TOKEN_TYPE_REFRESH = 2;
  TOKEN_TYPE_RESET = 3;
  TOKEN_TYPE_VERIFICATION = 4;
}

enum UserSortField {
  USER_SORT_FIELD_UNSPECIFIED = 0;
  USER_SORT_FIELD_EMAIL = 1;
  USER_SORT_FIELD_CREATED_AT = 2;
  USER_SORT_FIELD_LAST_LOGIN = 3;
  USER_SORT_FIELD_LOGIN_COUNT = 4;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASC = 1;
  SORT_DIRECTION_DESC = 2;
}