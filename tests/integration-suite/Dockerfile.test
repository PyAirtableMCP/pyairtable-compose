# Multi-stage build for comprehensive integration test runner
FROM golang:1.21-alpine AS go-builder

# Install build dependencies
RUN apk add --no-cache git curl build-base

# Set working directory
WORKDIR /app

# Copy go modules
COPY go.mod go.sum ./
RUN go mod download

# Copy test source code
COPY . .

# Build test binaries
RUN go build -o bin/test-runner ./cmd/test-runner
RUN go build -o bin/test-framework ./internal/framework
RUN go build -o bin/chaos-injector ./internal/chaos

# Install test dependencies
RUN go install github.com/onsi/ginkgo/v2/ginkgo@latest
RUN go install github.com/pressly/goose/v3/cmd/goose@latest

FROM python:3.11-slim AS python-builder

# Install Python test dependencies
WORKDIR /app
COPY requirements.test.txt .
RUN pip install --no-cache-dir -r requirements.test.txt

# Install additional testing tools
RUN pip install --no-cache-dir \
    pytest \
    pytest-html \
    pytest-xdist \
    pytest-cov \
    locust \
    requests \
    psycopg2-binary \
    redis \
    kafka-python

FROM alpine:3.18 AS test-runner

# Install runtime dependencies
RUN apk add --no-cache \
    bash \
    curl \
    wget \
    jq \
    postgresql-client \
    redis \
    ca-certificates \
    docker-cli \
    docker-compose \
    git \
    make \
    python3 \
    py3-pip

# Install additional tools
RUN curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/local/bin/jq && \
    chmod +x /usr/local/bin/jq

# Install k6 for load testing
RUN wget -q -O- https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | \
    tar xvz --strip-components 1 -C /usr/local/bin

# Install wrk for HTTP benchmarking
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    libc-dev \
    linux-headers \
    make \
    openssl-dev \
    && git clone https://github.com/wg/wrk.git /tmp/wrk \
    && cd /tmp/wrk \
    && make \
    && cp wrk /usr/local/bin/ \
    && cd / \
    && rm -rf /tmp/wrk \
    && apk del .build-deps

# Install hey for HTTP load testing
RUN wget -O /usr/local/bin/hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64 && \
    chmod +x /usr/local/bin/hey

# Create app user
RUN adduser -D -s /bin/bash testuser

# Set working directory
WORKDIR /app

# Copy binaries from builders
COPY --from=go-builder /app/bin/* /usr/local/bin/
COPY --from=go-builder /go/bin/* /usr/local/bin/
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-builder /usr/local/bin /usr/local/bin

# Copy test framework and utilities
COPY . .

# Copy test scripts
COPY scripts/ /usr/local/bin/
RUN chmod +x /usr/local/bin/*.sh

# Create required directories
RUN mkdir -p \
    /app/test-results \
    /app/logs \
    /app/reports \
    /app/artifacts \
    /app/fixtures/generated \
    /app/monitoring/alerts

# Set proper ownership
RUN chown -R testuser:testuser /app

# Switch to app user
USER testuser

# Set environment variables
ENV PATH="/usr/local/bin:${PATH}"
ENV GOPATH="/home/testuser/go"
ENV PYTHONPATH="/app:/usr/local/lib/python3.11/site-packages"
ENV TEST_RESULTS_DIR="/app/test-results"
ENV LOG_LEVEL="info"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8888/health || exit 1

# Default command
CMD ["test-runner", "--config", "/app/config/test-config.yml", "--wait-for-services"]