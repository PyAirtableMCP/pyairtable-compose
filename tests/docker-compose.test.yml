version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pyairtable_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5433:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ../migrations:/docker-entrypoint-initdb.d
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d pyairtable_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: >
      redis-server
      --requirepass test_password
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Test Message Queue (RabbitMQ)
  rabbitmq-test:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: test_user
      RABBITMQ_DEFAULT_PASS: test_password
      RABBITMQ_DEFAULT_VHOST: test_vhost
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes:
      - rabbitmq-test-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Services
  api-gateway-test:
    build:
      context: ../go-services/api-gateway
      dockerfile: Dockerfile
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - RABBITMQ_URL=amqp://test_user:test_password@rabbitmq-test:5672/test_vhost
      - AUTH_SERVICE_URL=http://auth-service-test:8004
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator-test:8003
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway-test:8001
      - MCP_SERVER_URL=http://mcp-server-test:8002
      - LOG_LEVEL=debug
    ports:
      - "8000:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      rabbitmq-test:
        condition: service_healthy
    volumes:
      - ../configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  auth-service-test:
    build:
      context: ../go-services/auth-service
      dockerfile: Dockerfile
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - JWT_SECRET=test_jwt_secret_key_for_testing_only
      - BCRYPT_COST=4
      - LOG_LEVEL=debug
    ports:
      - "8004:8004"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  llm-orchestrator-test:
    build:
      context: ../python-services/llm-orchestrator
      dockerfile: Dockerfile
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - MCP_SERVER_URL=http://mcp-server-test:8002
      - OPENAI_API_KEY=test_openai_key
      - ANTHROPIC_API_KEY=test_anthropic_key
      - GEMINI_API_KEY=test_gemini_key
      - LOG_LEVEL=debug
    ports:
      - "8003:8003"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  airtable-gateway-test:
    build:
      context: ../python-services/airtable-gateway
      dockerfile: Dockerfile
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - AIRTABLE_API_KEY=test_airtable_key
      - RATE_LIMIT_REQUESTS_PER_SECOND=100
      - LOG_LEVEL=debug
    ports:
      - "8001:8001"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  mcp-server-test:
    build:
      context: ../python-services/mcp-server
      dockerfile: Dockerfile
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway-test:8001
      - LOG_LEVEL=debug
    ports:
      - "8002:8002"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Test Utilities
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - TEST_ENV=integration
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/pyairtable_test
      - REDIS_URL=redis://:test_password@redis-test:6379
      - API_GATEWAY_URL=http://api-gateway-test:8000
      - AUTH_SERVICE_URL=http://auth-service-test:8004
      - LLM_ORCHESTRATOR_URL=http://llm-orchestrator-test:8003
      - AIRTABLE_GATEWAY_URL=http://airtable-gateway-test:8001
      - MCP_SERVER_URL=http://mcp-server-test:8002
      - PYTHONPATH=/app/tests
    volumes:
      - .:/app/tests:ro
      - test-reports:/app/reports
    working_dir: /app/tests
    depends_on:
      api-gateway-test:
        condition: service_healthy
      auth-service-test:
        condition: service_healthy
      llm-orchestrator-test:
        condition: service_healthy
      airtable-gateway-test:
        condition: service_healthy
      mcp-server-test:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        pytest -v --tb=short --cov=. --cov-report=html:/app/reports/coverage --cov-report=xml:/app/reports/coverage.xml --junit-xml=/app/reports/junit.xml
      "
    networks:
      - test-network

  # Mock External Services
  mock-airtable-api:
    image: wiremock/wiremock:2.35.0
    ports:
      - "8080:8080"
    volumes:
      - ./fixtures/wiremock/airtable:/home/wiremock/mappings:ro
    command: ["--global-response-templating", "--verbose"]
    networks:
      - test-network

  mock-openai-api:
    image: wiremock/wiremock:2.35.0
    ports:
      - "8081:8080"
    volumes:
      - ./fixtures/wiremock/openai:/home/wiremock/mappings:ro
    command: ["--global-response-templating", "--verbose"]
    networks:
      - test-network

  # Monitoring for Tests
  prometheus-test:
    image: prom/prometheus:v2.45.0
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - test-network

  grafana-test:
    image: grafana/grafana:10.0.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=test_admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - test-network

  # Chaos Engineering
  chaos-monkey:
    image: quay.io/linki/chaoskube:v0.21.0
    environment:
      - CHAOSKUBE_INTERVAL=60s
      - CHAOSKUBE_DRY_RUN=false
      - CHAOSKUBE_LOG_LEVEL=debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      --interval=60s
      --log-level=debug
      --annotation-selector=chaos.alpha.kubernetes.io/enabled=true
    profiles:
      - chaos
    networks:
      - test-network

volumes:
  postgres-test-data:
  rabbitmq-test-data:
  test-reports:

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16