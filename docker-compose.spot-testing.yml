# Spot Instance Testing Configuration for Non-Critical Services
# Task: immediate-6 - Test non-critical services (analytics, reporting) on Spot instances

version: '3.8'

services:
  # PostgreSQL and Redis - Keep on regular instances for stability
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.role==manager  # Keep on stable nodes

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints:
          - node.role==manager  # Keep on stable nodes

  # Critical Services - Keep on regular instances
  api-gateway:
    image: ghcr.io/reg-kris/pyairtable-api-gateway:latest
    ports:
      - "8000:8000"
    environment:
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.role==manager

  platform-services:
    image: ghcr.io/reg-kris/pyairtable-platform-services:latest
    ports:
      - "8007:8007"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - API_KEY=${API_KEY}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 800M
        reservations:
          cpus: '0.4'
          memory: 400M
      placement:
        constraints:
          - node.role==manager

  # NON-CRITICAL SERVICES - SPOT INSTANCE CANDIDATES
  # These services are marked for spot instance testing
  
  analytics-service:
    image: ghcr.io/reg-kris/pyairtable-analytics-service:latest
    ports:
      - "8108:8108"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      # Spot instance configuration
      - SPOT_INSTANCE_MODE=true
      - GRACEFUL_SHUTDOWN_TIMEOUT=30
      - CHECKPOINT_INTERVAL=60
    depends_on:
      - postgres
      - redis
    restart: on-failure:3  # Limited restarts for spot interruptions
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
      # Spot instance placement preferences
      placement:
        constraints:
          - node.labels.instance-type==spot
        preferences:
          - spread: node.labels.availability-zone
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    labels:
      - "pyairtable.service.type=analytics"
      - "pyairtable.spot.eligible=true"
      - "pyairtable.criticality=low"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8108/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  report-service:
    image: ghcr.io/reg-kris/pyairtable-report-service:latest
    ports:
      - "8202:8202"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      # Spot instance configuration
      - SPOT_INSTANCE_MODE=true
      - GRACEFUL_SHUTDOWN_TIMEOUT=45  # Longer timeout for report generation
      - REPORT_CACHE_ENABLED=true
      - AUTO_SAVE_INTERVAL=120
    depends_on:
      - postgres
    restart: on-failure:3
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
      placement:
        constraints:
          - node.labels.instance-type==spot
        preferences:
          - spread: node.labels.availability-zone
    labels:
      - "pyairtable.service.type=reporting"
      - "pyairtable.spot.eligible=true"
      - "pyairtable.criticality=low"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8202/health || exit 1"]
      interval: 45s
      timeout: 15s
      retries: 2
      start_period: 60s

  data-processing-service:
    image: ghcr.io/reg-kris/pyairtable-data-processing-service:latest
    ports:
      - "8201:8201"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      # Spot instance configuration with checkpointing
      - SPOT_INSTANCE_MODE=true
      - GRACEFUL_SHUTDOWN_TIMEOUT=60
      - ENABLE_CHECKPOINTING=true
      - CHECKPOINT_INTERVAL=180
      - RECOVERY_ENABLED=true
    depends_on:
      - postgres
      - redis
    restart: on-failure:3
    networks:
      - pyairtable-network
    volumes:
      - processing-checkpoints:/app/checkpoints  # Persistent checkpoint storage
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.4'
          memory: 512M
      placement:
        constraints:
          - node.labels.instance-type==spot
        preferences:
          - spread: node.labels.availability-zone
    labels:
      - "pyairtable.service.type=data-processing"
      - "pyairtable.spot.eligible=true"
      - "pyairtable.criticality=medium"
      - "pyairtable.checkpoint.enabled=true"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8201/health || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 2
      start_period: 90s

  task-scheduler:
    image: ghcr.io/reg-kris/pyairtable-task-scheduler:latest
    ports:
      - "8204:8204"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      # Spot instance configuration for background tasks
      - SPOT_INSTANCE_MODE=true
      - GRACEFUL_SHUTDOWN_TIMEOUT=90
      - TASK_PERSISTENCE_ENABLED=true
      - QUEUE_BACKUP_INTERVAL=300
    depends_on:
      - postgres
      - redis
    restart: on-failure:5  # More restarts allowed for scheduler
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 800M
        reservations:
          cpus: '0.2'
          memory: 256M
      placement:
        constraints:
          - node.labels.instance-type==spot
    labels:
      - "pyairtable.service.type=scheduler"
      - "pyairtable.spot.eligible=true"
      - "pyairtable.criticality=medium"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8204/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spot Instance Monitoring Service
  spot-monitor:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache curl jq &&
        while true; do
          echo '[SPOT-MONITOR]' $$(date): Checking spot instance health;
          curl -s http://analytics-service:8108/health | jq -r '.status // \"unhealthy\"';
          curl -s http://report-service:8202/health | jq -r '.status // \"unhealthy\"';
          curl -s http://data-processing-service:8201/health | jq -r '.status // \"unhealthy\"';
          sleep 60;
        done
      "
    depends_on:
      - analytics-service
      - report-service
      - data-processing-service
    networks:
      - pyairtable-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
      placement:
        constraints:
          - node.role==manager
    labels:
      - "pyairtable.service.type=monitoring"
      - "pyairtable.spot.eligible=false"

networks:
  pyairtable-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  processing-checkpoints:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/pyairtable/checkpoints