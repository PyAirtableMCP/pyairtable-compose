syntax = "proto3";

package pyairtable.permission.v1;

import "google/protobuf/timestamp.proto";
import "pyairtable/common/v1/common.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/permission/v1;permissionv1";

// Permission level enum
enum PermissionLevel {
  PERMISSION_LEVEL_UNSPECIFIED = 0;
  PERMISSION_LEVEL_NONE = 1;
  PERMISSION_LEVEL_READ = 2;
  PERMISSION_LEVEL_WRITE = 3;
  PERMISSION_LEVEL_ADMIN = 4;
  PERMISSION_LEVEL_OWNER = 5;
}

// Resource type enum
enum ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0;
  RESOURCE_TYPE_WORKSPACE = 1;
  RESOURCE_TYPE_BASE = 2;
  RESOURCE_TYPE_TABLE = 3;
  RESOURCE_TYPE_RECORD = 4;
  RESOURCE_TYPE_FIELD = 5;
  RESOURCE_TYPE_VIEW = 6;
  RESOURCE_TYPE_FORM = 7;
  RESOURCE_TYPE_AUTOMATION = 8;
  RESOURCE_TYPE_INTERFACE = 9;
}

// Permission scope
enum PermissionScope {
  PERMISSION_SCOPE_UNSPECIFIED = 0;
  PERMISSION_SCOPE_GLOBAL = 1;
  PERMISSION_SCOPE_WORKSPACE = 2;
  PERMISSION_SCOPE_BASE = 3;
  PERMISSION_SCOPE_TABLE = 4;
  PERMISSION_SCOPE_RECORD = 5;
  PERMISSION_SCOPE_FIELD = 6;
}

// Permission model
message Permission {
  pyairtable.common.v1.BaseMetadata metadata = 1;
  string user_id = 2;
  ResourceType resource_type = 3;
  string resource_id = 4;
  PermissionLevel level = 5;
  PermissionScope scope = 6;
  optional google.protobuf.Timestamp expires_at = 7;
  map<string, string> attributes = 8;
  bool inherited = 9;
  optional string inherited_from = 10;
}

// Role model
message Role {
  pyairtable.common.v1.BaseMetadata metadata = 1;
  string name = 2;
  string description = 3;
  repeated string permissions = 4;
  PermissionScope scope = 5;
  bool system_role = 6;
  map<string, string> attributes = 7;
}

// User role assignment
message UserRole {
  pyairtable.common.v1.BaseMetadata metadata = 1;
  string user_id = 2;
  string role_id = 3;
  ResourceType resource_type = 4;
  string resource_id = 5;
  optional google.protobuf.Timestamp expires_at = 6;
  string assigned_by = 7;
}

// Permission check request
message CheckPermissionRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  ResourceType resource_type = 3;
  string resource_id = 4;
  string action = 5;
  map<string, string> context = 6;
}

// Permission check response
message CheckPermissionResponse {
  bool allowed = 1;
  PermissionLevel level = 2;
  repeated string reasons = 3;
  map<string, string> metadata = 4;
}

// Batch permission check request
message BatchCheckPermissionRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  repeated PermissionCheck checks = 3;
}

message PermissionCheck {
  string check_id = 1;
  ResourceType resource_type = 2;
  string resource_id = 3;
  string action = 4;
  map<string, string> context = 5;
}

// Batch permission check response
message BatchCheckPermissionResponse {
  map<string, CheckPermissionResponse> results = 1;
}

// Grant permission request
message GrantPermissionRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  ResourceType resource_type = 3;
  string resource_id = 4;
  PermissionLevel level = 5;
  optional google.protobuf.Timestamp expires_at = 6;
  map<string, string> attributes = 7;
}

// Grant permission response
message GrantPermissionResponse {
  Permission permission = 1;
}

// Revoke permission request
message RevokePermissionRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  ResourceType resource_type = 3;
  string resource_id = 4;
  optional PermissionLevel level = 5;
}

// Revoke permission response
message RevokePermissionResponse {
  bool success = 1;
  string message = 2;
}

// List permissions request
message ListPermissionsRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  optional string user_id = 2;
  optional ResourceType resource_type = 3;
  optional string resource_id = 4;
  pyairtable.common.v1.PaginationRequest pagination = 5;
  repeated pyairtable.common.v1.Filter filters = 6;
}

// List permissions response
message ListPermissionsResponse {
  repeated Permission permissions = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Create role request
message CreateRoleRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string name = 2;
  string description = 3;
  repeated string permissions = 4;
  PermissionScope scope = 5;
  map<string, string> attributes = 6;
}

// Create role response
message CreateRoleResponse {
  Role role = 1;
}

// Assign role request
message AssignRoleRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string role_id = 3;
  ResourceType resource_type = 4;
  string resource_id = 5;
  optional google.protobuf.Timestamp expires_at = 6;
}

// Assign role response
message AssignRoleResponse {
  UserRole user_role = 1;
}

// List user roles request
message ListUserRolesRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  optional ResourceType resource_type = 3;
  optional string resource_id = 4;
  pyairtable.common.v1.PaginationRequest pagination = 5;
}

// List user roles response
message ListUserRolesResponse {
  repeated UserRole user_roles = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Permission Service
service PermissionService {
  // Check if user has permission for specific action
  rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse);
  
  // Batch check permissions
  rpc BatchCheckPermission(BatchCheckPermissionRequest) returns (BatchCheckPermissionResponse);
  
  // Grant permission to user
  rpc GrantPermission(GrantPermissionRequest) returns (GrantPermissionResponse);
  
  // Revoke permission from user
  rpc RevokePermission(RevokePermissionRequest) returns (RevokePermissionResponse);
  
  // List permissions
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse);
  
  // Create role
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse);
  
  // Assign role to user
  rpc AssignRole(AssignRoleRequest) returns (AssignRoleResponse);
  
  // List user roles
  rpc ListUserRoles(ListUserRolesRequest) returns (ListUserRolesResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (pyairtable.common.v1.HealthCheckResponse);
}

// Import empty message
import "google/protobuf/empty.proto";