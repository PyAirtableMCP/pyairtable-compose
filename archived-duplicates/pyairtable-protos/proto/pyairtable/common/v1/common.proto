syntax = "proto3";

package pyairtable.common.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/common/v1;commonv1";

// Base metadata for all entities
message BaseMetadata {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  optional string created_by = 4;
  optional string updated_by = 5;
  int64 version = 6;
}

// Pagination request
message PaginationRequest {
  int32 page = 1;
  int32 page_size = 2;
  optional string cursor = 3;
}

// Pagination response
message PaginationResponse {
  int32 current_page = 1;
  int32 page_size = 2;
  int64 total_count = 3;
  int32 total_pages = 4;
  optional string next_cursor = 5;
  optional string prev_cursor = 6;
  bool has_next = 7;
  bool has_prev = 8;
}

// Standard error details
message ErrorDetail {
  string code = 1;
  string message = 2;
  map<string, string> metadata = 3;
}

// Health check status
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_SERVING = 1;
  HEALTH_STATUS_NOT_SERVING = 2;
  HEALTH_STATUS_SERVICE_UNKNOWN = 3;
}

// Health check response
message HealthCheckResponse {
  HealthStatus status = 1;
  repeated string services = 2;
  map<string, string> details = 3;
}

// Tenant context
message TenantContext {
  string tenant_id = 1;
  string workspace_id = 2;
  optional string organization_id = 3;
}

// User context
message UserContext {
  string user_id = 1;
  string email = 2;
  repeated string roles = 3;
  repeated string permissions = 4;
  TenantContext tenant_context = 5;
}

// Request metadata
message RequestMetadata {
  string request_id = 1;
  UserContext user_context = 2;
  string client_ip = 3;
  string user_agent = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// Audit log entry
message AuditLogEntry {
  BaseMetadata metadata = 1;
  string action = 2;
  string resource_type = 3;
  string resource_id = 4;
  UserContext user_context = 5;
  map<string, string> changes = 6;
  optional string reason = 7;
}

// Resource reference
message ResourceReference {
  string type = 1;
  string id = 2;
  optional string name = 3;
}

// Filter operators
enum FilterOperator {
  FILTER_OPERATOR_UNSPECIFIED = 0;
  FILTER_OPERATOR_EQUALS = 1;
  FILTER_OPERATOR_NOT_EQUALS = 2;
  FILTER_OPERATOR_GREATER_THAN = 3;
  FILTER_OPERATOR_GREATER_THAN_OR_EQUAL = 4;
  FILTER_OPERATOR_LESS_THAN = 5;
  FILTER_OPERATOR_LESS_THAN_OR_EQUAL = 6;
  FILTER_OPERATOR_IN = 7;
  FILTER_OPERATOR_NOT_IN = 8;
  FILTER_OPERATOR_CONTAINS = 9;
  FILTER_OPERATOR_NOT_CONTAINS = 10;
  FILTER_OPERATOR_STARTS_WITH = 11;
  FILTER_OPERATOR_ENDS_WITH = 12;
}

// Generic filter
message Filter {
  string field = 1;
  FilterOperator operator = 2;
  repeated string values = 3;
}

// Sort direction
enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASC = 1;
  SORT_DIRECTION_DESC = 2;
}

// Sort criteria
message SortCriteria {
  string field = 1;
  SortDirection direction = 2;
}

// Query parameters
message QueryParams {
  repeated Filter filters = 1;
  repeated SortCriteria sort = 2;
  PaginationRequest pagination = 3;
}