syntax = "proto3";

package pyairtable.workspace.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "pyairtable/common/v1/common.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/workspace/v1;workspacev1";

// Workspace status enum
enum WorkspaceStatus {
  WORKSPACE_STATUS_UNSPECIFIED = 0;
  WORKSPACE_STATUS_ACTIVE = 1;
  WORKSPACE_STATUS_SUSPENDED = 2;
  WORKSPACE_STATUS_ARCHIVED = 3;
  WORKSPACE_STATUS_DELETED = 4;
}

// Workspace plan enum
enum WorkspacePlan {
  WORKSPACE_PLAN_UNSPECIFIED = 0;
  WORKSPACE_PLAN_FREE = 1;
  WORKSPACE_PLAN_PLUS = 2;
  WORKSPACE_PLAN_PRO = 3;
  WORKSPACE_PLAN_ENTERPRISE = 4;
}

// Workspace settings
message WorkspaceSettings {
  string timezone = 1;
  string date_format = 2;
  string currency = 3;
  bool allow_public_sharing = 4;
  bool require_sso = 5;
  int32 max_collaborators = 6;
  map<string, string> custom_settings = 7;
}

// Workspace model
message Workspace {
  pyairtable.common.v1.BaseMetadata metadata = 1;
  string name = 2;
  optional string description = 3;
  WorkspaceStatus status = 4;
  WorkspacePlan plan = 5;
  WorkspaceSettings settings = 6;
  string owner_id = 7;
  repeated string admin_ids = 8;
  int32 member_count = 9;
  int32 base_count = 10;
  map<string, string> attributes = 11;
  string tenant_id = 12;
}

// Create workspace request
message CreateWorkspaceRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string name = 2;
  optional string description = 3;
  optional WorkspaceSettings settings = 4;
  optional WorkspacePlan plan = 5;
}

// Create workspace response
message CreateWorkspaceResponse {
  Workspace workspace = 1;
}

// Get workspace request
message GetWorkspaceRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string workspace_id = 2;
}

// Get workspace response
message GetWorkspaceResponse {
  Workspace workspace = 1;
}

// Update workspace request
message UpdateWorkspaceRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string workspace_id = 2;
  optional string name = 3;
  optional string description = 4;
  optional WorkspaceSettings settings = 5;
  optional WorkspaceStatus status = 6;
}

// Update workspace response
message UpdateWorkspaceResponse {
  Workspace workspace = 1;
}

// Delete workspace request
message DeleteWorkspaceRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string workspace_id = 2;
  bool hard_delete = 3;
}

// Delete workspace response
message DeleteWorkspaceResponse {
  bool success = 1;
  string message = 2;
}

// List workspaces request
message ListWorkspacesRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  pyairtable.common.v1.PaginationRequest pagination = 2;
  repeated pyairtable.common.v1.Filter filters = 3;
  optional string user_id = 4;
}

// List workspaces response
message ListWorkspacesResponse {
  repeated Workspace workspaces = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Workspace Service
service WorkspaceService {
  // Create workspace
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
  
  // Get workspace
  rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse);
  
  // Update workspace
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse);
  
  // Delete workspace
  rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse);
  
  // List workspaces
  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (pyairtable.common.v1.HealthCheckResponse);
}