syntax = "proto3";

package pyairtable.auth.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "pyairtable/common/v1/common.proto";

option go_package = "github.com/pyairtable/pyairtable-protos/generated/go/pyairtable/auth/v1;authv1";

// Token type enum
enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_ACCESS = 1;
  TOKEN_TYPE_REFRESH = 2;
  TOKEN_TYPE_RESET_PASSWORD = 3;
  TOKEN_TYPE_EMAIL_VERIFICATION = 4;
  TOKEN_TYPE_API_KEY = 5;
}

// Auth provider enum
enum AuthProvider {
  AUTH_PROVIDER_UNSPECIFIED = 0;
  AUTH_PROVIDER_LOCAL = 1;
  AUTH_PROVIDER_GOOGLE = 2;
  AUTH_PROVIDER_GITHUB = 3;
  AUTH_PROVIDER_MICROSOFT = 4;
  AUTH_PROVIDER_SAML = 5;
  AUTH_PROVIDER_LDAP = 6;
}

// Token model
message Token {
  string token = 1;
  TokenType type = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp created_at = 4;
  string user_id = 5;
  map<string, string> metadata = 6;
}

// Authentication credentials
message AuthCredentials {
  string email = 1;
  string password = 2;
  optional string totp_code = 3;
  AuthProvider provider = 4;
  map<string, string> provider_data = 5;
}

// Login request
message LoginRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  AuthCredentials credentials = 2;
  bool remember_me = 3;
  optional string device_info = 4;
}

// Login response
message LoginResponse {
  Token access_token = 1;
  Token refresh_token = 2;
  pyairtable.common.v1.UserContext user_context = 3;
  bool requires_mfa = 4;
  optional string mfa_token = 5;
}

// Logout request
message LogoutRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string access_token = 2;
  bool all_devices = 3;
}

// Logout response
message LogoutResponse {
  bool success = 1;
  string message = 2;
}

// Refresh token request
message RefreshTokenRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string refresh_token = 2;
}

// Refresh token response
message RefreshTokenResponse {
  Token access_token = 1;
  Token refresh_token = 2;
}

// Validate token request
message ValidateTokenRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string token = 2;
  TokenType type = 3;
}

// Validate token response
message ValidateTokenResponse {
  bool valid = 1;
  optional pyairtable.common.v1.UserContext user_context = 2;
  optional google.protobuf.Timestamp expires_at = 3;
  repeated string scopes = 4;
}

// Register request
message RegisterRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string email = 2;
  string password = 3;
  string first_name = 4;
  string last_name = 5;
  optional string invite_token = 6;
  map<string, string> attributes = 7;
}

// Register response
message RegisterResponse {
  string user_id = 1;
  bool email_verification_required = 2;
  string message = 3;
}

// Reset password request
message ResetPasswordRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string email = 2;
}

// Reset password response
message ResetPasswordResponse {
  bool success = 1;
  string message = 2;
}

// Confirm password reset request
message ConfirmPasswordResetRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string reset_token = 2;
  string new_password = 3;
}

// Confirm password reset response
message ConfirmPasswordResetResponse {
  bool success = 1;
  string message = 2;
}

// Change password request
message ChangePasswordRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string current_password = 3;
  string new_password = 4;
}

// Change password response
message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// Enable MFA request
message EnableMFARequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string mfa_secret = 3;
  string verification_code = 4;
}

// Enable MFA response
message EnableMFAResponse {
  bool success = 1;
  repeated string backup_codes = 2;
}

// Disable MFA request
message DisableMFARequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string verification_code = 3;
}

// Disable MFA response
message DisableMFAResponse {
  bool success = 1;
  string message = 2;
}

// Verify MFA request
message VerifyMFARequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string mfa_token = 2;
  string verification_code = 3;
}

// Verify MFA response
message VerifyMFAResponse {
  Token access_token = 1;
  Token refresh_token = 2;
  pyairtable.common.v1.UserContext user_context = 3;
}

// Generate API key request
message GenerateAPIKeyRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string name = 3;
  repeated string scopes = 4;
  optional google.protobuf.Timestamp expires_at = 5;
}

// Generate API key response
message GenerateAPIKeyResponse {
  string api_key = 1;
  string key_id = 2;
  google.protobuf.Timestamp expires_at = 3;
}

// List API keys request
message ListAPIKeysRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  pyairtable.common.v1.PaginationRequest pagination = 3;
}

// API key info
message APIKeyInfo {
  string key_id = 1;
  string name = 2;
  repeated string scopes = 3;
  google.protobuf.Timestamp created_at = 4;
  optional google.protobuf.Timestamp expires_at = 5;
  optional google.protobuf.Timestamp last_used_at = 6;
  bool active = 7;
}

// List API keys response
message ListAPIKeysResponse {
  repeated APIKeyInfo api_keys = 1;
  pyairtable.common.v1.PaginationResponse pagination = 2;
}

// Revoke API key request
message RevokeAPIKeyRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  string user_id = 2;
  string key_id = 3;
}

// Revoke API key response
message RevokeAPIKeyResponse {
  bool success = 1;
  string message = 2;
}

// OAuth provider config
message OAuthProviderConfig {
  AuthProvider provider = 1;
  string client_id = 2;
  string redirect_uri = 3;
  repeated string scopes = 4;
  map<string, string> additional_params = 5;
}

// Get OAuth URL request
message GetOAuthURLRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  AuthProvider provider = 2;
  optional string state = 3;
}

// Get OAuth URL response
message GetOAuthURLResponse {
  string auth_url = 1;
  string state = 2;
}

// OAuth callback request
message OAuthCallbackRequest {
  pyairtable.common.v1.RequestMetadata request_metadata = 1;
  AuthProvider provider = 2;
  string code = 3;
  string state = 4;
}

// OAuth callback response
message OAuthCallbackResponse {
  Token access_token = 1;
  Token refresh_token = 2;
  pyairtable.common.v1.UserContext user_context = 3;
  bool is_new_user = 4;
}

// Auth Service
service AuthService {
  // User login
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // User logout
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  
  // Refresh access token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  
  // Validate token
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // User registration
  rpc Register(RegisterRequest) returns (RegisterResponse);
  
  // Password reset
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  
  // Confirm password reset
  rpc ConfirmPasswordReset(ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);
  
  // Change password
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  
  // Enable MFA
  rpc EnableMFA(EnableMFARequest) returns (EnableMFAResponse);
  
  // Disable MFA
  rpc DisableMFA(DisableMFARequest) returns (DisableMFAResponse);
  
  // Verify MFA
  rpc VerifyMFA(VerifyMFARequest) returns (VerifyMFAResponse);
  
  // Generate API key
  rpc GenerateAPIKey(GenerateAPIKeyRequest) returns (GenerateAPIKeyResponse);
  
  // List API keys
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse);
  
  // Revoke API key
  rpc RevokeAPIKey(RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse);
  
  // Get OAuth URL
  rpc GetOAuthURL(GetOAuthURLRequest) returns (GetOAuthURLResponse);
  
  // OAuth callback
  rpc OAuthCallback(OAuthCallbackRequest) returns (OAuthCallbackResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (pyairtable.common.v1.HealthCheckResponse);
}