name: Generate Protobuf Code

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'proto/**/*.proto'
      - 'buf.yaml'
      - 'buf.gen.yaml'
      - '.github/workflows/generate-protos.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'proto/**/*.proto'
      - 'buf.yaml'
      - 'buf.gen.yaml'

env:
  BUF_VERSION: v1.28.1
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint Protobuf Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: ${{ env.BUF_VERSION }}

      - name: Lint protobuf files
        run: buf lint

      - name: Check for breaking changes
        if: github.event_name == 'pull_request'
        run: buf breaking --against 'https://github.com/${{ github.repository }}.git#branch=main'

  generate-go:
    name: Generate Go Code
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: ${{ env.BUF_VERSION }}

      - name: Install Go protobuf plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate Go code
        run: |
          mkdir -p generated/go
          buf generate --template buf.gen.yaml --path proto/

      - name: Initialize Go module
        run: |
          cd generated/go
          go mod init github.com/pyairtable/pyairtable-protos/generated/go
          go mod tidy

      - name: Test Go compilation
        run: |
          cd generated/go
          go build ./...

      - name: Upload Go artifacts
        uses: actions/upload-artifact@v3
        with:
          name: generated-go-code
          path: generated/go/
          retention-days: 30

  generate-python:
    name: Generate Python Code
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: ${{ env.BUF_VERSION }}

      - name: Install Python protobuf tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install grpcio-tools mypy-protobuf

      - name: Generate Python code
        run: |
          mkdir -p generated/python
          buf generate --template buf.gen.yaml --path proto/

      - name: Create Python package
        run: |
          cd generated/python
          cat > setup.py << 'EOF'
          from setuptools import setup, find_packages
          
          setup(
              name="pyairtable-protos",
              version="0.1.0",
              description="Generated protobuf files for PyAirtable services",
              packages=find_packages(),
              install_requires=[
                  "grpcio>=1.50.0",
                  "grpcio-tools>=1.50.0",
                  "protobuf>=4.21.0",
              ],
              python_requires=">=3.8",
          )
          EOF

      - name: Test Python package
        run: |
          cd generated/python
          python -m py_compile $(find . -name "*.py")

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v3
        with:
          name: generated-python-code
          path: generated/python/
          retention-days: 30

  validate-generated-code:
    name: Validate Generated Code
    runs-on: ubuntu-latest
    needs: [generate-go, generate-python]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Go artifacts
        uses: actions/download-artifact@v3
        with:
          name: generated-go-code
          path: generated/go/

      - name: Download Python artifacts
        uses: actions/download-artifact@v3
        with:
          name: generated-python-code
          path: generated/python/

      - name: Validate file structure
        run: |
          echo "Validating generated file structure..."
          
          # Check Go files
          if [ ! -d "generated/go" ]; then
            echo "Error: Go generated directory not found"
            exit 1
          fi
          
          GO_FILES=$(find generated/go -name "*.go" | wc -l)
          if [ "$GO_FILES" -eq 0 ]; then
            echo "Error: No Go files generated"
            exit 1
          fi
          echo "Found $GO_FILES Go files"
          
          # Check Python files
          if [ ! -d "generated/python" ]; then
            echo "Error: Python generated directory not found"
            exit 1
          fi
          
          PYTHON_FILES=$(find generated/python -name "*.py" | wc -l)
          if [ "$PYTHON_FILES" -eq 0 ]; then
            echo "Error: No Python files generated"
            exit 1
          fi
          echo "Found $PYTHON_FILES Python files"
          
          echo "Generated code validation passed!"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-generated-code]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Go artifacts
        uses: actions/download-artifact@v3
        with:
          name: generated-go-code
          path: generated/go/

      - name: Download Python artifacts
        uses: actions/download-artifact@v3
        with:
          name: generated-python-code
          path: generated/python/

      - name: Generate release tag
        id: tag
        run: |
          # Generate tag based on date and commit
          TAG="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create release archives
        run: |
          tar -czf pyairtable-protos-go-${{ steps.tag.outputs.tag }}.tar.gz -C generated go/
          tar -czf pyairtable-protos-python-${{ steps.tag.outputs.tag }}.tar.gz -C generated python/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            Automated release of generated protobuf code.
            
            Generated from commit: ${{ github.sha }}
            
            ## Changes
            - Updated protobuf definitions
            - Generated Go and Python code
            
            ## Downloads
            - `pyairtable-protos-go-${{ steps.tag.outputs.tag }}.tar.gz` - Go generated code
            - `pyairtable-protos-python-${{ steps.tag.outputs.tag }}.tar.gz` - Python generated code
          draft: false
          prerelease: false

      - name: Upload Go Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pyairtable-protos-go-${{ steps.tag.outputs.tag }}.tar.gz
          asset_name: pyairtable-protos-go-${{ steps.tag.outputs.tag }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Python Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pyairtable-protos-python-${{ steps.tag.outputs.tag }}.tar.gz
          asset_name: pyairtable-protos-python-${{ steps.tag.outputs.tag }}.tar.gz
          asset_content_type: application/gzip