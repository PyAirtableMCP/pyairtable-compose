[tool.poetry]
name = "pyairtable-ai-domain"
version = "1.0.0"
description = "Consolidated AI domain service combining LLM orchestration, model serving, and MCP tools"
authors = ["PyAirtable Team"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
httpx = "^0.25.2"
redis = "^5.0.1"
sqlalchemy = "^2.0.23"
asyncpg = "^0.29.0"
alembic = "^1.13.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-dotenv = "^1.0.0"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"
rich = "^13.7.0"
tenacity = "^8.2.3"

# AI/ML specific dependencies
google-generativeai = "^0.8.0"
openai = "^1.3.0"
anthropic = "^0.8.0"
transformers = "^4.35.0"
torch = "^2.1.0"
sentence-transformers = "^2.2.2"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
tiktoken = "^0.5.0"

# Vector databases
qdrant-client = "^1.6.0"
pinecone-client = "^2.2.4"
weaviate-client = "^3.25.0"
chromadb = "^0.4.0"

# Additional AI utilities
langchain = "^0.0.350"
langchain-core = "^0.1.0"
langchain-community = "^0.0.0"
ollama = "^0.1.0"
litellm = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
httpx = "^0.25.2"

[tool.poetry.scripts]
serve = "src.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "google.generativeai.*",
    "openai.*",
    "anthropic.*",
    "transformers.*",
    "torch.*",
    "sentence_transformers.*",
    "qdrant_client.*",
    "pinecone.*",
    "weaviate.*",
    "chromadb.*",
    "langchain.*",
    "ollama.*",
    "litellm.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
    "ai: marks tests that require AI API keys",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]