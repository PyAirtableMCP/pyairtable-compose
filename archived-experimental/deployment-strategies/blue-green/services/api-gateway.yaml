# Blue-Green Deployment Configuration for API Gateway
# Entry point service with load balancer and ingress

apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-blue-green-config
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    deployment-strategy: blue-green
data:
  active_color: "blue"
  traffic_split: "100"
  rollback_enabled: "true"
  health_check_path: "/health"
  readiness_check_path: "/ready"
  health_check_timeout: "30s"
  deployment_timeout: "600s"
  rollback_timeout: "300s"

---
# Blue Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-blue
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: blue
    deployment-strategy: blue-green
    tier: gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
      version: blue
  template:
    metadata:
      labels:
        app: api-gateway
        version: blue
        deployment-strategy: blue-green
        tier: gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: api-gateway
        image: ghcr.io/reg-kris/pyairtable-compose/api-gateway:stable
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: ENVIRONMENT
          value: "prod"
        - name: PORT
          value: "8080"
        - name: HOST
          value: "0.0.0.0"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: api-gateway-config
        - secretRef:
            name: api-gateway-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      terminationGracePeriodSeconds: 30

---
# Green Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-green
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    version: green
    deployment-strategy: blue-green
    tier: gateway
spec:
  replicas: 0  # Initially scaled to 0
  selector:
    matchLabels:
      app: api-gateway
      version: green
  template:
    metadata:
      labels:
        app: api-gateway
        version: green
        deployment-strategy: blue-green
        tier: gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: api-gateway
        image: ghcr.io/reg-kris/pyairtable-compose/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: ENVIRONMENT
          value: "prod"
        - name: PORT
          value: "8080"
        - name: HOST
          value: "0.0.0.0"
        - name: REPLICA_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: api-gateway-config
        - secretRef:
            name: api-gateway-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      terminationGracePeriodSeconds: 30

---
# Services and other resources follow the template pattern...
# (Including Blue/Green Services, Active Service, HPAs, ServiceMonitor, PDBs, NetworkPolicy)

# Active Service with LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-active
  namespace: pyairtable-prod
  labels:
    app: api-gateway
    service-type: active
    deployment-strategy: blue-green
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  selector:
    app: api-gateway
    version: blue  # Initially points to blue
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: pyairtable-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.pyairtable.com
    secretName: api-gateway-tls
  rules:
  - host: api.pyairtable.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: api-gateway-active
            port:
              number: 8080
      - path: /health
        pathType: Exact
        backend:
          service:
            name: api-gateway-active
            port:
              number: 8080