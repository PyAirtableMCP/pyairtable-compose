apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-prometheus-config
  namespace: chaos-engineering
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'pyairtable-chaos'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Chaos Mesh metrics
      - job_name: 'chaos-mesh'
        static_configs:
          - targets: ['chaos-controller-manager.chaos-engineering.svc.cluster.local:10080']
        scrape_interval: 15s
        metrics_path: /metrics

      # PyAirtable services
      - job_name: 'pyairtable-services'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - pyairtable
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Kubernetes cluster metrics
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # Database metrics
      - job_name: 'postgres-exporter'
        static_configs:
          - targets: ['postgres-exporter.pyairtable.svc.cluster.local:9187']
        scrape_interval: 30s

      # Redis metrics
      - job_name: 'redis-exporter'
        static_configs:
          - targets: ['redis-exporter.pyairtable.svc.cluster.local:9121']
        scrape_interval: 30s

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager.monitoring.svc.cluster.local:9093

  chaos-alerts.yml: |
    groups:
      - name: chaos-engineering-alerts
        rules:
          - alert: ChaosExperimentRunning
            expr: chaos_mesh_experiments_total > 0
            for: 0m
            labels:
              severity: info
            annotations:
              summary: "Chaos experiment is currently running"
              description: "A chaos engineering experiment is active in the cluster"

          - alert: HighPodRestartRate
            expr: rate(kube_pod_container_status_restarts_total[5m]) > 0.1
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "High pod restart rate detected"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently"

          - alert: ServiceDownDuringChaos
            expr: up{job="pyairtable-services"} == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: "Service is down during chaos experiment"
              description: "Service {{ $labels.instance }} is not responding during chaos testing"

          - alert: HighResponseTimeDuringChaos
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High response time during chaos experiment"
              description: "95th percentile response time is {{ $value }}s for {{ $labels.job }}"

          - alert: DatabaseConnectionFailure
            expr: pg_up == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: "Database connection failure"
              description: "PostgreSQL database is not accessible"

          - alert: RedisConnectionFailure
            expr: redis_up == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: "Redis connection failure"
              description: "Redis cache is not accessible"

          - alert: HighMemoryUsage
            expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 90% on node {{ $labels.instance }}"

          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 90
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 90% on node {{ $labels.instance }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-prometheus
  namespace: chaos-engineering
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chaos-prometheus
  template:
    metadata:
      labels:
        app: chaos-prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        ports:
        - containerPort: 9090
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=7d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: chaos-prometheus-config
      - name: prometheus-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: chaos-prometheus
  namespace: chaos-engineering
spec:
  selector:
    app: chaos-prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP