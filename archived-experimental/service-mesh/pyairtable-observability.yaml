# PyAirtable Istio Observability Configuration
# Comprehensive monitoring, tracing, and logging setup

---
# Telemetry configuration for metrics
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-metrics
  namespace: pyairtable
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        # Business context tags
        tenant_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-tenant-id']}"
        user_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-user-id']}"
        request_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-request-id']}"
        api_version:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-api-version']}"
        service_name:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-service-name']}"
        # Technical context tags
        source_app:
          operation: UPSERT
          value: "%{SOURCE_APP}"
        destination_service_name:
          operation: UPSERT
          value: "%{DESTINATION_SERVICE_NAME}"
        destination_service_namespace:
          operation: UPSERT
          value: "%{DESTINATION_SERVICE_NAMESPACE}"
        request_protocol:
          operation: UPSERT
          value: "%{REQUEST_PROTOCOL}"
        response_code:
          operation: UPSERT
          value: "%{RESPONSE_CODE}"
        grpc_response_status:
          operation: UPSERT
          value: "%{GRPC_RESPONSE_STATUS}"
        connection_security_policy:
          operation: UPSERT
          value: "%{CONNECTION_SECURITY_POLICY}"
        # Performance tags
        request_duration_ms:
          operation: UPSERT
          value: "%{DURATION}"
        request_size:
          operation: UPSERT
          value: "%{REQUEST_SIZE}"
        response_size:
          operation: UPSERT
          value: "%{RESPONSE_SIZE}"
        # Error context
        response_flags:
          operation: UPSERT
          value: "%{RESPONSE_FLAGS}"

---
# Custom metrics for business logic
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-business-metrics
  namespace: pyairtable
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: requests_total
      tagOverrides:
        # Airtable-specific metrics
        airtable_base_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-airtable-base-id']}"
        airtable_table_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-airtable-table-id']}"
        operation_type:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-operation-type']}"
        # LLM-specific metrics
        llm_model:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-llm-model']}"
        llm_tokens_used:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-llm-tokens']}"
        # File operation metrics
        file_type:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-file-type']}"
        file_size:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-file-size']}"
        # Workflow metrics
        workflow_id:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-workflow-id']}"
        workflow_step:
          operation: UPSERT
          value: "%{REQUEST_HEADERS['x-workflow-step']}"

---
# Distributed tracing configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-tracing
  namespace: pyairtable
spec:
  tracing:
  - providers:
    - name: jaeger
  - customTags:
      # HTTP context
      http_url:
        header:
          name: ":path"
      http_method:
        header:
          name: ":method"
      http_user_agent:
        header:
          name: "user-agent"
      # Business context
      tenant_id:
        header:
          name: "x-tenant-id"
      user_id:
        header:
          name: "x-user-id"
      request_id:
        header:
          name: "x-request-id"
      # Service context
      service_name:
        header:
          name: "x-service-name"
      api_version:
        header:
          name: "x-api-version"
      # Airtable context
      airtable_base_id:
        header:
          name: "x-airtable-base-id"
      # Workflow context
      workflow_id:
        header:
          name: "x-workflow-id"
      workflow_step:
        header:
          name: "x-workflow-step"

---
# Access logging configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: pyairtable-access-logs
  namespace: pyairtable
spec:
  accessLogging:
  - providers:
    - name: otel
  - filter:
      expression: |
        response.code >= 400 ||
        duration > 1000 ||
        request.headers['x-debug-logging'] == 'true'

---
# Envoy Filter for enhanced access logging
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: pyairtable-enhanced-access-logs
  namespace: pyairtable
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
              format: |
                {
                  "timestamp": "%START_TIME%",
                  "method": "%REQ(:METHOD)%",
                  "url": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
                  "protocol": "%PROTOCOL%",
                  "status": "%RESPONSE_CODE%",
                  "response_flags": "%RESPONSE_FLAGS%",
                  "bytes_received": "%BYTES_RECEIVED%",
                  "bytes_sent": "%BYTES_SENT%",
                  "duration": "%DURATION%",
                  "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
                  "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
                  "user_agent": "%REQ(USER-AGENT)%",
                  "request_id": "%REQ(X-REQUEST-ID)%",
                  "authority": "%REQ(:AUTHORITY)%",
                  "upstream_host": "%UPSTREAM_HOST%",
                  "upstream_cluster": "%UPSTREAM_CLUSTER%",
                  "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
                  "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
                  "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
                  "requested_server_name": "%REQUESTED_SERVER_NAME%",
                  "route_name": "%ROUTE_NAME%",
                  "tenant_id": "%REQ(X-TENANT-ID)%",
                  "user_id": "%REQ(X-USER-ID)%",
                  "trace_id": "%REQ(X-TRACE-ID)%",
                  "span_id": "%REQ(X-SPAN-ID)%",
                  "service_name": "%REQ(X-SERVICE-NAME)%",
                  "api_version": "%REQ(X-API-VERSION)%",
                  "airtable_base_id": "%REQ(X-AIRTABLE-BASE-ID)%",
                  "workflow_id": "%REQ(X-WORKFLOW-ID)%",
                  "operation_type": "%REQ(X-OPERATION-TYPE)%",
                  "connection_mtls": "%CONNECTION_MTLS%",
                  "start_time": "%START_TIME(%Y-%m-%dT%H:%M:%S.%fZ)%"
                }

---
# WASM Plugin for custom metrics collection
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: pyairtable-custom-metrics
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: pyairtable
  url: oci://ghcr.io/pyairtable/custom-metrics-wasm:latest
  phase: STATS
  pluginConfig:
    metrics:
      - name: pyairtable_api_requests_total
        type: counter
        help: "Total number of API requests"
        labels:
          - tenant_id
          - user_id
          - service_name
          - operation_type
          - airtable_base_id
      - name: pyairtable_request_duration_seconds
        type: histogram
        help: "Request duration in seconds"
        buckets: [0.001, 0.01, 0.1, 1, 10, 30, 60]
        labels:
          - service_name
          - operation_type
      - name: pyairtable_llm_tokens_used_total
        type: counter
        help: "Total LLM tokens used"
        labels:
          - tenant_id
          - user_id
          - llm_model
      - name: pyairtable_file_uploads_total
        type: counter
        help: "Total file uploads"
        labels:
          - tenant_id
          - file_type
          - file_size_bucket
      - name: pyairtable_workflow_executions_total
        type: counter
        help: "Total workflow executions"
        labels:
          - tenant_id
          - workflow_id
          - status

---
# WASM Plugin for rate limiting with tenant isolation
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: pyairtable-rate-limiter
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  url: oci://ghcr.io/pyairtable/tenant-rate-limiter-wasm:latest
  phase: AUTHN
  pluginConfig:
    rate_limits:
      # Free tier limits
      - match:
          headers:
            x-tenant-tier:
              exact: "free"
        limits:
          requests_per_minute: 100
          requests_per_hour: 1000
          llm_tokens_per_day: 10000
      # Pro tier limits
      - match:
          headers:
            x-tenant-tier:
              exact: "pro"
        limits:
          requests_per_minute: 1000
          requests_per_hour: 10000
          llm_tokens_per_day: 100000
      # Enterprise tier limits
      - match:
          headers:
            x-tenant-tier:
              exact: "enterprise"
        limits:
          requests_per_minute: 10000
          requests_per_hour: 100000
          llm_tokens_per_day: 1000000
    storage:
      redis_url: "redis://redis.pyairtable.svc.cluster.local:6379"
      key_prefix: "rate_limit:"

---
# WASM Plugin for security headers
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: pyairtable-security-headers
  namespace: pyairtable
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: api-gateway
  url: oci://ghcr.io/pyairtable/security-headers-wasm:latest
  phase: AUTHN
  pluginConfig:
    headers:
      response:
        add:
          "X-Frame-Options": "DENY"
          "X-Content-Type-Options": "nosniff"
          "X-XSS-Protection": "1; mode=block"
          "Strict-Transport-Security": "max-age=31536000; includeSubDomains"
          "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
          "Referrer-Policy": "strict-origin-when-cross-origin"
          "Permissions-Policy": "geolocation=(), microphone=(), camera=()"
        remove:
          - "Server"
          - "X-Powered-By"

---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh-services
  namespace: pyairtable
  labels:
    app: istio-services
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: pyairtable
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus
    honorLabels: true

---
# Prometheus Rule for PyAirtable alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: pyairtable-istio-alerts
  namespace: pyairtable
spec:
  groups:
  - name: pyairtable.istio.rules
    rules:
    # High error rate
    - alert: PyAirtableHighErrorRate
      expr: |
        (
          sum(rate(istio_requests_total{destination_service_namespace="pyairtable",response_code!~"2..|3.."}[5m])) /
          sum(rate(istio_requests_total{destination_service_namespace="pyairtable"}[5m]))
        ) > 0.05
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High error rate in PyAirtable services"
        description: "Error rate is {{ $value | humanizePercentage }} for PyAirtable services"

    # High latency
    - alert: PyAirtableHighLatency
      expr: |
        histogram_quantile(0.99,
          sum(rate(istio_request_duration_milliseconds_bucket{destination_service_namespace="pyairtable"}[5m])) by (le)
        ) > 1000
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High latency in PyAirtable services"
        description: "99th percentile latency is {{ $value }}ms for PyAirtable services"

    # Circuit breaker triggered
    - alert: PyAirtableCircuitBreakerTriggered
      expr: |
        sum(rate(envoy_cluster_upstream_rq_pending_overflow{cluster_name=~".*pyairtable.*"}[5m])) > 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Circuit breaker triggered in PyAirtable"
        description: "Circuit breaker has been triggered for cluster {{ $labels.cluster_name }}"

    # mTLS connection failures
    - alert: PyAirtableMTLSFailures
      expr: |
        sum(rate(envoy_server_ssl_handshake_failure_total{cluster_name=~".*pyairtable.*"}[5m])) > 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "mTLS handshake failures in PyAirtable"
        description: "mTLS handshake failures detected for cluster {{ $labels.cluster_name }}"

    # Rate limiting triggered
    - alert: PyAirtableRateLimitExceeded
      expr: |
        sum(rate(pyairtable_rate_limit_exceeded_total[5m])) by (tenant_id) > 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "Rate limit exceeded for tenant"
        description: "Tenant {{ $labels.tenant_id }} is exceeding rate limits"

    # High LLM token usage
    - alert: PyAirtableHighLLMUsage
      expr: |
        sum(rate(pyairtable_llm_tokens_used_total[1h])) by (tenant_id) > 50000
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High LLM token usage for tenant"
        description: "Tenant {{ $labels.tenant_id }} has used {{ $value }} LLM tokens in the last hour"

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: pyairtable-istio-dashboard
  namespace: pyairtable
  labels:
    grafana_dashboard: "1"
data:
  pyairtable-istio.json: |
    {
      "dashboard": {
        "id": null,
        "title": "PyAirtable Istio Service Mesh",
        "tags": ["istio", "pyairtable", "service-mesh"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "title": "Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{destination_service_namespace=\"pyairtable\"}[5m]))",
                "legendFormat": "Requests/sec"
              }
            ]
          },
          {
            "title": "Error Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{destination_service_namespace=\"pyairtable\",response_code!~\"2..|3..\"}[5m])) / sum(rate(istio_requests_total{destination_service_namespace=\"pyairtable\"}[5m]))",
                "legendFormat": "Error Rate"
              }
            ]
          },
          {
            "title": "Response Time (P99)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket{destination_service_namespace=\"pyairtable\"}[5m])) by (le))",
                "legendFormat": "P99 Latency"
              }
            ]
          },
          {
            "title": "Service Health",
            "type": "heatmap",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{destination_service_namespace=\"pyairtable\"}[5m])) by (destination_service_name, response_code)",
                "legendFormat": "{{destination_service_name}} - {{response_code}}"
              }
            ]
          }
        ]
      }
    }