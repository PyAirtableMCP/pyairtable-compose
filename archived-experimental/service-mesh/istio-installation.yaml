# Istio Installation Configuration for PyAirtable
# Production-ready configuration with enhanced security and observability

---
# Istio Control Plane Configuration
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: pyairtable-istio
  namespace: istio-system
spec:
  values:
    pilot:
      # Enable distributed tracing
      traceSampling: 1.0
      # Reduce resource usage in dev, increase for production
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
    global:
      # mTLS by default
      mtls:
        auto: true
      # Mesh network configuration
      meshID: pyairtable-mesh
      network: pyairtable-network
      # Enable proxy metadata exchange
      proxyMetadata:
        PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
        BOOTSTRAP_XDS_AGENT: true
      # Default proxy configuration
      proxy:
        resources:
          requests:
            cpu: 10m
            memory: 40Mi
          limits:
            cpu: 100m
            memory: 128Mi
        # Improved performance settings
        concurrency: 2
        # Tracing configuration
        tracer: jaeger
      # Telemetry v2 settings
      telemetryV2:
        enabled: true
        prometheus:
          configOverride:
            metric_relabeling_configs:
            - source_labels: [__name__]
              regex: 'istio_.*'
              target_label: __tmp_istio_metric
            - source_labels: [__tmp_istio_metric]
              regex: 'istio_(request|response)_(total|duration_milliseconds|bytes)'
              target_label: __keep_metric
            - source_labels: [__keep_metric]
              regex: 'true'
              action: keep
      # Logging settings
      logging:
        level: "default:info,ads:warn,wle:warn"
      # Istiod configuration
      istiod:
        enableAnalysis: true
  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        env:
          # Enhanced security settings
          - name: EXTERNAL_ISTIOD
            value: "false"
          - name: PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY
            value: "true"
          - name: PILOT_ENABLE_NETWORK_GATEWAYS
            value: "true"
          # Performance tuning
          - name: PILOT_PUSH_THROTTLE
            value: "100"
          - name: PILOT_MAX_REQUESTS_PER_SECOND
            value: "1000"
          # Enhanced debugging
          - name: PILOT_ENABLE_STATUS
            value: "true"
          - name: PILOT_ENABLE_CONFIG_DISTRIBUTION_TRACKING
            value: "true"
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi
        service:
          type: LoadBalancer
          ports:
          - port: 15021
            targetPort: 15021
            name: status-port
            protocol: TCP
          - port: 80
            targetPort: 8080
            name: http2
            protocol: TCP
          - port: 443
            targetPort: 8443
            name: https
            protocol: TCP
          # Additional port for gRPC services
          - port: 15010
            targetPort: 15010
            name: grpc-xds
            protocol: TCP
        env:
          # Performance tuning
          - name: ISTIO_META_ROUTER_MODE
            value: "sni-dnat"
          - name: PILOT_ENABLE_INGRESS_GATEWAY_SDS
            value: "true"
          # Security settings
          - name: ISTIO_META_REQUESTED_NETWORK_VIEW
            value: "pyairtable-network"
        overlays:
        - kind: Deployment
          name: istio-ingressgateway
          patches:
          - path: spec.template.spec.containers.[name:istio-proxy].securityContext
            value:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1337
    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 10m
            memory: 40Mi
          limits:
            cpu: 100m
            memory: 128Mi
        env:
          - name: ISTIO_META_ROUTER_MODE
            value: "sni-dnat"
        overlays:
        - kind: Deployment
          name: istio-egressgateway
          patches:
          - path: spec.template.spec.containers.[name:istio-proxy].securityContext
            value:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1337

---
# Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default
  namespace: istio-system
spec:
  # Global metrics configuration
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        request_protocol:
          operation: UPSERT
          value: "%{REQUEST_PROTOCOL}"
        response_flags:
          operation: UPSERT
          value: "%{RESPONSE_FLAGS}"
        connection_security_policy:
          operation: UPSERT
          value: "%{CONNECTION_SECURITY_POLICY}"
  # Access logging configuration
  accessLogging:
  - providers:
    - name: otel
  # Distributed tracing configuration
  tracing:
  - providers:
    - name: jaeger

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh
  namespace: istio-system
  labels:
    app: istiod
spec:
  selector:
    matchLabels:
      app: istiod
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus

---
# Kiali Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
data:
  config.yaml: |
    auth:
      strategy: anonymous
    deployment:
      accessible_namespaces:
      - "**"
      namespace: istio-system
    external_services:
      prometheus:
        url: "http://prometheus:9090"
      grafana:
        url: "http://grafana:3000"
      jaeger:
        url: "http://jaeger-query:16686"
    server:
      port: 20001
      web_root: "/kiali"

---
# Jaeger Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: istio-system
data:
  span-storage-type: memory
  collector.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          http:
            endpoint: 0.0.0.0:14268
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_binary:
            endpoint: 0.0.0.0:6832
    processors:
      batch:
    exporters:
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [batch]
          exporters: [jaeger]

---
# Istio CNI Configuration
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: istio-cni
  namespace: istio-system
spec:
  components:
    cni:
      enabled: true
      k8s:
        overlays:
        - kind: DaemonSet
          name: istio-cni-node
          patches:
          - path: spec.template.spec.containers.[name:install-cni].securityContext
            value:
              privileged: true
              runAsUser: 0
              runAsGroup: 0
              capabilities:
                add:
                - NET_ADMIN
                - SYS_ADMIN