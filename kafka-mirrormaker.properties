# MirrorMaker properties for Kafka cluster backup and disaster recovery
# This configuration enables cross-cluster replication for PyAirtable events

# Consumer configuration (source cluster)
consumer.bootstrap.servers=kafka-1:29092,kafka-2:29095,kafka-3:29098
consumer.group.id=pyairtable-mirrormaker-consumer
consumer.auto.offset.reset=earliest
consumer.enable.auto.commit=false
consumer.key.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
consumer.value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

# Producer configuration (destination cluster)
# Note: In a real disaster recovery setup, this would point to a backup cluster
producer.bootstrap.servers=kafka-1:29092,kafka-2:29095,kafka-3:29098
producer.acks=all
producer.retries=2147483647
producer.batch.size=16384
producer.linger.ms=5
producer.buffer.memory=33554432
producer.key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
producer.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# Replication settings
num.streams=1
abort.on.send.failure=true

# Topic whitelist (replicate only PyAirtable topics)
whitelist=pyairtable.*

# Offset commit settings
offset.commit.interval.ms=60000

# Message handler for custom processing
message.handler=org.apache.kafka.tools.MirrorMaker$DefaultMirrorMakerMessageHandler

# Security configuration (if needed)
# consumer.security.protocol=SSL
# consumer.ssl.truststore.location=/etc/kafka/secrets/kafka.server.truststore.jks
# consumer.ssl.truststore.password=pyairtable-truststore-password

# producer.security.protocol=SSL
# producer.ssl.truststore.location=/etc/kafka/secrets/kafka.server.truststore.jks
# producer.ssl.truststore.password=pyairtable-truststore-password