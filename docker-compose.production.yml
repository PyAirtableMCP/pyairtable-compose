version: '3.8'

# Production-ready Docker Compose for PyAirtable Platform
# Optimized for Phase 1 deployment with proper resource limits and security

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pyairtable}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - pyairtable-internal
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pyairtable}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - pyairtable-internal
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # =============================================================================
  # PHASE 1 GO SERVICES
  # =============================================================================

  api-gateway:
    build:
      context: ./go-services/api-gateway
      dockerfile: Dockerfile
      target: production
    environment:
      # Server Configuration
      PORT: 8080
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Service URLs
      AUTH_SERVICE_URL: http://auth-service:8001
      USER_SERVICE_URL: http://user-service:8002
      AIRTABLE_GATEWAY_URL: http://airtable-gateway:8002
      WORKSPACE_SERVICE_URL: http://workspace-service:8004
      
      # External Services
      MCP_SERVER_URL: http://mcp-server:8001
      LLM_ORCHESTRATOR_URL: http://llm-orchestrator:8003
      PLATFORM_SERVICES_URL: http://platform-services:8007
      
      # Enhanced JWT Authentication Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ISSUER: ${JWT_ISSUER:-pyairtable-platform}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-pyairtable-api}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION:-900}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION:-604800}
      JWT_ROTATION_ENABLED: ${JWT_ROTATION_ENABLED:-true}
      JWT_BLACKLIST_ENABLED: ${JWT_BLACKLIST_ENABLED:-true}
      SESSION_SECRET: ${SESSION_SECRET}
      API_KEY: ${API_KEY}
      REQUIRE_API_KEY: ${REQUIRE_API_KEY:-true}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      
      # Rate Limiting
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:-1000}
      RATE_LIMIT_BURST: ${RATE_LIMIT_BURST:-100}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
    ports:
      - "8080:8080"
    networks:
      - pyairtable-internal
      - pyairtable-public
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  auth-service:
    build:
      context: ./go-services/auth-service
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8001
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ISSUER: ${JWT_ISSUER:-pyairtable-platform}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-pyairtable-api}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION:-900}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION:-604800}
      JWT_ROTATION_ENABLED: ${JWT_ROTATION_ENABLED:-true}
      JWT_BLACKLIST_ENABLED: ${JWT_BLACKLIST_ENABLED:-true}
      SESSION_SECRET: ${SESSION_SECRET}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-12}
      PASSWORD_HASH_ROUNDS: ${PASSWORD_HASH_ROUNDS:-14}
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
    networks:
      - pyairtable-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  user-service:
    build:
      context: ./go-services/user-service
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8002
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      CACHE_TTL: ${CACHE_TTL:-900}
    networks:
      - pyairtable-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  workspace-service:
    build:
      context: ./go-services/workspace-service
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8004
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
    networks:
      - pyairtable-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # =============================================================================
  # PYTHON SERVICES (Core Platform)
  # =============================================================================

  airtable-gateway:
    build:
      context: ./python-services/airtable-gateway
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8002
      AIRTABLE_TOKEN: ${AIRTABLE_TOKEN}
      AIRTABLE_BASE: ${AIRTABLE_BASE}
      API_KEY: ${API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CACHE_TTL: ${AIRTABLE_CACHE_TTL:-3600}
      RATE_LIMIT: ${AIRTABLE_RATE_LIMIT:-5}
    networks:
      - pyairtable-internal
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  mcp-server:
    build:
      context: ./python-services/mcp-server
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8001
      AIRTABLE_GATEWAY_URL: http://airtable-gateway:8002
      AIRTABLE_GATEWAY_API_KEY: ${API_KEY}
      MCP_SERVER_MODE: http
      MCP_SERVER_PORT: 8001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - pyairtable-internal
    depends_on:
      airtable-gateway:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  llm-orchestrator:
    build:
      context: ./python-services/llm-orchestrator
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8003
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      MCP_SERVER_HTTP_URL: http://mcp-server:8001
      USE_HTTP_MCP: true
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/4
      USE_REDIS_SESSIONS: true
      THINKING_BUDGET: ${THINKING_BUDGET:-50000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - pyairtable-internal
    depends_on:
      mcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  platform-services:
    build:
      context: ./python-services/platform-services
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8007
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      API_KEY: ${API_KEY}
      REQUIRE_API_KEY: ${REQUIRE_API_KEY:-true}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/5
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-8}
      PASSWORD_HASH_ROUNDS: ${PASSWORD_HASH_ROUNDS:-12}
      ANALYTICS_RETENTION_DAYS: ${ANALYTICS_RETENTION_DAYS:-90}
      METRICS_BATCH_SIZE: ${METRICS_BATCH_SIZE:-100}
    networks:
      - pyairtable-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8007/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  automation-services:
    build:
      context: ./pyairtable-automation-services
      dockerfile: Dockerfile
      target: production
    environment:
      PORT: 8006
      MCP_SERVER_URL: http://mcp-server:8001
      PLATFORM_SERVICES_URL: http://platform-services:8007
      API_KEY: ${API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/6
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pyairtable}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10MB}
      ALLOWED_EXTENSIONS: ${ALLOWED_EXTENSIONS:-pdf,doc,docx,txt,csv,xlsx}
      UPLOAD_DIR: /app/uploads
      DEFAULT_WORKFLOW_TIMEOUT: ${DEFAULT_WORKFLOW_TIMEOUT:-300}
      MAX_WORKFLOW_RETRIES: ${MAX_WORKFLOW_RETRIES:-3}
      SCHEDULER_CHECK_INTERVAL: ${SCHEDULER_CHECK_INTERVAL:-30}
    networks:
      - pyairtable-internal
    depends_on:
      mcp-server:
        condition: service_healthy
      platform-services:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - file-uploads:/app/uploads
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8006/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # =============================================================================
  # FRONTEND (Optional)
  # =============================================================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_API_GATEWAY_URL: http://api-gateway:8080
      API_KEY: ${API_KEY}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-default-secret-change-in-production}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    networks:
      - pyairtable-public
      - pyairtable-internal
    depends_on:
      api-gateway:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # =============================================================================
  # MONITORING (Optional)
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pyairtable-internal
      - pyairtable-public
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

networks:
  pyairtable-internal:
    driver: bridge
    internal: true
  pyairtable-public:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  file-uploads:
    driver: local
  prometheus-data:
    driver: local